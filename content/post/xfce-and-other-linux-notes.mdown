+++
date = "2017-04-18T19:55:57-04:00"
subtitle = ""
tags = []
comments = "true"
title = "Switching to XFCE and Other Linux Notes"

+++

This post is a bit of a sequel to my post about [installing Ubuntu on my old Macbook Pro](https://sts10.github.io/post/2016-11-07-installing-ubuntu-on-my-old-macbook-pro/). This is just a collection of notes on improvements I've made to my installation (on the same laptop for now), including changing my desktop environment.

Hope this helps you! 

## Ditching Unity Desktop

To avoid the high memory usage of Ubuntu's Unity desktop environment, I explored installing a more lightweight desktop environment (DE). I had a gist that Unity was a bit of a memory hog compared to other desktop environments. I also spotted [this Reddit post](https://www.reddit.com/r/linux/comments/5l39tz/linux_distros_ram_consumption_comparison_updated/?st=ixpgu5wy&sh=67b8f57f) that compares some lightweight distros in terms of RAM consumption. 

From that list, I first installed Ubuntu's LXDE desktop environment (called Lubuntu). The size of the installation was about 340 mb. I later installed the XFCE desktop environment, which takes a little more memory, but I like considerably more. 

Also, a seemingly big advantage XFCE has over other desktop environments is it's popularity with other distros,  including well-regarded "advanced" distros like Debian and Manjaro. From what I've gathered this effectively means that XFCE is a desktop environment you can "grow with", i.e. you can take your knowledge, comfort, and configuration with you to other distributions that are made to work with it (obviously unlike Unity, which seems to be only used with Ubuntu, and only until Ubuntu 18.04).

### Installing XFCE on Ubuntu

1. In a terminal, run `sudo apt-get install xfce4 xfce4-goodies`
2. Restart your computer
3. At login screen, select "xfce session" from the dropdown menu in the top-right. Then login as usual
4. You then likely want to run `sudo apt update && sudo apt upgrade`

#### XFCE: What You Get Straight out of the Box

- "Whisker menu" is the Start-menu-like menu in the top left. Same as Lubuntu 
- A nice, MacOS-like dock on the bottom with GNOME Terminal, File Manager, Web Browser (default), and a search

#### XFCE Settings

There's a nice Settings menu in Whisker menu > Settings > Settings Manager

- In Window Manager > Keyboard, I set up a bunch of window resizing keyboard shorts!
- In Session and Startup > Application Autostart, I entered a custom command to remap caps lock to control. 
    Name: remap caps
    Description: remap caps lock to control
    Command: `/usr/bin/setxkbmap -option "ctrl:nocaps"`
- In Mouse and Touchpad > Devices > Touchpad, I enabled "Disable touchpad while typing" and I disabled "Tap touchpad to click"

#### XFCE Memory Usage

You can check how much RAM you have available by running `free -m` in the terminal. Thanks to [this site](http://www.linuxatemyram.com/), I knew to look for the value under "available" to get an accurate estimate of how many megabytes of my memory were "free". 

With Firefox, Terminal, and Settings open, I've got about 980 MB out of 2GB RAM "available". (This is compared to abut 1180 MB available when using Lubuntu-- it makes sense that Xubuntu slightly heavier than Lubuntu.)

### Installing LXDE/Lubuntu

Before installing XFCE, I gave Lubuntu/LXDE a shot. I did consume less memory, but I found it a bit clunky. 

To install Lubuntu, I ran `sudo apt-get install lubuntu-desktop` (I learned this from a helpful user in the [Ubuntu Riot.im channel](https://riot.im/app/#/room/ubuntu:matrix.org)).  

After installing the Lubuntu desktop environment, you want to run the software updater (you can also update software in the Terminal by running `sudo apt update && sudo apt upgrade`). Then restart the computer (that seems to have been pretty important), and at the login screen choose Lubuntu (or LXDE... that's another option and I'm not sure what the difference is). 

#### Lubuntu Memory Usage

With my terminal and Firefox running on Lubuntu, I have about 1187 MB RAM of my 2 GB available, as opposed to Ubuntu, which generally only left about 700 or 800 MB available when I was running a couple of programs (not a very scientific test, I know).

Plus I can always switch back to regular Ubuntu via the login screen.

Which ever desktop environemnt you choose (there are many others, including KDE and GNOME), the following should work for you. But know that I wrote most of them while using Ubuntu XFCE.

## Application Launcher

On macOS I make frequent use of [Alfred](https://www.alfredapp.com/) as an application launcher. Ubuntu's Unity desktop environment sort of had something like that, which you can initiate by pressing the command key on its own at any time. But I couldn't find something similar in LXDE-- the application menu (similar to the Start menu in Windows) was just not fast enough for me coming from macOS + Alfred). 

So I found [this askubuntu answer](https://askubuntu.com/questions/203851/any-search-tool-for-lxde-menu/203852#203852) that recommends installing an application called Synapse by running `sudo apt-get install synapse`. By default the launcher is invoked by hitting `ctrl + space`, but I changed it to `alt+Enter` by launching Synapse and clicking on the not-super-obvious round button on the right side of the pop-up display and clicking "Preferences". Works great! 


## Customizing Appearance of XFCE (Ubuntu)

### Desktop Background Image

1. Pick one (I found one I liked [here](https://www.buzzfeed.com/jessicaprobus/26-remarkably-soothing-desktop-backgrounds?utm_term=.uhwBX0qylL#.vxgE1Z8Yar)). 
2. Download the image file to your Pictures folder. 
3. Go to Settings Manager > Desktop > Background. In bottom-right change Folder to Pictures and find your desired background.

### "Theme" 

I went with axiom, which I got [here](https://www.xfce-look.org/p/1016679/). To install it: 

1. I downloaded [the tar file](https://www.xfce-look.org/p/1016679/). 
2. In terminal I ran `mkdir ~/.themes`
3. I then extracted two directories from the tar file called "axiom" and "axiomd", and then moved them both into the new `~/.themes` directory. 
4. Go to Settings Manager > Appearance and choose either axiom or axiomd
5. Then is Settings Manager > Window Manager > Style and select either axiom or axiomd

### Icons

I went with "Papers" icons for now, which you can find download instructions for on [the offical website](https://snwh.org/paper/download). After running those updates, I went to Settings Manager > Appearance > Icons and selected Paper. 

### Login Window

Go to Settings Manager > LightDM GTK + Greeter Settings and select the theme and icon set you like. You can also change your user image or remove it all together. Unfortunately, for me, axiom was not available here, so I went with Adwaita for now. 

Note: [This video](https://www.youtube.com/watch?v=GR2y0xOIIdI) helped me quite a bit:

<iframe width="560" height="315" src="https://www.youtube.com/embed/GR2y0xOIIdI" frameborder="0" allowfullscreen></iframe>

### Font

I'm going with Noto Sans for now (the actual choice says "Noto Sans CJK JP"). I selected this font in Settings Manager > Appearance > Fonts. I also selected basically every where else I encountered a choice of font in Settings. 

### Panels

Odds are you Panel 1 is on top of your screen, and panel 2 is the dock-like panel that I think starts at the bottom of your screen. 

For customizing Panel 1, I followed some of the instructions in the first minute of [this video](https://www.youtube.com/watch?v=tJQ0y2XMoMw). I set the mode to Vertical, which puts in on the left, increased transparency, and made it 48 pixels wide, and had it never hide. Then, in Items > Applications Menu I deselected "show button title" and changed the image. In Items > Window Buttons I deselected "Show button labels", selected "Show flat buttons", deselected "Show handle", and set Window grouping to always.

I'm not sure what I want out of panel 2 (the dock) yet, so I set it to be pretty small and have it hide intelligently. 




## Appendix

### Installing rbenv on Ubuntu 16.04

We're attempting to install [rbenv](https://github.com/rbenv/rbenv) via the ["Basic GitHub Checkout" method](https://github.com/rbenv/rbenv#basic-github-checkout).

I think we're also going to want [ruby-build](https://github.com/rbenv/ruby-build#readme) plugin. I DON'T think I'm going to want [rbenv-gemset](https://github.com/jf/rbenv-gemset)?

#### Installing rbenv

As mentioned above, we're going to install rbenv via the ["Basic GitHub Checkout" method](https://github.com/rbenv/rbenv#basic-github-checkout). I reproduce them below, but you should consult the latest instructions for Ubuntu on that GitHub page.

Clone down rbenv:
```
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
```

Make it more efficient:
```
cd ~/.rbenv && src/configure && make -C src
```

Add rbenv to your PATH:
```
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
```

And finally run this init script:
```
~/.rbenv/bin/rbenv init
```

Following instructions from the init script run, I added `eval "$(rbenv init -)"` to my `~/.bashrc`, just _below_ the `export PATH="$HOME/.rbenv/bin:$PATH"` line that we added with the echo command above.

Now restart your terminal and/or run `source ~/.bashrc`.

Check your rbenv installation by running `type rbenv`. It should say it's a function. 

#### Installing the ruby-build plugin

Wanting to build the latest version of Ruby a nice and clean way, I installed [ruby-build](https://github.com/rbenv/ruby-build#readme) by running `git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build`

#### Installing a version of Ruby using rbenv (some problems)

Now we can install some versions of Ruby using rbenv.

`rbenv install --list` gives us all available versions to install. 

I'm going with 2.3.3, so I ran `rbenv install 2.3.3`. It took a long time to install and then told my the build failed. It suggested running `apt-get install -y libreadline-dev` so I did that (prefaced with `sudo`) and that software seemed to install successfully. 

On second attempt I ran `rbenv install --verbose 2.3.3` so that I could better see what's going on (turns out, it's a lot!). Success this time!

Once that's all installed, I opened a new gnome-terminal window. I was greeted by this shitty message at the top of the terminal window: 

> The program 'rbenv' is currently not installed. You can install it by typing: `sudo apt install rbenv`

but I learned that this can be temporarily solved be running `source ~/.profile`. And that it will be solved permanently once you restart Ubuntu/Lubuntu (source: [this GitHub issue](https://github.com/rbenv/rbenv/issues/424)).

Then I had to set Ruby v. 2.3.3 as my global version of Ruby, which I did with `rbenv global 2.3.3`. After that, `ruby --version` gave me the familiar: `ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-linux]`


#### Installing gems with rbenv

I definitely want to install the "bundler" gem. To do this, I ran: `gem install bundler`, just like with RVM. 

From there things seem to be just fine. Installed gems just work so far. 



### Using Pidgin with a Google Account, and Setting Up OTR

Pidgin comes installed with Ubuntu 16.04. To add my existing Google Account, I followed the steps outlined in [this Stack Overflow answer](https://stackoverflow.com/questions/28681341/how-to-add-google-talk-hangouts-to-pidgin-chat-client/33898893#33898893).

To summarize: 

In Pidgin, add a new account. Set the Protocol to "Google Talk", username to your Google username, and the Domain to "gmail.com". 

For the password you'll need to create a dedicated app password. You can do that [in your Google accounts Security > App Passwords section](https://security.google.com/settings/security/apppasswords). When creating the new app password, set "app" to "other" and call it something like "linux pidgin"-- it doesn't matter what you call it. Optionally, if on a secure computer, tick the "Remember password" checkmark. (Warning: This will mean your new app password will be stored in plain text in `~/.purple/accounts.xml`.) Leave "Resource" and "Local Alias" blank.

#### Installing and Enabling OTR

Once my Google account was successfully added, I installed the Pidgin-otr plugin by running `sudo apt-get install pidgin-otr` in terminal. To enable and setup OTR, I followed [this EFF guide](https://ssd.eff.org/en/module/how-use-otr-linux). That guide also describes how to install the otr plugin through the Ubuntu Software manager if you're more into GUIs (see the early steps of that EFF guide).

#### Further Pidgin Customizations

Some of my contacts/buddies set there status to "offline" nearly all the time, even when they're actually there.

To display offline buddies, go to Buddies > Show > Offline Buddies. There are more preferences, like muting sounds, in Tools > Preferences.

Not sure how to disable the pop up notifications yet though.


### How to Install Neovim on Ubuntu 16.04

I'm using Ubuntu 16.04 and we're assuming that we're going to be using gnome-terminal. I couldn't figure out how to get HEX colors in Vim when using either XFCE's default terminal or Lubuntu's default Terminal application, LXTerminal. 

Thus I took some steps to make Gnome terminal the default Terminal application.

**Note:** If you're looking for info on installing plain Vim, see below.

#### Installation

First, we're going to want to install git in order to use vim-plug later: `sudo apt install git`

Next, I went over to [the Ubuntu section of the Neovim installation page](https://github.com/neovim/neovim/wiki/Installing-Neovim#ubuntu)

Assuming I needed this dependency, I probably ran: `sudo apt-get install software-properties-common`

I then chose the unstable version: https://launchpad.net/%7Eneovim-ppa/+archive/ubuntu/unstable 

To add the PPA to my system, I ran 

```
sudo add-apt-repository ppa:neovim-ppa/unstable
sudo apt-get update
```

I then installed Neovim from this PPA by running `sudo apt-get install neovim`. I think the `nvim` command worked after that.


#### Critical changes to Vim config file

First, since on Lubuntu I'm likely only going to use Neovim and not Vim, I renamed my vimrc to `init.vim` and put it in `~/.config/nvim/` (which I may have had to create myself). 

I then changed my [vim-plug](https://github.com/junegunn/vim-plug) call to download my plugins to `~/.config/nvim/plugged`: `call plug#begin('~/.config/nvim/plugged')`

I could have chosen to set vim-plug to download plugins to another directory somewhere in `~/.local/`, which may have kept the `~/.config` directory closer to what I assume is its intended purpose of just being configuration files, and not actual software.

Also, I had to redo this mappings that open my vim config file:

```vim
" Quickly open a vertical split of my VIMRC and source my VIMRC
nnoremap <silent> <leader>ev :vs $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>
```

##### Syntax Highlighting Colors

I also made sure that `set termguicolors` was definitely being run in my `init.vim` file-- on my Mac I ran it only conditionally based on the terminal Vim detected. For now, let's just run it, as gnome-terminal is capable of running hex color vim themes.

#### System Clipboard

Within Neovim I ran `:CheckHealth` which kindly informed me that to get system clipboard support, I'd need to install a program called [XSel](https://apps.ubuntu.com/cat/applications/xsel/). So back on the terminal I ran `sudo apt install xsel` and then restarted my terminal. 

Then in my `init.vim` I figured out through trial and error that I needed to use the `+` register to access the system clipboard, rather than `*` that I used on MacOS:

```vim
" use leader to interact with the system clipboard
nnoremap <Leader>p "+]p
nnoremap <Leader>P "+]P

nnoremap <Leader>y :y+<cr>
nnoremap <Leader>c ^"+c$
nnoremap <Leader>d ^"+d$

vnoremap <Leader>y "+y
vnoremap <Leader>c "+c
vnoremap <Leader>d "+d
```

Though strangely, custom mappings that use the systemclipboard register still work with the `*` rather than the `+`:

```vim
" place enter file on system clipboard
nnoremap <Leader>a :%y*<cr>

" In markdown files, Control + a surrounds highlighted text with square
" brackets, then dumps system clipboard contents into parenthesis
autocmd FileType markdown vnoremap <c-a> <Esc>`<i[<Esc>`>la](<Esc>"*]pa)<Esc>
```

#### Other Things To Consider

I have Lubuntu installed on an old MacBook, whose track pad sometimes gets triggered when I'm typing. Thus in this Vim configuration I chose to disable my mouse

```vim
" disable mouse
autocmd BufEnter * set mouse=
```


#### Some Notes on Vim (not Neovim)

As of this writing, you can install Vim 7.4.X with something like `sudo apt-get vim`. To install, Vim 8 currently you need to use [a PPA](http://tipsonubuntu.com/2016/09/13/vim-8-0-released-install-ubuntu-16-04/). 

But with both versions of Vim I was having trouble getting access to the system clipboard, so I went with Neovim. Though you can have both installed, with their own configurations, pretty easily.


### Installing Pip and Magic Wormhole on Lubuntu 16.04

#### Python
Python 2 and Python 3 come with Ubuntu/Lubuntu. `python` calls v 2.7.12 and `python3` calls 3.5.2. 

#### Installing pip
I think you can install regular pip by running: `sudo apt install python-pip` and then upgrading it with `pip install --upgrade pip`. I'm not sure whether, after doing this, pip is tied to python 2 or 3. My guess is v 2, which is fine.

#### Installing Magic Wormhole
To install [magic-wormhole](https://github.com/warner/magic-wormhole#installation), a CLI to "get things from one computer to another, safely", I needed to install some other stuff. They suggest installing all at once with `apt-get install python-pip build-essential python-dev libffi-dev libssl-dev`. I likely could have run that command without `python-pip`.

I was then able to install magic-wormhole with `sudo pip install magic-wormhole`.
