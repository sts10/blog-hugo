<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prevent Default</title>
    <link>http://example.org/index.xml</link>
    <description>Recent content on Prevent Default</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Mar 2017 21:10:42 -0400</lastBuildDate>
    <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>welcome</title>
      <link>http://example.org/post/welcome/</link>
      <pubDate>Thu, 30 Mar 2017 21:10:42 -0400</pubDate>
      
      <guid>http://example.org/post/welcome/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s some sample text!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Ricochet 1.1.4 on Lubuntu 16.04</title>
      <link>http://example.org/post/richochet-on-lubuntu/</link>
      <pubDate>Tue, 24 Jan 2017 21:10:42 -0400</pubDate>
      
      <guid>http://example.org/post/richochet-on-lubuntu/</guid>
      <description>

&lt;p&gt;When I first installed &lt;a href=&#34;https://ricochet.im/&#34;&gt;Ricochet IM&lt;/a&gt; on my machine running Lubuntu, I either ran &lt;code&gt;sudo apt install ricochet-im&lt;/code&gt;, or downloaded it through Ubuntu&amp;rsquo;s GUI &amp;ldquo;Software&amp;rdquo; application. Regardless of which I chose, I think both methods install Ricochet version 1.1.2, as opposed the to latest release: &lt;a href=&#34;https://github.com/ricochet-im/ricochet/releases/tag/v1.1.4&#34;&gt;1.1.4&lt;/a&gt;. Considering this is a secure instant messaging app and new versions may contain important security fixes, I wanted to be using the latest version available (which I&amp;rsquo;m actually thanked in, due to &lt;a href=&#34;https://github.com/ricochet-im/ricochet/commit/fe40045cec8bed9a735c3cecbcca6ae2276d9902&#34;&gt;some extremely minor documentation fixes&lt;/a&gt;).&lt;/p&gt;

&lt;!-- more --&gt; 

&lt;p&gt;So I went over to &lt;a href=&#34;https://ricochet.im/&#34;&gt;ricochet.im&lt;/a&gt;, found the &lt;a href=&#34;https://ricochet.im/releases/1.1.4/&#34;&gt;releases page&lt;/a&gt; and downloaded the latest release for Linux, which is currently 1.1.4. I&amp;rsquo;m running Linux on a 64-bit machine (&lt;a href=&#34;https://sts10.github.io/blog/2016/11/07/installing-ubuntu-on-my-old-macbook-pro/&#34;&gt;an old Macbook Pro&lt;/a&gt;), so I went with &lt;code&gt;ricochet-1.1.4-linux-x86_64.tar.bz2&lt;/code&gt;. I downloaded this compressed file to my &lt;code&gt;Downloads/&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id=&#34;verifying-the-downloaded-tar-file&#34;&gt;Verifying the downloaded tar file&lt;/h2&gt;

&lt;p&gt;To verify the contents of the downloaded tar file, I also downloaded the &lt;code&gt;.asc&lt;/code&gt; signature file associated with the release I downloaded from to the &lt;a href=&#34;https://ricochet.im/releases/1.1.4/&#34;&gt;releases page&lt;/a&gt;. I then went to the &lt;a href=&#34;https://ricochet.im/&#34;&gt;ricochet.im website&lt;/a&gt; and downloaded &lt;a href=&#34;https://ricochet.im/john-brooks.asc&#34;&gt;John Brooks&amp;rsquo; public gpg key&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then in terminal I navigated to my &lt;code&gt;~/Downloads&lt;/code&gt; directory (&lt;code&gt;cd ~/Downloads&lt;/code&gt;) and ran &lt;code&gt;gpg2 --import john-brooks.asc&lt;/code&gt;. gpg2 informed me that 1 key was successfully imported&amp;ndash; woohoo. To double check that this was actually John Brooks&amp;rsquo; public key that he signs Ricochet releases with, I ran &lt;code&gt;gpg2 --fingerprint&lt;/code&gt; to list the fingerprints of the ekys on my key ring. I saw the fingerprint for the Brooks key was &lt;code&gt;9032 CAE4 CBFA 933A 5A21 45D5 FF97 C53F 183C 045D&lt;/code&gt;, which is exactly the same fingerprint listed in &lt;a href=&#34;https://github.com/ricochet-im/ricochet#downloads&#34;&gt;the Ricochet Github README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next I needed to actually verify the tar file, so I ran &lt;code&gt;gpg2 --verify ricochet-1.1.4-linux-x86_64.tar.bz2.asc&lt;/code&gt;. gpg2 correctly assumed that the signed data was in &lt;code&gt;ricochet-1.1.4-linux-x86_64.tar.bz2&lt;/code&gt; and gave me the message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg: Good signature from &amp;quot;John Brooks &amp;lt;john.brooks@dereferenced.net&amp;gt;&amp;quot; [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 9032 CAE4 CBFA 933A 5A21  45D5 FF97 C53F 183C 045D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, the fingerprint listed on the last line of the output above matches the one listed on &lt;a href=&#34;https://github.com/ricochet-im/ricochet#downloads&#34;&gt;the Ricochet Github README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My understanding is that this &amp;ldquo;Good signature&amp;rdquo; message means I got a good tar file from the website. The &amp;ldquo;WARNING&amp;rdquo; that it&amp;rsquo;s not a trusted signature just means that I didn&amp;rsquo;t manually mark John Brooks&amp;rsquo; public key as &amp;ldquo;ultimately trusted&amp;rdquo; before running the verify command.&lt;/p&gt;

&lt;p&gt;For more about this and the process of verifying signatures generally, checkout &lt;a href=&#34;https://www.qubes-os.org/doc/verifying-signatures/&#34;&gt;this page in the Qubes OS documentation&lt;/a&gt; and/or &lt;a href=&#34;https://keepassxc.org/verifying-signatures&#34;&gt;KeePassXC&amp;rsquo;s page on the subject&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;extraction-and-installing&#34;&gt;Extraction&amp;hellip; and Installing?&lt;/h2&gt;

&lt;p&gt;After I found a good signature, I double-clicked the &lt;code&gt;.tar.bz2&lt;/code&gt; file to uncompress/extract it (though I understand that I could have been a badass and also &lt;a href=&#34;https://linuxjourney.com/lesson/compressed-archives-tar&#34;&gt;done this in the terminal&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I then got a new directory called &lt;code&gt;ricochet&lt;/code&gt; that had subdirectories like &lt;code&gt;config&lt;/code&gt; and &lt;code&gt;QtQuick&lt;/code&gt;, a README file, a file called &lt;code&gt;tor&lt;/code&gt; I was scared to click, and a file called &lt;code&gt;ricochet&lt;/code&gt; that when I clicked I got asked what application I wanted to use to open it. I couldn&amp;rsquo;t figure out how to run the actual Ricochet application&amp;ndash; &lt;a href=&#34;https://github.com/ricochet-im/ricochet/blob/master/packaging/linux-static/content/README&#34;&gt;the README&lt;/a&gt; didn&amp;rsquo;t help me much.&lt;/p&gt;

&lt;p&gt;So first I Googled (actually Duck Duck Go) something like &amp;ldquo;ubuntu how to install from tar file&amp;rdquo; and landed on &lt;a href=&#34;https://askubuntu.com/questions/25961/how-do-i-install-a-tar-gz-or-tar-bz2-file#1030&#34;&gt;this askubuntu answer&lt;/a&gt;, which talks about opening a file called &lt;code&gt;INSTALL&lt;/code&gt; that I didn&amp;rsquo;t have, and/or running &lt;code&gt;./configure&lt;/code&gt;, which was returning an error for me.&lt;/p&gt;

&lt;p&gt;Eventually, I figured out that I could just run &lt;code&gt;./ricochet&lt;/code&gt; from my &lt;code&gt;ricochet&lt;/code&gt; directory and the real application&amp;ndash; version 1.1.4&amp;ndash; opened right up. Cool. But it would be kind of shitty if I had to first open Terminal, then run a command to launch Ricochet. Ideally I&amp;rsquo;d have a Ricochet icon in my Lubuntu start menu.&lt;/p&gt;

&lt;h2 id=&#34;creating-an-icon-in-the-lubuntu-start-menu&#34;&gt;Creating an icon in the Lubuntu start menu&lt;/h2&gt;

&lt;p&gt;After some more searching I found a subheading on an Ubuntu/Lubuntu help page called &lt;a href=&#34;https://help.ubuntu.com/community/Lubuntu/Windows#How_to_make.2Fadd_an_application_to_the_.22start.22_menu.&#34;&gt;&amp;ldquo;How to make/add an application to the &amp;ldquo;start&amp;rdquo; menu.&amp;rdquo;&lt;/a&gt; that described how to make a &lt;code&gt;.desktop&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The help page states: &amp;ldquo;Making a .desktop file in &lt;code&gt;~/.local/share/applications&lt;/code&gt; will show the item in the LXDE start menu.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;First I moved my &lt;code&gt;ricochet&lt;/code&gt; directory into &lt;code&gt;~/Desktop/my_programs&lt;/code&gt;, a directory I made for programs I&amp;rsquo;ve downloaded through the browser and am not sure where else to put (I know isn&amp;rsquo;t ideal but I figure it&amp;rsquo;s better than &lt;code&gt;~/Downloads&lt;/code&gt;&amp;ndash; &lt;a href=&#34;https://twitter.com/sts10&#34;&gt;hit me on Twitter&lt;/a&gt; if you know a better way). Next I confirmed that the new absolute command for launching Ricochet the application was &lt;code&gt;~/Desktop/my_programs/ricochet/ricochet&lt;/code&gt;, which indeed worked.&lt;/p&gt;

&lt;p&gt;Next, as described in the &lt;a href=&#34;https://help.ubuntu.com/community/Lubuntu/Windows#How_to_make.2Fadd_an_application_to_the_.22start.22_menu.&#34;&gt;help page&lt;/a&gt;, I created a &lt;code&gt;Ricochet.desktop&lt;/code&gt; text file from scratch in &lt;code&gt;~/.local/share/applications&lt;/code&gt; using a desktop file for another program that was also in that directory as a loose template (the other program is &lt;a href=&#34;https://crypto.cat/&#34;&gt;Cryptocat&lt;/a&gt;, just another program I had previously downloaded that had its .desktop file in &lt;code&gt;~/.local/share/applications&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;Ricochet.desktop&lt;/code&gt; file I typed out in its entirety:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Desktop Entry]
Type=Application
Name=Ricochet
Exec=/home/USER/Desktop/my_programs/ricochet/ricochet
Icon=/home/USER/Desktop/my_programs/ricochet/ricochet.png
Terminal=false
Categories=Network;InstantMessaging;Internet;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And be sure to substitute where it says &amp;ldquo;USER&amp;rdquo; for your username. If you&amp;rsquo;re not sure what your username is, just run &lt;code&gt;pwd&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;.desktop&lt;/code&gt; format also allows you to specify an icon image, so I went over to &lt;a href=&#34;https://github.com/ricochet-im/ricochet&#34;&gt;the Ricochet IM Github repo&lt;/a&gt; and downloaded &lt;a href=&#34;https://github.com/ricochet-im/ricochet/blob/master/icons/ricochet.png&#34;&gt;a PNG logo&lt;/a&gt; and put it in my ricochet directory.&lt;/p&gt;

&lt;p&gt;I think I had to restart the machine in order to see the icon appear in the start menu. After restart it was there in &amp;ldquo;Internet&amp;rdquo; next to Cryptocat and some other applications.&lt;/p&gt;

&lt;h2 id=&#34;things-i-haven-t-figure-out&#34;&gt;Things I haven&amp;rsquo;t figure out&lt;/h2&gt;

&lt;p&gt;So running &lt;code&gt;ricochet&lt;/code&gt; from anywhere other than my ricochet directory does not launch the application. I could likely solve this pretty easily with an &lt;code&gt;ln&lt;/code&gt; command or a line in my &lt;code&gt;bashrc&lt;/code&gt;, but I&amp;rsquo;ve never need to launch a non-text editor from the command line before.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also not 100% how I&amp;rsquo;ll go about upgrading to a new version of Ricochet, but the README says &amp;ldquo;To upgrade, extract the new version to the same location.&amp;rdquo; I assume I&amp;rsquo;ll be able to download a new tar file, extract it, and switch it out from old directory. I&amp;rsquo;ll likely keep the &lt;code&gt;config&lt;/code&gt; directory, as that has my username, contact list, and (I think) my private key (the README notes: &amp;ldquo;Once you run Ricochet, configuration will be stored in a &amp;lsquo;config&amp;rsquo; directory inside this folder&amp;rdquo;.).&lt;/p&gt;

&lt;p&gt;I also might not even have to edit the .desktop file (assuming I put the executable and the PNG icon in the same place).&lt;/p&gt;

&lt;h2 id=&#34;is-it-supposed-to-be-this-difficult-i-m-not-even-building-from-source&#34;&gt;Is it supposed to be this difficult? I&amp;rsquo;m not even building from source&lt;/h2&gt;

&lt;p&gt;To be honest, I&amp;rsquo;m too new to Linux/Ubuntu/Lubuntu to know. It does seem strange that there isn&amp;rsquo;t at least a copy of the Ricochet icon included in the tar that I downloaded. And I could also imagine there being a script that creates and places the &lt;code&gt;Ricochet.desktop&lt;/code&gt; file for you. In fact there is a &lt;a href=&#34;https://github.com/ricochet-im/ricochet/blob/master/src/ricochet.desktop&#34;&gt;ricochet.desktop file&lt;/a&gt; in the source of the project, but I couldn&amp;rsquo;t find it in the 1.1.4 tar.&lt;/p&gt;

&lt;p&gt;Of course I could have missed some step in the installation that does exactly these things and maybe more. And I should say that this tar I downloaded is meant to serve the needs of many Linux distributions, whose configurations processes may be very different than the ones I took.&lt;/p&gt;

&lt;p&gt;Of course this pre-built distribution does take care of a lot of things that could be big headaches, most notable the Tor configuration, which just works. As the README notes: &amp;ldquo;You do not need to manually run or configure tor. An unmodified tor binary is included with this package, and Ricochet will run it automatically, similiar [sic] to Tor Browser.&amp;rdquo; which is obviously awesome.&lt;/p&gt;

&lt;p&gt;At the end of the day I&amp;rsquo;ve got version 1.1.4 working and an icon for it in my start menu. I&amp;rsquo;m not sure how similar the process is on Ubuntu 16.04.&lt;/p&gt;

&lt;p&gt;Plus I learned a bit about Linux and Lubuntu. And yes, I did submitted &lt;a href=&#34;https://github.com/ricochet-im/ricochet/pull/521&#34;&gt;a fresh pull request&lt;/a&gt; to fix that pesky little typo in the README which has since been merged.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>YubiKey and OpenPGP</title>
      <link>http://example.org/post/2016-12-06-yubikey-and-gpg/</link>
      <pubDate>Tue, 06 Dec 2016 22:40:37 -0500</pubDate>
      
      <guid>http://example.org/post/2016-12-06-yubikey-and-gpg/</guid>
      <description>

&lt;p&gt;On Cyber Monday, I took advantage of &lt;a href=&#34;https://www.yubico.com&#34;&gt;Yubico&lt;/a&gt;&amp;rsquo;s 2-for-1 YubiKey deal and got two &lt;a href=&#34;https://www.yubico.com/products/yubikey-hardware/yubikey4/&#34;&gt;YubiKey 4&lt;/a&gt;s for the price on one ($40).&lt;/p&gt;

&lt;p&gt;My understanding is that usually these keys are used as a 2nd factor in 2-factor authentication schemes. In this capacity it works with Google and Dropbox, as well as a number of password managers including LastPass, dashlane, Keepass, and a &lt;a href=&#34;https://www.yubico.com/applications/password-management/&#34;&gt;number of others&lt;/a&gt;. Also, there&amp;rsquo;s &lt;a href=&#34;https://www.yubico.com/products/yubikey-hardware/&#34;&gt;a breakdown of some of the technical differences between models of YubiKeys&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However I was more interested in using it to store a PGP key, so that I might be able to use one PGP key on any computer I might find myself. I also wanted this PGP Key to be an RSA key of length of 4,096, so I needed either a YubiKey 4 or a YubiKey 4 Nano. As I say above, I went for the YubiKey 4.&lt;/p&gt;

&lt;!-- more --&gt; 

&lt;p&gt;(Note that according to &lt;a href=&#34;https://www.yubico.com/products/yubikey-hardware/yubikey4/#toggle-id-2&#34;&gt;the YubiKey 4&amp;rsquo;s FAQ section&lt;/a&gt;, &amp;ldquo;On the same YubiKey, at the same time, you can use U2F to secure your Gmail account, access services like LastPass, as well as secure your communication using applets loaded on your device, such as the OpenPGP applet.&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;The most immediate reason I wanted to be able to take my private keys with me when I left a room was that I didn&amp;rsquo;t want them on my work computer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I&amp;rsquo;m not an expert. While I think I&amp;rsquo;ve gotten pretty far with this, I don&amp;rsquo;t understand everything yet. This blog post is mostly for my personal reference of how I got this to work, while consulting a combination of tutorials written by others linked to just below. If that doesn&amp;rsquo;t sound like what you&amp;rsquo;re looking for, check out the tutorials themselves and close this tab&amp;ndash; no hard feelings!&lt;/p&gt;

&lt;p&gt;I have a basic understanding of PGP (I also have &lt;a href=&#34;https://sts10.github.io/blog/2015/07/01/my-basic-understanding-of-pgp-encryption/&#34;&gt;an earlier post outlining some basics of PGP&lt;/a&gt; if you like), but I knew setting up and using a YubiKey would be tricky for me and I still don&amp;rsquo;t have a full grasp of it. So I spent the $40 and figured I could figure it out. Here&amp;rsquo;s what I did.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hao0uteruy2io8071pzyqz13-wpengine.netdna-ssl.com/wp-content/uploads/2015/04/YubiKey-4-1000-2016-444x444.png&#34; alt=&#34;A YubiKey 4&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-i-did-tutorials-i-found&#34;&gt;What I Did (Tutorials I Found)&lt;/h2&gt;

&lt;p&gt;To do this I consulted these two tutorials: &lt;a href=&#34;https://trmm.net/Yubikey&#34;&gt;this one from Trammel Hudson&lt;/a&gt; and &lt;a href=&#34;https://www.yubico.com/support/knowledge-base/categories/articles/use-yubikey-openpgp/&#34;&gt;a more official one on the Yubico website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also &lt;a href=&#34;https://github.com/drduh/YubiKey-Guide&#34;&gt;this drduh gist&lt;/a&gt;, however it&amp;rsquo;s does everything though the command line and is done on a Linux Debian installation (not MacOS).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also &lt;a href=&#34;https://www.gnupg.org/gph/en/manual.html&#34;&gt;this GnuPG.org manual&lt;/a&gt; (which has a &lt;a href=&#34;https://www.gnupg.org/gph/en/manual.html#MANAGEMENT&#34;&gt;key management section&lt;/a&gt;) that I&amp;rsquo;ll reference later.&lt;/p&gt;

&lt;h2 id=&#34;pgp-strategy-goals&#34;&gt;PGP Strategy / Goals&lt;/h2&gt;

&lt;p&gt;As mentioned above, my goal was to have one PGP key that would follow me around from computer to computer. And rather than use a regular USB key to shuttle my private keys to each computer, I figured there was a more secure option with similar portability, which seems to be what the YubiKey 4 is made for (it&amp;rsquo;s small enough to live on key chain).&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;d make this key and put it on the YubiKey. This key pair&amp;rsquo;s public key would (hopefully) never be uploaded to a public key server. The reason I didn&amp;rsquo;t want it on any public key servers is that I&amp;rsquo;d be able to &lt;strong&gt;completely delete it&lt;/strong&gt; and make a new one without having to revoke it from public key servers. When I left BuzzFeed I had to revoke the key I made and associated with my buzzfeed.com email address. Now when you search &amp;ldquo;Sam Schlinkert&amp;rdquo; on the MIT server, you see two keys:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub  4096R/B80500F2 2015-09-16 Sam Schlinkert &amp;lt;sschlinkert@gmail.com&amp;gt;
Fingerprint=EF45 36E5 6440 EF4D 5D31  E82A 5BF6 E5C2 B805 00F2 
---------------
pub  4096R/3CC91D33 2015-06-24 *** KEY REVOKED *** [not verified] Sam Schlinkert &amp;lt;sam.schlinkert@buzzfeed.com&amp;gt;
Fingerprint=56AB EFDF 1373 7728 2394  B9FF 77D9 AF85 3CC9 1D33 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, while the revoked key is relatively well labeled as &amp;ldquo;REVOKED&amp;rdquo;, it&amp;rsquo;s still there, meaning that there&amp;rsquo;d be another revoked key every time I deleted and made a new key pair for the YubiKey. If I reovked my keys frequently, this search result page would keep getting more cluttered.&lt;/p&gt;

&lt;p&gt;That said, I still wanted to maintain a key on the public servers&amp;ndash; ostensibly for initial contact. Since I already have a key on the servers, I figured I&amp;rsquo;d just keep that for now.  (&lt;a href=&#34;https://pgp.mit.edu/pks/lookup?op=get&amp;amp;search=0x5BF6E5C2B80500F2&#34;&gt;here it is&lt;/a&gt; on MIT&amp;rsquo;s server). I still have it linked to from my Twitter account.&lt;/p&gt;

&lt;p&gt;My inspiration for prioritizing this ability to recycle my (relatively) more-secure key (the one on the YubiKey in this situation) frequently and easily is this &lt;a href=&#34;https://blog.filippo.io/giving-up-on-long-term-pgp/&#34;&gt;blog post by Filippo Valsorda&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/grugq/03167bed45e774551155&#34;&gt;this Gist on &amp;ldquo;Operational PGP&amp;rdquo;&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/thegrugq&#34;&gt;@thegrugq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://blog.filippo.io/giving-up-on-long-term-pgp/&#34;&gt;his blog post&lt;/a&gt; about why he&amp;rsquo;s giving up on long-term PGP, Valsorda writes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But the real issues I realized are more subtle. I never felt confident in the security of my long term keys. The more time passed, the more I would feel uneasy about any specific key. Yubikeys would get exposed to hotel rooms. Offline keys would sit in a far away drawer or safe. Vulnerabilities would be announced. USB devices would get plugged in.&lt;/p&gt;

&lt;p&gt;A long term key is as secure as the minimum common denominator of your security practices over its lifetime. It&amp;rsquo;s the weak link.&lt;/p&gt;

&lt;p&gt;Worse, long term keys patterns like collecting signatures and printing fingerprints on business cards discourage practices that would otherwise be obvious hygiene: rotating keys often, having different keys for different devices, compartmentalization. It actually encourages expanding the attack surface by making backups of the key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I learned more from &lt;a href=&#34;https://gist.github.com/grugq/03167bed45e774551155&#34;&gt;thegrugq&amp;rsquo;s Gist on &amp;ldquo;Operational PGP&amp;rdquo;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A more secure mitigation against key loss is to generate new keys frequently, use them for specific operations, and then destroy them. For example, when traveling, create a new Travel PGP Key and use that until you are back home. That way if anyone compromises your travel laptop they only breach the compartment for the duration of your travel. The impact of the compromise is contained by the limitation on the utility of the PGP key.&lt;/p&gt;

&lt;p&gt;So &amp;ndash; more keys, more often.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Given that the key on my YubiKey won&amp;rsquo;t be public, I would be able to recycle them often or between &amp;ldquo;operations&amp;rdquo;. So maybe every few months, or if I start using PGP more, every few weeks.&lt;/p&gt;

&lt;p&gt;One downside to this strategy is that the key on the YubiKey won&amp;rsquo;t be very useful for authenticating myself. However I have that public-facing key linked to on my verified Twitter account as well as on my Facebook account, which I think replaces my need to have any of my PGP keys signed by members of a web of trust.&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;OK let&amp;rsquo;s get a new, fresh key pair on to my new YubiKey 4.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;https://www.yubico.com/support/knowledge-base/categories/articles/use-yubikey-openpgp/&#34;&gt;official tutorial&lt;/a&gt; I learned that, since I have a YubiKey 4, I did NOT need to change the mode to enable CCID: &amp;ldquo;Note that all YubiKey 4 devices and all YubiKey NEO devices are now shipped with CCID mode enabled by default.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I also made sure I had the latest version of &lt;a href=&#34;https://gpgtools.org/gpgsuite.html&#34;&gt;GPG Suite&lt;/a&gt; installed.&lt;/p&gt;

&lt;p&gt;(For the record I&amp;rsquo;m running OS X Yosemite (10.10.5).)&lt;/p&gt;

&lt;p&gt;I also already had an up-to-date version of GnuPG installed on my command line. When I run: &lt;code&gt;gpg --version&lt;/code&gt; I get the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg (GnuPG/MacGPG2) 2.0.30
libgcrypt 1.6.6
Copyright (C) 2015 Free Software Foundation, Inc.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;gpg&lt;/code&gt; gives you version 1, you may have GPG version 2 but need to use &lt;code&gt;gpg2&lt;/code&gt; on the command line. If running &lt;code&gt;gpg2 --version&lt;/code&gt; gives you a version over 2, you&amp;rsquo;ll need to use the &lt;code&gt;gpg2&lt;/code&gt; command everywhere you see me use &lt;code&gt;gpg&lt;/code&gt; below.&lt;/p&gt;

&lt;p&gt;In order to use an RSA key with a length of 4,096 with your YubiKey 4, you&amp;rsquo;ll need to use &lt;code&gt;gpg&lt;/code&gt; version 2 (as the tutorial notes: &amp;ldquo;If you are using a YubiKey 4 and want to work with 4096 key sizes, you need to use GPG v 2&amp;rdquo;)&lt;/p&gt;

&lt;h2 id=&#34;a-choice-orphan-vs-mothership&#34;&gt;A Choice: &amp;ldquo;Orphan&amp;rdquo; vs. &amp;ldquo;Mothership&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;As the &lt;a href=&#34;https://www.yubico.com/support/knowledge-base/categories/articles/use-yubikey-openpgp/&#34;&gt;official tutorial&lt;/a&gt; explains:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before you begin, decide if you want to generate the private key on the YubiKey device, or if you want to generate the private key off of the YubiKey and then move the subkeys to the YubiKey. For greater security, we recommend that you store your subkeys on the device (therefore, generate your private key off of the device).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So our choices are &amp;ldquo;Generating Your OpenPGP Key Directly on your YubiKey&amp;rdquo; or &amp;ldquo;Generating the key on your local system&amp;rdquo;. I&amp;rsquo;m a little confused by the differences between these two methods. The idea of generating the key on the YubiKey makes sense to me&amp;ndash; the YubiKey is independent of the computer we&amp;rsquo;re using, like an &amp;ldquo;orphan&amp;rdquo;. Since the other method uses the computer to generate the keys, then has us move them to the card, I think of it as the &amp;ldquo;mothership&amp;rdquo; procedure.&lt;/p&gt;

&lt;p&gt;Given my reading of the rather cryptic sentence in the tutorial&amp;rsquo;s introduction: &amp;ldquo;For greater security, we recommend that you store your subkeys on the device (therefore, generate your private key off of the device)&amp;rdquo;, I figured the &amp;ldquo;mothership&amp;rdquo; procedure was a more secure choice.&lt;/p&gt;

&lt;p&gt;Thus I decided to generate my private key not on my YubiKey but rather on my computer, and then move them to my YubiKey (i.e. the &amp;ldquo;mothership&amp;rdquo; procedure).&lt;/p&gt;

&lt;h2 id=&#34;generating-a-new-key-pair-on-my-computer&#34;&gt;Generating a New Key Pair on my Computer&lt;/h2&gt;

&lt;p&gt;At this point, I switched to &lt;a href=&#34;https://trmm.net/Yubikey&#34;&gt;the Hudson tutorial&lt;/a&gt;, skipping down to the section called &amp;ldquo;Create your key&amp;rdquo;. (The reason I followed Hudson&amp;rsquo;s tutorial at this point is actually because I hadn&amp;rsquo;t found the official tutorial yet, but I&amp;rsquo;m going to keep writing this as if I meant to do all this in the order that I did it.)&lt;/p&gt;

&lt;p&gt;Using the GPG Keychain application included in &lt;a href=&#34;https://gpgtools.org/gpgsuite.html&#34;&gt;GPG Suite&lt;/a&gt;, I generated a new key pair as the Hudson tutorial describes. The only difference is that I specified a length of 4,096, since I knew the YubiKey 4 could handle that length. My new key&amp;rsquo;s Key ID was &lt;code&gt;03FC30EE&lt;/code&gt;, which will be important to have handy for the rest of this.&lt;/p&gt;

&lt;p&gt;I also followed Hudson&amp;rsquo;s instruction to create a second subkey for signing, as he says that&amp;rsquo;s necessary when using cards (like YubiKey)&amp;ndash; however I again made mine 4096 long:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default GPG Keychain tool create the primary key that has all access and one encryption subkey. For the cards you need to create a second subkey for signing. Double click on your key to bring up the Key Inspector window, select Subkeys and click + to create a new one of type RSA (sign only) and of length 2048.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since I was just learning I also did NOT export my key (in other words I did NOT &amp;ldquo;At this point you should export your key and save it somewhere safely offline.&amp;rdquo;), nor did I upload my new public key to a key server, for reasons stated above. However I did generate a revoke certificate, just in case I later uploaded the public key, either on purpose or accidentally. I saved the revoke certificate to my computer&amp;rsquo;s hard drive and an external hard drive.&lt;/p&gt;

&lt;h2 id=&#34;transferring-keys-to-the-yubikey&#34;&gt;Transferring Keys to the YubiKey&lt;/h2&gt;

&lt;p&gt;At this point, Hudson writes &amp;ldquo;First you need to enable the OpenPGP Card / CCID mode.&amp;rdquo; However from the official tutorial I knew I did NOT need to do this (since I have a YubiKey 4), so I skipped this step.&lt;/p&gt;

&lt;p&gt;I went down to where he writes &amp;ldquo;Now let&amp;rsquo;s edit your public key:&amp;rdquo; (though we&amp;rsquo;re really about to edit the private keys). As instructed, in terminal I typed: &lt;code&gt;gpg --edit-key 03FC30EE&lt;/code&gt;, which will first display information about the public keys associated with this key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg (GnuPG/MacGPG2) 2.0.30; Copyright (C) 2015 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

pub  4096R/03FC30EE  created: 2016-12-07  expires: 2020-12-07  usage: SC
                     trust: ultimate      validity: ultimate
sub  4096R/17DA7011  created: 2016-12-07  expires: 2020-12-07  usage: E
sub  4096R/0CBB0A5F  created: 2016-12-07  expires: 2020-12-07  usage: S
[ultimate] (1). Sam Schlinkert &amp;lt;sschlinkert@gmail.com&amp;gt;

gpg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As Hudson writes: &amp;ldquo;GnuPG [the command line tool] is now waiting for another command from you. We need to switch to editing the secret key portion of this key with the &lt;code&gt;toggle&lt;/code&gt; command and then select the first non-primary key with the key command.&amp;rdquo; So I typed &lt;code&gt;toggle&lt;/code&gt; and got a result similar to what Hudson shows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; toggle
sec  2048R/17DB29BE  created: 2014-11-16  expires: 2018-11-16
ssb  2048R/FAFFECA6  created: 2014-11-16  expires: never     
ssb  2048R/A9057450  created: 2014-11-16  expires: never     
(1)  Trammell Hudson &amp;lt;hudson@trmm.net&amp;gt;
gpg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the next prompt, I entered &lt;code&gt;1&lt;/code&gt; as instructed to select the &lt;em&gt;second&lt;/em&gt; key listed, which is a subkey. (I assume &lt;code&gt;0&lt;/code&gt; would select the first key listed.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; key 1
sec  2048R/17DB29BE  created: 2014-11-16  expires: 2018-11-16
ssb* 2048R/FAFFECA6  created: 2014-11-16  expires: never     
ssb  2048R/A9057450  created: 2014-11-16  expires: never     
(1)  Trammell Hudson &amp;lt;hudson@trmm.net&amp;gt;
gpg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see we&amp;rsquo;ve selected the second key by the asterisk next to &lt;code&gt;ssb&lt;/code&gt; (&lt;a href=&#34;https://www.gnupg.org/gph/en/manual.html#MANAGEMENT&#34;&gt;the GnuPG manual&lt;/a&gt; notes: &amp;ldquo;The keyword sec identifies the private master signing key, and the keyword sbb identifies the private subordinates keys.&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;I then followed Hudson&amp;rsquo;s script: &amp;ldquo;Now we&amp;rsquo;ll run the &lt;code&gt;keytocard&lt;/code&gt; command to copy this key to the card.&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; keytocard
Signature key ....: none
Encryption key....: none
Authentication key: none

Please select where to store the key:
    (2) Encryption key
Your selection? 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m assuming we only have one choice (&amp;ldquo;Encryption key&amp;rdquo;) presented to us here because the command line tool recognized that first subkey as the encryption key (as opposed to the signing subkey we made earlier).&lt;/p&gt;

&lt;p&gt;After entering the passphrase for the key and the Admin PIN (which is &lt;code&gt;12345678&lt;/code&gt; by default), I got something similar to what Hudson has:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sec  2048R/17DB29BE  created: 2014-11-16  expires: 2018-11-16
ssb* 2048R/FAFFECA6  created: 2014-11-16  expires: never     
                     card-no: 0006 03036660
ssb  2048R/A9057450  created: 2014-11-16  expires: never     
(1)  Trammell Hudson &amp;lt;hudson@trmm.net&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can sort see that that first subkey is on the card, since it says &lt;code&gt;card-no&lt;/code&gt; underneath it. Cool!&lt;/p&gt;

&lt;p&gt;Now we need to get the second subkey (the signing key) to the card. As Hudson writes: first &amp;ldquo;deselect key 1, [then] select key 2 and upload the signing key&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; key 1       
sec  2048R/17DB29BE  created: 2014-11-16  expires: 2018-11-16
ssb  2048R/FAFFECA6  created: 2014-11-16  expires: never     
                     card-no: 0006 03036660
ssb  2048R/A9057450  created: 2014-11-16  expires: never     
(1)  Trammell Hudson &amp;lt;hudson@trmm.net&amp;gt;

gpg&amp;gt; key 2
sec  2048R/17DB29BE  created: 2014-11-16  expires: 2018-11-16
ssb  2048R/FAFFECA6  created: 2014-11-16  expires: never     
                     card-no: 0006 03036660
ssb* 2048R/A9057450  created: 2014-11-16  expires: never     
(1)  Trammell Hudson &amp;lt;hudson@trmm.net&amp;gt;
gpg&amp;gt; keytocard
Signature key ....: none
Encryption key....: D04F 94C6 EF86 C150 9486  3F5C 2695 8563 FAFF ECA6
Authentication key: none
Please select where to store the key:
   (1) Signature key
   (3) Authentication key
Your selection? 1

You need a passphrase to unlock the secret key for
user: &amp;quot;Trammell Hudson &amp;lt;hudson@trmm.net&amp;gt;&amp;quot;
2048-bit RSA key, ID A9057450, created 2014-11-16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We store this second key as the signature key.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve done that you&amp;rsquo;ll see both keys are on the card:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sec  2048R/17DB29BE  created: 2014-11-16  expires: 2018-11-16
ssb  2048R/FAFFECA6  created: 2014-11-16  expires: never     
                     card-no: 0006 03036660
ssb* 2048R/A9057450  created: 2014-11-16  expires: never     
                     card-no: 0006 03036660
(1)  Trammell Hudson &amp;lt;hudson@trmm.net&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, writes Hudson, &amp;ldquo;Save the changes to the secret key on disk and exit gnupg:&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;set-hardware-pins&#34;&gt;Set Hardware PINs&lt;/h2&gt;

&lt;p&gt;We also have to change both the PIN and the Admin PIN of our YubiKey to something other than the defaults. The default PIN (different than the Admin PIN) is &lt;code&gt;123456&lt;/code&gt;. The default Admin PIN is &lt;code&gt;12345678&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Follow &lt;a href=&#34;https://trmm.net/Yubikey&#34;&gt;Hudson&amp;rsquo;s&lt;/a&gt; instructions on how to change both of them. The PIN has to be at least 6 digits. The Admin PIN has to be at least 8.&lt;/p&gt;

&lt;p&gt;Note that the PIN will be what you enter to decrypt text and files with the key that&amp;rsquo;s on the YubiKey&amp;ndash; not the passphrase (I found this strange and kind of a bummer, as I&amp;rsquo;m far better at remembering letters and words than solely digits, but &lt;a href=&#34;https://www.gnupg.org/howtos/card-howto/en/ch04s02.html&#34;&gt;it&amp;rsquo;s indeed explained in the GnuPG manual&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;OK we&amp;rsquo;re in pretty good shape in achieving the goal I outline above (specificlaly the &amp;ldquo;mothership&amp;rdquo; procedure). Let&amp;rsquo;s pause and recap a bit.&lt;/p&gt;

&lt;h2 id=&#34;ok-what-did-we-just-do&#34;&gt;OK What Did We Just Do?&lt;/h2&gt;

&lt;p&gt;As I understand we just moved an encrypting subkey and a signing subkey to the YubiKey. (I also think the &amp;ldquo;encrypting&amp;rdquo; subkey also does the decrypting.)&lt;/p&gt;

&lt;p&gt;Those particular subkeys are no longer on my computer&amp;rsquo;s hard drive. One reason I believe that is because when I &lt;code&gt;gpg --edit-key 03FC30EE&lt;/code&gt; and then &lt;code&gt;toggle&lt;/code&gt; to see the private keys, the two subkeys have my card number on them. The other reason I think this is that if I encrypt text with a totally different key for my &lt;code&gt;03FC30EE&lt;/code&gt; key, &lt;strong&gt;I am unable to decrypt the message when the YubiKey is not inserted, but I am able to decrypt when it is inserted&lt;/strong&gt;. Sweet!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the message I get when I try to decrypt without the YubiKey inserted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Decrypt failed! 

Decrypt failed! (Card error)
Code = 108
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get to the edge of my understanding. The question is what exactly gets left behind on my home computer thanks to doing the &amp;ldquo;mothership&amp;rdquo; procedure.&lt;/p&gt;

&lt;p&gt;I think there&amp;rsquo;s something called a &amp;ldquo;master secret key&amp;rdquo; and I think it&amp;rsquo;s still on my home computer&amp;rsquo;s hard drive&amp;rsquo;s keyring.&lt;/p&gt;

&lt;p&gt;Furthermore I think this means that I can still create other subkeys from this master key on my hard drive without my YubiKey plugged in, but I&amp;rsquo;m not sure. Among other things that means that (I think) I have to protect this particular computer as well as I protect my YubiKey. Maybe the &amp;ldquo;orphan&amp;rdquo; procedure would not have this problem, but it&amp;rsquo;s fine as long as I don&amp;rsquo;t have to protect any other devices I choose to use the subkeys on my YubiKey with.&lt;/p&gt;

&lt;p&gt;Interestingly, with my YubiKey not inserted I can still encrypt messages with this key (though I can&amp;rsquo;t decrypt them). I believe this is because I still have a public subkey labeled &lt;code&gt;usage: E&lt;/code&gt; on my hard drive keyring (not on the card). I suppose I could delete (or revoke?) this key, but I&amp;rsquo;m a little weary of experimenting just now.&lt;/p&gt;

&lt;p&gt;I should note here that &lt;a href=&#34;https://wiki.fsfe.org/TechDocs/CardHowtos/CardWithSubkeysUsingBackups&#34;&gt;an older tutorial&lt;/a&gt; from the Free Software Foundation Europe (FSFE) has a section called &lt;a href=&#34;https://wiki.fsfe.org/TechDocs/CardHowtos/CardWithSubkeysUsingBackups#Removing_the_master_key_from_the_keyring&#34;&gt;&amp;ldquo;Removing master key from the keyring&amp;rdquo;&lt;/a&gt;, implying that you could totally detach the computer you use to generate your keys and move them to your card/YubiKey from your card/YubiKey. Again, it&amp;rsquo;s not clear to me whether this is a better situation for me&amp;ndash; I suppose it depends on my threat model with regard to this key, and whether I have at least one computer I can protect/trust.&lt;/p&gt;

&lt;h2 id=&#34;using-the-pgp-key-on-my-yubikey-while-using-other-computers&#34;&gt;Using the PGP key on my YubiKey while Using Other Computers&lt;/h2&gt;

&lt;p&gt;Now for another big test.&lt;/p&gt;

&lt;p&gt;With the two subkeys on my new YubiKey, I headed into work to see if I could use my keys on a different computer with minimal setup. I needed to get the private key &amp;ldquo;stubs&amp;rdquo; on to the computer, so that they could point to the subkeys on my YubiKey. If the YubiKey was present, it would use the keys on my YubiKey. But if the YubiKey wasn&amp;rsquo;t inserted, it&amp;rsquo;d get that &lt;code&gt;Decrypt failed! (Card error)&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;After consulting &lt;a href=&#34;https://gpgtools.tenderapp.com/kb/gpg-keychain-faq/gpg-keychain-not-showing-key-from-smart-card&#34;&gt;this short GPGTools article&lt;/a&gt;, I learned that step one is to get your public key on to that computer&amp;rsquo;s key ring. I did this by emailing myself my new public key (unencrypted), and then opening the GPG Suite Keychain and importing the key. This is only because I did not want to upload this public key to any key server.&lt;/p&gt;

&lt;p&gt;Once I got imported the public key and had it appear in GPG Suite Keychain (under &amp;ldquo;type&amp;rdquo; it says &lt;code&gt;pub&lt;/code&gt;, indicating it&amp;rsquo;s just the public key present), I plugged in my YubiKey and simply ran &lt;code&gt;gpg --card-status&lt;/code&gt; in the terminal, as per &lt;a href=&#34;https://gpgtools.tenderapp.com/kb/gpg-keychain-faq/gpg-keychain-not-showing-key-from-smart-card&#34;&gt;that GPGTools article&lt;/a&gt;. After a few seconds the terminal sent back some kind of success message that I forget now, and when I restarted the GPG Suite Keychain the key had &lt;code&gt;sec/pub&lt;/code&gt; as its &amp;ldquo;type&amp;rdquo;. I was then able to decrypt a message I had emailed myself, and was &lt;em&gt;unable&lt;/em&gt; to decrypt it after I removed the YubiKey. Success!&lt;/p&gt;

&lt;h2 id=&#34;learning-more-about-what-i-did-an-appendix-of-sorts&#34;&gt;Learning More About What I Did (An Appendix of Sorts)&lt;/h2&gt;

&lt;p&gt;In my search to learn more about key management, Duck Duck Go led me to &lt;a href=&#34;https://www.gnupg.org/gph/en/manual.html&#34;&gt;this GnuPG manual&lt;/a&gt;, specifically &lt;a href=&#34;https://www.gnupg.org/gph/en/manual.html#MANAGEMENT&#34;&gt;the key management section&lt;/a&gt;, which helped me a bit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some Privacy and Security Measures I&#39;ve Taken Recently</title>
      <link>http://example.org/post/2016-11-12-some-privacy-and-security-measures/</link>
      <pubDate>Sat, 12 Nov 2016 22:24:33 -0500</pubDate>
      
      <guid>http://example.org/post/2016-11-12-some-privacy-and-security-measures/</guid>
      <description>

&lt;p&gt;Over the summer of 2016 I started to pay a little more attention to my privacy and security on the internet and when using computers more generally. Some of this impetus had been slowly growing since the Snowden/NSA revelations and catching &lt;em&gt;Citizen 4&lt;/em&gt; (eyeroll). More recently I read a few books about computer security, most notably &lt;a href=&#34;https://www.amazon.com/Data-Goliath-Battles-Collect-Control/dp/039335217X&#34;&gt;&lt;em&gt;Data and Goliath&lt;/em&gt; by Bruce Schneier&lt;/a&gt;, and a few on open-source software and Linux: &lt;a href=&#34;https://www.amazon.com/Cathedral-Bazaar-Musings-Accidental-Revolutionary/dp/0596001088/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1479008290&amp;amp;sr=1-1&amp;amp;keywords=cathedral+bazaar&#34;&gt;&lt;em&gt;The Cathedral and the Bazaar&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.amazon.com/Coding-Freedom-Ethics-Aesthetics-Hacking/dp/0691144613/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1479008327&amp;amp;sr=1-1&amp;amp;keywords=coding+freedom&#34;&gt;&lt;em&gt;Coding Freedom&lt;/em&gt;&lt;/a&gt; (which &lt;a href=&#34;https://twitter.com/sts10/status/778426748321005569&#34;&gt;I admired for its liberal art sensibility&lt;/a&gt;), and &lt;a href=&#34;https://www.amazon.com/Code-Other-Laws-Cyberspace-Version/dp/0465039146/ref=sr_1_1?ie=UTF8&amp;amp;qid=1470604763&amp;amp;sr=8-1&amp;amp;keywords=lessig+code&#34;&gt;&lt;em&gt;Code and Other Laws of Cyberspace&lt;/em&gt; by Lessig&lt;/a&gt;, the last of which I wrote &lt;a href=&#34;https://sts10.github.io/blog/2016/08/31/how-we-screw-it-up/&#34;&gt;a blog post&lt;/a&gt; if you&amp;rsquo;re interested.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;how-and-where-i-got-information&#34;&gt;How and Where I Got Information&lt;/h2&gt;

&lt;p&gt;In addition the books mentioned above, I got most of my information from two of my favorites social networks: Reddit and Twitter.&lt;/p&gt;

&lt;p&gt;Mostly through a collection of subreddits like &lt;a href=&#34;https://www.reddit.com/r/privacy&#34;&gt;r/privacy&lt;/a&gt;, &lt;a href=&#34;https://www.reddit.com/r/privacytoolsIO&#34;&gt;r/privacytoolsIO&lt;/a&gt;, &lt;a href=&#34;https://www.reddit.com/r/security&#34;&gt;r/security&lt;/a&gt;, &lt;a href=&#34;https://www.reddit.com/r/crypto&#34;&gt;r/crypto&lt;/a&gt;, and &lt;a href=&#34;https://www.reddit.com/r/encryption&#34;&gt;r/encryption&lt;/a&gt; I got some basic information and found some well-regarded privacy guides:&lt;/p&gt;

&lt;h3 id=&#34;guides&#34;&gt;Guides&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@mshelton/securing-your-digital-life-like-a-normal-person-a-hasty-and-incomplete-guide-56437f127425&#34;&gt;Securing Your Life Like a Normal Person&lt;/a&gt; by Martin Shelton

&lt;ul&gt;
&lt;li&gt;Shelton&amp;rsquo;s also written a sort of &lt;a href=&#34;https://medium.com/@mshelton/current-digital-security-resources-5c88ba40ce5c#.8l3y54xjz&#34;&gt;&amp;ldquo;guide to security guides&amp;rdquo;&lt;/a&gt; that I haven&amp;rsquo;t read yet but is likely useful.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nytimes.com/2016/11/17/technology/personaltech/encryption-privacy.html?partner=rss&amp;amp;emc=rss&amp;amp;_r=0&#34;&gt;NYTimes: Protecting Your Digital Life in 7 Easy Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://theintercept.com/2016/11/12/surveillance-self-defense-against-the-trump-administration/&#34;&gt;Surveillance Self-Defense Against the Trump Administration&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Micah Lee has some other easy-to-follow security guides on &lt;a href=&#34;https://theintercept.com/staff/micah-lee/&#34;&gt;his Intercept author page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ssd.eff.org/&#34;&gt;Electronic Frontier Foundation&amp;rsquo;s Surveillance Self-Defense Guide&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;EFF also has &lt;a href=&#34;https://ssd.eff.org/en/playlist&#34;&gt;guides for different roles&lt;/a&gt; like &lt;a href=&#34;https://ssd.eff.org/en/playlist/activist-or-protester#playlist&#34;&gt;activist or protester&lt;/a&gt;. Separately, they recently published a blog post called &lt;a href=&#34;https://www.eff.org/deeplinks/2016/11/digital-security-tips-for-protesters&#34;&gt;&amp;ldquo;Digital Security Tips for Protesters&amp;rdquo;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.freecodecamp.com/tor-signal-and-beyond-a-law-abiding-citizens-guide-to-privacy-1a593f2104c3#.wwonlaaud&#34;&gt;How to encrypt your entire life in less than an hour&lt;/a&gt; - a relatively new guide, but seems to be getting &lt;a href=&#34;https://www.reddit.com/r/crypto/comments/5cecij/how_to_encrypt_your_entire_life_in_less_than_an/?st=ivlr2eka&amp;amp;sh=79ada075&#34;&gt;decent comments when posted to r/crypto&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.privacytools.io/&#34;&gt;privacytools.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drduh/macOS-Security-and-Privacy-Guide&#34;&gt;macOS Security and Privacy Guide&lt;/a&gt; - a bit more intense, but good to read through to learn about more advanced steps.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://securityinabox.org/en&#34;&gt;Security in a Box&lt;/a&gt; - a &amp;ldquo;toolkit was created by the &lt;a href=&#34;http://www.tacticaltech.org/&#34;&gt;Tactical Technology Collective&lt;/a&gt; and &lt;a href=&#34;http://www.frontlinedefenders.org/&#34;&gt;Front Line Defenders&lt;/a&gt;&amp;rdquo; that looks pretty comprehensive. If you&amp;rsquo;re using Tor, they also have &lt;a href=&#34;http://bpo4ybbs2apk4sk4.onion/&#34;&gt;an onion address&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ll note that Security in a Box, unique to other guides I found, has &lt;a href=&#34;https://securityinabox.org/en/guide/veracrypt/os-x&#34;&gt;a guide&lt;/a&gt; for using &lt;a href=&#34;https://veracrypt.codeplex.com/&#34;&gt;Veracrypt&lt;/a&gt;, a seemingly well-respected file encryption tool. However I haven&amp;rsquo;t explored Veracrypt as of this writing, so I can&amp;rsquo;t evaluate their guide for it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also followed a number of computer security-and-privacy-minded journalists, researchers, and other folks on Twitter: &lt;a href=&#34;https://twitter.com/mshelton&#34;&gt;@mshelton&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/micahflee&#34;&gt;@micahflee&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/cfarivar&#34;&gt;@cfarivar&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/xor&#34;&gt;@xor&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/evacide&#34;&gt;@evacide&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/jessysaurusrex&#34;&gt;@jessysaurusrex&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/matthew_d_green&#34;&gt;@matthew_d_green&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/iblametom&#34;&gt;@iblametom&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/bcrypt&#34;&gt;@bcrypt&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/geminiimatt&#34;&gt;@geminiimatt&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/csoghoian&#34;&gt;@csoghoian&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/a_greenberg&#34;&gt;@a_greenberg&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/lorenzoFB&#34;&gt;@lorenzoFB&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/josephfcox&#34;&gt;@josephfcox&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/doctorow&#34;&gt;@doctorow&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/thegrugq&#34;&gt;@thegrugq&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mattblaze&#34;&gt;@mattblaze&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/senykam&#34;&gt;@senykam&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also read (and enjoyed!) the dissertation of a privacy user researcher named &lt;a href=&#34;https://twitter.com/mshelton&#34;&gt;Martin Shelton&lt;/a&gt; called &lt;a href=&#34;https://mshelt.onl/p/shelton_2015.pdf&#34;&gt;&amp;ldquo;The Role of Corporate and Government Surveillance in Shifting Journalistic Information Security Practices&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My thesis is now public: Role of corporate and government surveillance in journalists&amp;#39; infosec practices. Read here. &lt;a href=&#34;https://t.co/1OECgIP2tR&#34;&gt;https://t.co/1OECgIP2tR&lt;/a&gt;&lt;/p&gt;&amp;mdash; Martin Shelton 🔑 (@mshelton) &lt;a href=&#34;https://twitter.com/mshelton/status/676459334369329153&#34;&gt;December 14, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;disclaimers-etc&#34;&gt;Disclaimers, etc.&lt;/h2&gt;

&lt;p&gt;So let&amp;rsquo;s get this out of the way: &lt;strong&gt;I am just learning and am far from an expert&lt;/strong&gt; and I encourage readers to double check all of my recommendations made here with outside sources that you feel good about trusting. When possible I try to link out to the source of where I got specific tips or recommendations. If anything, I&amp;rsquo;ve learned that there&amp;rsquo;s no silver bullet here, and that you should not put your life or anything too important in the hands of software.&lt;/p&gt;

&lt;p&gt;Below is what I have learned and some of my subsequent actions&amp;ndash; things I have done given the information I gathered and ultimately trusted enough. If not specified, software and links included assume you&amp;rsquo;re using OS X / macOS (apologies if I switch between the names for Apple&amp;rsquo;s desktop operating system). I mostly wrote this all down as an exercise for myself, but I figured it&amp;rsquo;d be nice to publish if I ever need to refer to it or point others to it. Again, not an expert. Say it out loud if it helps.&lt;/p&gt;

&lt;p&gt;If you see something wrong or misleading here, or you have suggestions, feel free to &lt;a href=&#34;https://twitter.com/sts10&#34;&gt;tweet at me&lt;/a&gt; or send me a PGP-encrypted email (which I discuss below). &lt;a href=&#34;https://pgp.mit.edu/pks/lookup?op=get&amp;amp;search=0x5BF6E5C2B80500F2&#34;&gt;Here&amp;rsquo;s my public key&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-i-learned-and-what-i-did&#34;&gt;What I Learned and What I Did&lt;/h2&gt;

&lt;h3 id=&#34;passwords&#34;&gt;Passwords&lt;/h3&gt;

&lt;h4 id=&#34;what-i-learned&#34;&gt;What I Learned&lt;/h4&gt;

&lt;p&gt;From what I gathered, the basic idea with passwords is that you want (a) to enable two-factor authentication whenever possible and (b) do your best never to re-use a password between multiple services.&lt;/p&gt;

&lt;p&gt;Turning on two-factor authentication means that whenever you log into your account, a code will be sent to your phone that you&amp;rsquo;ll have to enter after entering your correct password. The idea here is that even if an attacker gets your password, they would also need your phone to get this code. As &lt;a href=&#34;https://medium.com/@mshelton/securing-your-digital-life-like-a-normal-person-a-hasty-and-incomplete-guide-56437f127425#.zf9977k7v&#34;&gt;Shelton writes&lt;/a&gt;: &lt;a href=&#34;https://www.google.com/landing/2step/&#34;&gt;Gmail&lt;/a&gt;, &lt;a href=&#34;https://support.twitter.com/articles/20170388&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://www.facebook.com/help/148233965247823&#34;&gt;Facebook&lt;/a&gt;, &lt;a href=&#34;https://www.dropbox.com/en/help/363&#34;&gt;Dropbox&lt;/a&gt;, and &lt;a href=&#34;https://twofactorauth.org/&#34;&gt;a number of other services&lt;/a&gt; allow two-factor authentication.&lt;/p&gt;

&lt;p&gt;For all your other services (and even the ones that you have two-factor turned on for), you&amp;rsquo;re going to want different passwords for each service. That&amp;rsquo;s because, as Shelton writes in &lt;a href=&#34;https://medium.com/@mshelton/password-managers-for-beginners-d1f49866f80f#.w2pvjawj1&#34;&gt;his password managers guide&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you use the same password everywhere, a hacker only needs to get your password once in order to break into many of your online accounts. And it seems like every week, we hear about a massive new password breach. For example, Yahoo recently announced that passwords for 500 million Yahoo users were breached in 2014. Imagine if an attacker used your single, easy-to-remember password to access your health care records, your home address, credit card numbers, or your social security number. (You can check if your password has already been leaked here.) To minimize the damage from a breach, you should use unique passwords on each account. But it can be a challenge to remember each password.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To keep track of all those unique passwords, it seems that the best solution is to effectively put all your apples in one basket and use a password manager with a (very) strong master password.&lt;/p&gt;

&lt;h4 id=&#34;what-i-did-password-manager&#34;&gt;What I Did (Password Manager)&lt;/h4&gt;

&lt;p&gt;At first I used &lt;a href=&#34;https://www.keepassx.org/&#34;&gt;KeePassX&lt;/a&gt;, a great, open-source, no-nonsense password manager. I still use it and for some more secure stuff like my banking account information and trust it. But with KeePassX I didn&amp;rsquo;t find an easy, trusted way to access these stored passwords on my iPhone or on other computers. I could sync the encrypted database file via Dropbox or Google Drive, but I still wouldn&amp;rsquo;t be able to access it on my iPhone.&lt;/p&gt;

&lt;p&gt;To solve this problem, I paid $50 for what I think is a lifetime of &lt;a href=&#34;https://1password.com/&#34;&gt;1Password&lt;/a&gt;. This is a slicker password manager, with more features than KeePassX. For example you can install a Google Chrome extension that automatically fills in usernames and passwords for the page you&amp;rsquo;re on. It also syncs with Dropbox seamlessly for you (if you so choose to put your encrypted password file on the cloud), and they have an iPhone app for accessing your passwords. This allows me to sign in both on my phone and, if I wish, on other computers.&lt;/p&gt;

&lt;p&gt;Note that I did not sign up for a 1Password &lt;em&gt;account&lt;/em&gt; by which I mean their service that stores your passwords on their servers for a monthly fee. The distinction between these two setups is a bit confusing to me still&amp;ndash; to be honest I&amp;rsquo;m not even sure the plan I have is still available to new users. This is one of the downsides to 1Password in my mind&amp;ndash; it&amp;rsquo;s a little tricky to understand what&amp;rsquo;s what. This and other unnecessary complexity and its incompatibility with Linux are downsides for me. For these (admittedly specific and small) reasons I may be switching back to KeePassX and live without being able to access my passwords on my smartphone. If you want the mobile and Chrome extension features, I don&amp;rsquo;t really have a problem recommending 1Password or LastPass.&lt;/p&gt;

&lt;p&gt;At this point, for most services I have a randomly-created password stored in my 1Password vault, and almost none of them are duplicates. (Both KeePassX and 1Password are able to generate random passwords for you.) See EFF&amp;rsquo;s article on &lt;a href=&#34;https://ssd.eff.org/en/node/23/&#34;&gt;Creating Strong Passwords&lt;/a&gt; for more.&lt;/p&gt;

&lt;p&gt;For creating strong but memorable master passwords (which you obviously can&amp;rsquo;t store in a manager, since they&amp;rsquo;re used to open the password vault), I sometimes use a technique recommended in &lt;a href=&#34;https://ssd.eff.org/en/node/23/&#34;&gt;the EFF guide linked to above&lt;/a&gt; called &lt;a href=&#34;https://theintercept.com/2015/03/26/passphrases-can-memorize-attackers-cant-guess/&#34;&gt;Diceware passphrases&lt;/a&gt;, which I find absolutely fascinating.&lt;/p&gt;

&lt;h4 id=&#34;what-i-did-2-factor-authentication&#34;&gt;What I Did (2-Factor Authentication)&lt;/h4&gt;

&lt;p&gt;I also have two-factor authentication enabled on almost all the services I use that offer it. I prefer using a neutral app like &lt;a href=&#34;https://support.google.com/accounts/answer/1066447?hl=en&#34;&gt;Google Authenticator&lt;/a&gt; to get the codes (rather than receiving an SMS text message with the code), as I find it more convenient than waiting for a text. Plus the National Institute of Standards and Technology &lt;a href=&#34;https://techcrunch.com/2016/07/25/nist-declares-the-age-of-sms-based-2-factor-authentication-over/&#34;&gt;advise against using SMS in two-factor schemes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What happens if you lose your phone? One solution is to use a backup code, which most services give you when you enable 2-factor for just this reason (&lt;a href=&#34;https://support.google.com/accounts/answer/1187538?hl=en&#34;&gt;here&amp;rsquo;s more info on GMail backup codes&lt;/a&gt;). Store these somewhere safe obviously, like on a piece of paper you store somewhere secure. Once you use a backup code to login, you can choose to temporarily disable two-factor authentication until you get your phone back or get a new one.&lt;/p&gt;

&lt;h3 id=&#34;browser-use-and-tracking&#34;&gt;Browser Use and Tracking&lt;/h3&gt;

&lt;h4 id=&#34;what-i-learned-1&#34;&gt;What I Learned&lt;/h4&gt;

&lt;p&gt;Most broadly, most services we use on the internet make money, either directly or indirectly, from tracking what we look at online. Google places ads related to what you&amp;rsquo;ve recently searched for, Twitter serves ads based on who you follow, Facebook serves ads based on nearly everything you tell it. Separately, thanks to third-party companies you&amp;rsquo;ve never heard of, these internet services can easily share information about you. Think about how after do one casual search for lawnmowers on Amazon you see ads for those products follow you around the web.&lt;/p&gt;

&lt;p&gt;A year or even six months ago I would have shrugged this off. &amp;ldquo;That&amp;rsquo;s how Amazon&amp;rsquo;s recommendations are so good&amp;rdquo; or &amp;ldquo;It&amp;rsquo;s not like lawnmowers are illegal&amp;rdquo; or even the standard &amp;ldquo;I don&amp;rsquo;t have anything to hide, so&amp;hellip;&amp;rdquo; are the types of reactions I might have had. (If you hold this belief and would like to challenge it try &lt;a href=&#34;https://www.youtube.com/watch?v=pcSlowAhvUk&#34;&gt;this Glenn Greenwald TED Talk&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;For a variety of reasons my views have apparently shifted, through reading and observing my habits. There was actually one concrete occurrence that freaked me out and drove me to action: While trying to learn more about Linux I must have, at my apartment, done some Googling in Google Chrome about different distributions of Linux. Shortly there after, while at work, Twitter started suggesting I follow Linux-related accounts. I didn&amp;rsquo;t like that idea that a topic I&amp;rsquo;d Googled at home was now appearing on a website I had to use for work, and furthermore that that information about me was stored &lt;em&gt;somewhere&lt;/em&gt; on a server where I couldn&amp;rsquo;t delete it or even read it.&lt;/p&gt;

&lt;p&gt;If you want to feel a little more paranoid, the Electronic Frontier Foundation (EFF) has a tool called &lt;a href=&#34;https://panopticlick.eff.org/&#34;&gt;Panopticlick&lt;/a&gt; that attempts to show you to what extent and how you&amp;rsquo;re being tracked through your browser.&lt;/p&gt;

&lt;h4 id=&#34;what-i-did&#34;&gt;What I Did&lt;/h4&gt;

&lt;p&gt;First, I split my browsing activity at home between two browsers. If I was using a service that necessitated use of my real name or a credit card, I used Google Chrome. This includes online banking, GMail, Twitter, Facebook, Github, Netflix, etc. For everything else I used Firefox (or, now a days, the Tor Browser). This includes random search queries (especially about privacy issues!), most Reddit use, most Youtube watching, etc.&lt;/p&gt;

&lt;p&gt;Then, on both my home and office installations of Google Chrome, I went to Settings &amp;gt; Advanced sync settings and unchecked everything.&lt;/p&gt;

&lt;p&gt;On my home installation of Chrome, I then installed two extensions created by the EFF relating to privacy: &lt;a href=&#34;https://www.eff.org/https-everywhere&#34;&gt;HTTPS Everywhere&lt;/a&gt; and &lt;a href=&#34;https://www.eff.org/privacybadger&#34;&gt;Privacy Badger&lt;/a&gt;. Descriptions from HTTPS Everywhere&amp;rsquo;s official page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Many sites on the web offer some limited support for encryption over HTTPS, but make it difficult to use. For instance, they may default to unencrypted HTTP, or fill encrypted pages with links that go back to the unencrypted site. The HTTPS Everywhere extension fixes these problems by using clever technology to rewrite requests to these sites to HTTPS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And from Privacy Badger&amp;rsquo;s:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Privacy Badger is a browser add-on that stops advertisers and other third-party trackers from secretly tracking where you go and what pages you look at on the web. If an advertiser seems to be tracking you across multiple websites without your permission, Privacy Badger automatically blocks that advertiser from loading any more content in your browser. To the advertiser, it&amp;rsquo;s like you suddenly disappeared.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On Firefox, where I might be running into weirder websites, I was a little more aggressive with my add-ons, choosing to take all of the recommendations from &lt;a href=&#34;https://www.privacytools.io/#addons&#34;&gt;privacytools.io&lt;/a&gt; (though I saw the add-ons they recommend cited by other sources as well).&lt;/p&gt;

&lt;p&gt;Thus on my Firefox I have &lt;a href=&#34;https://www.eff.org/https-everywhere&#34;&gt;HTTPS Everywhere&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/decentraleyes/&#34;&gt;Decentraleyes&lt;/a&gt;, &lt;a href=&#34;https://github.com/dillbyrne/random-agent-spoofer&#34;&gt;Random Agent Spoofer&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/self-destructing-cookies/?src=api&#34;&gt;Self-Destructing Cookies&lt;/a&gt;, and &lt;a href=&#34;https://github.com/gorhill/uBlock&#34;&gt;uBlock Origin&lt;/a&gt; all installed. (I used to use &lt;a href=&#34;https://disconnect.me/&#34;&gt;Disconnect&lt;/a&gt; but that extension is no longer recommended by privacytools.io) I also set the default search engine to Duck Duck Go rather than Google, as they claim not to track users.&lt;/p&gt;

&lt;p&gt;I then tweaked my Firefox to further enhance the privacy of the browser by using &lt;a href=&#34;https://www.privacytools.io/#about_config&#34;&gt;these settings&lt;/a&gt; recommended by &lt;a href=&#34;https://www.privacytools.io/&#34;&gt;privacytools.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can read more about setting up your browser for privacy and security in &lt;a href=&#34;https://github.com/drduh/macOS-Security-and-Privacy-Guide#browser&#34;&gt;the &amp;ldquo;Browser&amp;rdquo; section of the macOS Security and Privacy Guide&lt;/a&gt; I link to above.&lt;/p&gt;

&lt;p&gt;In both Chrome and Firefox, these extensions rarely interfere with my normal browsing, but they&amp;rsquo;re all easy to temporarily disable. I could be more intense with both by disabling JavaScript or taking other, more extreme measures, but this seems to be a good balance for me.&lt;/p&gt;

&lt;p&gt;More recently, I decided to try the &lt;a href=&#34;https://www.torproject.org/projects/torbrowser.html.en&#34;&gt;Tor Browser&lt;/a&gt; on an old MacBook Pro that &lt;a href=&#34;https://sts10.github.io/blog/2016/11/07/installing-ubuntu-on-my-old-macbook-pro/&#34;&gt;I recently installed Linux on&lt;/a&gt;. I found that, from a user&amp;rsquo;s perspective, it&amp;rsquo;s really just a more secured version of Firefox&amp;ndash; nothing scarier. You can easily avoid visiting the dark/deep web by simply browsing the normal internet, or &amp;ldquo;surface web&amp;rdquo;, as you normally do. The difference from using regular Firefox is that your connection uses Tor.&lt;/p&gt;

&lt;p&gt;That established, I have now also installed the Tor Browser on my main MacBook. The Tor Browser runs a version of NoScript (&lt;a href=&#34;https://noscript.net/getit&#34;&gt;website&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/noscript/&#34;&gt;Firefox add-on download page&lt;/a&gt;) by default, which may cause some pages to load incompletely, but I haven&amp;rsquo;t found it to be much of a nuisance and have left it on for security reasons.&lt;/p&gt;

&lt;p&gt;From the Tor Browser&amp;rsquo;s &lt;a href=&#34;https://www.torproject.org/projects/torbrowser.html.en&#34;&gt;main landing page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Tor software protects you by bouncing your communications around a distributed network of relays run by volunteers all around the world: it prevents somebody watching your Internet connection from learning what sites you visit, it prevents the sites you visit from learning your physical location, and it lets you access sites which are blocked. Tor Browser lets you use Tor on Windows, Mac OS X, or Linux without needing to install any software. It can run off a USB flash drive, comes with a pre-configured web browser to protect your anonymity, and is self-contained (portable).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;d also encourage potential users to read &lt;a href=&#34;https://www.torproject.org/download/download.html.en#warning&#34;&gt;Tor&amp;rsquo;s list of warnings to consider&lt;/a&gt; and &lt;a href=&#34;https://www.torproject.org/docs/faq.html.en&#34;&gt;FAQ&lt;/a&gt; before downloading and using the browser. Tor&amp;rsquo;s documentation is located &lt;a href=&#34;https://www.torproject.org/docs/documentation.html.en&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also looked into a new browser called &lt;a href=&#34;https://www.brave.com/&#34;&gt;Brave&lt;/a&gt;, a relatively new open source browser that has ad-blocking and privacy features built in. As I see it the pros are that you get some of the benefits you get from some of the add-ons I mention above right out of the box. Brave also comes bundled with a password manager of its own, but you can switch that out for 1Password, Dashlane, or LastPass. The cons are that you, currently, can&amp;rsquo;t add other extensions to your liking. For these reasons, I have it installed on my iPhone, but stick with Tor and Chrome when on desktop.&lt;/p&gt;

&lt;p&gt;Note that when using version 0.12.9 of Brave for OS X you need to &lt;a href=&#34;https://github.com/brave/browser-laptop/issues/468#issuecomment-255938042&#34;&gt;enable &amp;ldquo;Google Widevine&amp;rdquo; support&lt;/a&gt; to use services like Netflix in the browser. Also, in regard to the advantages that the Tor Browser provides over Brave, apparently Brave developers are &lt;a href=&#34;https://twitter.com/bcrypt/status/798383317959602176&#34;&gt;looking into adding Tor support for Brave&lt;/a&gt; (&lt;a href=&#34;https://github.com/brave/browser-laptop/wiki/Brave-Tor-Support&#34;&gt;GitHub link&lt;/a&gt;), which would be pretty interesting!&lt;/p&gt;

&lt;h2 id=&#34;encrypting-your-hard-drive&#34;&gt;Encrypting Your Hard Drive&lt;/h2&gt;

&lt;p&gt;A lot of the guides I found recommend encrypting your computer&amp;rsquo;s hard drive. As &lt;a href=&#34;https://medium.com/@mshelton/securing-your-digital-life-like-a-normal-person-a-hasty-and-incomplete-guide-56437f127425#.dcxdkpedk&#34;&gt;Shelton writes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Encrypt your hard drive.&lt;/strong&gt; If your device is ever lost or stolen, it&amp;rsquo;s easy for thieves to take data off your hard disk. Good news: If you have a new password-protected iPhone &lt;a href=&#34;https://support.apple.com/en-us/HT202064&#34;&gt;your disk is already encrypted&lt;/a&gt;. If you have an Android Device, &lt;a href=&#34;https://support.google.com/nexus/answer/2844831&#34;&gt;it&amp;rsquo;s pretty easy to encrypt your phone&lt;/a&gt;. A few Android phones (in the Nexus line) are &lt;a href=&#34;http://nexus%205x%2C%206p%2C%206%2C%209/&#34;&gt;encrypted by default&lt;/a&gt;. For your laptop or desktop, you can encrypt your hard drive using your operating system&amp;rsquo;s native software: &lt;a href=&#34;https://support.apple.com/en-us/HT204837&#34;&gt;FileVault for Mac&lt;/a&gt;, or &lt;a href=&#34;http://www.pcworld.com/article/2308725/a-beginners-guide-to-bitlocker-windows-built-in-encryption-tool.html&#34;&gt;BitLocker on Windows&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I actually &lt;em&gt;haven&amp;rsquo;t&lt;/em&gt; done this yet (on my Mac it would mean enable FileVault) as I&amp;rsquo;m little freaked out about straight-up forgetting my password or screwing it up in some other way, but you should consider it!&lt;/p&gt;

&lt;h2 id=&#34;communication-texts-instant-messaging-and-email&#34;&gt;Communication (Texts, Instant Messaging, and Email)&lt;/h2&gt;

&lt;h3 id=&#34;what-i-learned-2&#34;&gt;What I Learned&lt;/h3&gt;

&lt;p&gt;Basically you want to communicate using tools that encrypt your communications such that not even the toolmaker can read them, even under threat from the law. This feature is generally known as &amp;ldquo;end-to-end encryption&amp;rdquo; and a number of services advertise having it. There&amp;rsquo;s bonus points if the service you&amp;rsquo;re using obfuscates or hides your meta-data, as well as the contents of your communication, though this seems to be difficult to get from a service at this point.&lt;/p&gt;

&lt;p&gt;Gchat, Facebook Messenger, and normal SMS have neither of the features mentioned above, at least by default as of this writing. Facebook &lt;a href=&#34;http://money.cnn.com/2016/10/05/technology/facebook-secret-conversations-mode/index.html&#34;&gt;now offers &amp;ldquo;Secret Conversations&amp;rdquo;&lt;/a&gt;, and Google has released Allo, which has an &amp;ldquo;incognito&amp;rdquo; mode, but neither service turns on end-to-end encryption by default (&lt;a href=&#34;https://techcrunch.com/2016/05/18/googles-allo-wont-include-end-to-end-encryption-by-default/&#34;&gt;&amp;ldquo;Google&amp;rsquo;s Allo won&amp;rsquo;t include end-to-end encryption by default&amp;rdquo;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Not enabling the encryption by default is a bigger issue than I originally assumed. EFF wrote on their blog that, with Allo, Google is &lt;a href=&#34;https://www.eff.org/deeplinks/2016/09/googles-allo-sends-wrong-message-about-encryption&#34;&gt;&amp;ldquo;teaching the wrong lessons about encryption&amp;rdquo;&lt;/a&gt;, not to mention confusing users about what &amp;ldquo;incognito&amp;rdquo; means.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Google&amp;#39;s decision to disable end-to-end encryption by default in its new &lt;a href=&#34;https://twitter.com/hashtag/Allo?src=hash&#34;&gt;#Allo&lt;/a&gt; chat app is dangerous, and makes it unsafe. Avoid it for now.&lt;/p&gt;&amp;mdash; Edward Snowden (@Snowden) &lt;a href=&#34;https://twitter.com/Snowden/status/733253324301053952&#34;&gt;May 19, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h4 id=&#34;on-your-phone&#34;&gt;On Your Phone&lt;/h4&gt;

&lt;p&gt;For phone-to-phone texting and calling, a lot of people recommend &lt;a href=&#34;https://whispersystems.org/&#34;&gt;Signal&lt;/a&gt;. &lt;a href=&#34;https://motherboard.vice.com/read/signal-downloads-spiked-after-election-results&#34;&gt;Downloads of the application have spiked since the US election results&lt;/a&gt;, which is good as you can only communicate with other Signal users, and it recently &lt;a href=&#34;http://www.theregister.co.uk/2016/11/08/trust_it_results_of_signals_first_formal_crypto_analysis_are_in/&#34;&gt;passed an audit&lt;/a&gt; (though I am not sure how legit the organization behind the audit is).&lt;/p&gt;

&lt;p&gt;True, there are a handful of iPhone + Android apps that offer end-to-end encryption (notably &lt;a href=&#34;https://www.whatsapp.com/download/&#34;&gt;WhatsApp&lt;/a&gt;), but as &lt;a href=&#34;https://theintercept.com/2016/11/12/surveillance-self-defense-against-the-trump-administration/&#34;&gt;Micah Lee writes&lt;/a&gt; when discouraging organizers from using Facebook groups:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All of the messages you send to groups of people using these apps will be end-to-end encrypted. No one, not even the app developers who have access to the servers these apps use, will be able to read the plaintext of your messages, except for the other members of your group.&lt;/p&gt;

&lt;p&gt;But while the messages are encrypted, the list of members of the group might not be, and this is also important information to protect. &lt;a href=&#34;https://www.whatsapp.com/download/&#34;&gt;WhatsApp&lt;/a&gt; and Semaphor might be able to hand over group membership information if the government comes knocking.&lt;/p&gt;

&lt;p&gt;On the other hand, the developer of Signal, Open Whisper Systems, is &lt;a href=&#34;https://theintercept.com/2016/06/22/battle-of-the-secure-messaging-apps-how-signal-beats-whatsapp/&#34;&gt;way ahead of the game&lt;/a&gt; here. The one time they &lt;a href=&#34;https://whispersystems.org/bigbrother/eastern-virginia-grand-jury/&#34;&gt;received&lt;/a&gt; a request for data about a Signal user, all they were technically able to hand over to the FBI was the account creation time and the last date that the user connected to the Signal server — they didn&amp;rsquo;t have the users’ contacts, they didn&amp;rsquo;t have a list of groups they were in or members of those groups. The company also successfully fought a gag order designed to keep them from publicizing the request. That said, Signal groups can be buggy, have scaling issues when groups get too big, and at the moment there are far fewer people using Signal than there are using WhatsApp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;EFF also has some &lt;a href=&#34;https://www.eff.org/deeplinks/2016/10/where-whatsapp-went-wrong-effs-four-biggest-security-concerns&#34;&gt;concerns about WhatsApp&lt;/a&gt; as of October 2016.&lt;/p&gt;

&lt;p&gt;The New York Times&amp;rsquo;s &lt;a href=&#34;http://www.nytimes.com/2016/12/07/technology/personaltech/worried-about-the-privacy-of-your-messages-download-signal.html?_r=0&#34;&gt;Brian X. Chen recommends Signal to his readers&lt;/a&gt;, and Snowden is also a fan:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I use Signal every day. &lt;a href=&#34;https://twitter.com/hashtag/notesforFBI?src=hash&#34;&gt;#notesforFBI&lt;/a&gt; (Spoiler: they already know) &lt;a href=&#34;https://t.co/KNy0xppsN0&#34;&gt;https://t.co/KNy0xppsN0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Edward Snowden (@Snowden) &lt;a href=&#34;https://twitter.com/Snowden/status/661313394906161152&#34;&gt;November 2, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Use Tor. Use Signal. &lt;a href=&#34;https://t.co/VLvBsbVHKs&#34;&gt;https://t.co/VLvBsbVHKs&lt;/a&gt;&lt;/p&gt;&amp;mdash; Edward Snowden (@Snowden) &lt;a href=&#34;https://twitter.com/Snowden/status/778592275144314884&#34;&gt;September 21, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vanityfair.com/news/2016/08/how-the-clinton-campaign-is-foiling-the-kremlin&#34;&gt;The Clinton campaign also used it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Signal is &lt;a href=&#34;https://github.com/WhisperSystems/Signal-iOS&#34;&gt;open source&lt;/a&gt; and is licensed under the &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GPLv3&lt;/a&gt;. Its founder is Moxie Marlinspike, a charismatic computer security researcher recently &lt;a href=&#34;https://www.wired.com/2016/07/meet-moxie-marlinspike-anarchist-bringing-encryption-us/&#34;&gt;profiled in &lt;em&gt;Wired&lt;/em&gt;&lt;/a&gt;. Also, Signal &lt;a href=&#34;https://whispersystems.org/blog/signal-desktop-ios/&#34;&gt;recently released a desktop client for iPhone users&lt;/a&gt;, meaning you can send messages to your Signal contacts from your desktop.&lt;/p&gt;

&lt;p&gt;Note that &lt;a href=&#34;https://sandervenema.ch/2016/11/why-i-wont-recommend-signal-anymore/&#34;&gt;there are some complaints&lt;/a&gt; that it has a what I understand to be a small dependency on Google Cloud Messaging. But given &lt;a href=&#34;https://news.ycombinator.com/item?id=12883410&#34;&gt;this response from Marlinspike&lt;/a&gt; and &lt;a href=&#34;http://dephekt.net/2016/11/10/managing-security-trade-offs-why-i-still-recommend-signal.html&#34;&gt;another blog post responding to the GCM issue&lt;/a&gt;, I&amp;rsquo;m not too concerned. It seems like any security trade-off is worth it for making the app easier to install and use.&lt;/p&gt;

&lt;h4 id=&#34;desktop-to-desktop-messaging&#34;&gt;Desktop-to-Desktop Messaging&lt;/h4&gt;

&lt;p&gt;I also found a desktop-only messaging app called &lt;a href=&#34;https://ricochet.im/&#34;&gt;Ricochet&lt;/a&gt; which uses the Tor network in an attempt to obfuscate or &amp;ldquo;eliminate&amp;rdquo; metadata of your conversations. From their documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ricochet uses the &lt;a href=&#34;https://www.torproject.org/about/overview.html.en&#34;&gt;Tor network&lt;/a&gt; to reach your contacts without relying on messaging servers. It creates a &lt;a href=&#34;https://www.torproject.org/docs/hidden-services.html.en&#34;&gt;hidden service&lt;/a&gt;, which is used to rendezvous with your contacts without revealing your location or IP address. Instead of a username, you get a unique address that looks like ricochet:rs7ce36jsj24ogfw. Other Ricochet users can use this address to send a contact request - asking to be added to your contacts list.&lt;/p&gt;

&lt;p&gt;You can see when your contacts are online, and send them messages (and soon, files!). Your list of contacts is only known to your computer - never exposed to servers or network traffic monitoring.&lt;/p&gt;

&lt;p&gt;Everything is encrypted end-to-end, so only the intended recipient can decrypt it, and anonymized, so nobody knows where it&amp;rsquo;s going and where it came from.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ricochet&amp;rsquo;s website goes on to warn that the software is &amp;ldquo;an experiment&amp;rdquo; and that &amp;ldquo;Security and anonymity are difficult topics, and you should carefully evaluate your risks and exposure with any software.&amp;rdquo; However Ricochet was audited in January 2016 (&lt;a href=&#34;https://ricochet.im/files/ricochet-ncc-audit-2016-01.pdf&#34;&gt;PDF&lt;/a&gt;) and &lt;a href=&#34;https://motherboard.vice.com/read/ricochet-encrypted-messenger-tackles-metadata-problem-head-on&#34;&gt;Joseph Cox of Motherboard says it passed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I like its design&amp;ndash; you don&amp;rsquo;t have a password and you don&amp;rsquo;t pick a username. As I understand it your identity is connected to the computer you&amp;rsquo;re using and the (private) key file that is created and stored on your computer when you install the software. More on Ricochet&amp;rsquo;s design &lt;a href=&#34;https://github.com/ricochet-im/ricochet/blob/master/doc/design.md&#34;&gt;here&lt;/a&gt;. Ricochet is open source (&lt;a href=&#34;https://github.com/ricochet-im/ricochet&#34;&gt;GitHub&lt;/a&gt;) and can be &lt;a href=&#34;https://github.com/ricochet-im/ricochet/blob/master/BUILDING.md&#34;&gt;built from source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll also mention &lt;a href=&#34;https://crypto.cat/&#34;&gt;Cryptocat&lt;/a&gt;, another desktop-only, open source encrypted messaging app. Cryptocat is mentioned by name as a good option in &lt;em&gt;Data and Goliath&lt;/em&gt;, and it allows file transfers which is nice. One thing to note is that previous version(s) of the app were criticized for a lack of security, but, after re-writing the program, the developer has now asked security-minded users to &lt;a href=&#34;https://www.reddit.com/r/netsec/comments/4fyzyc/cryptocat_rewritten_from_scratch_invitation_to/?st=ivgs41yw&amp;amp;sh=c25b60a8&#34;&gt;take a second look at the code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, in this section I should also note that the EFF has a &lt;a href=&#34;https://www.eff.org/secure-messaging-scorecard&#34;&gt;Secure Messaging Scorecard&lt;/a&gt; though the current version, they admit, is out of date. They&amp;rsquo;re currently working on an updated version.&lt;/p&gt;

&lt;h4 id=&#34;email&#34;&gt;Email&lt;/h4&gt;

&lt;p&gt;For email there&amp;rsquo;s always good ole &lt;a href=&#34;https://en.wikipedia.org/wiki/Pretty_Good_Privacy&#34;&gt;PGP (&amp;ldquo;Pretty Good Privacy&amp;rdquo;)&lt;/a&gt;, for which I wrote &lt;a href=&#34;https://sts10.github.io/blog/2015/07/01/my-basic-understanding-of-pgp-encryption/&#34;&gt;a basic explainer when I first learned how to use it&lt;/a&gt;. Shelton, in &lt;a href=&#34;https://medium.com/@mshelton/security-compromises-in-journalism-4cc32ba0709d#.sofplhy72&#34;&gt;a new Medium post called &amp;ldquo;Security Compromises in Journalism&amp;rdquo;&lt;/a&gt;, writes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PGP is a protocol for encrypting messages, and it&amp;rsquo;s become a tool both security specialists and journalists both love to hate. Today, its open source implementation, GnuPG, is widely used by journalists and media activists around the world to encrypt the body of their emails. PGP isn&amp;rsquo;t easy to set up, and once it&amp;rsquo;s running, users can very easily make mistakes. For example, users can send an encrypted message using an incorrect or expired key, essentially making the message unreadable to the recipient.&lt;/p&gt;

&lt;p&gt;Glenn Greenwald, who broke the early Snowden disclosures with the Guardian, is perhaps one of the most famously resistant PGP users. Edward Snowden provided detailed instructions on how to set up the protocol, but Greenwald held off for months. In an interview, I asked Greenwald about the challenges of using PGP. He told me, &amp;ldquo;PGP hasn&amp;rsquo;t really evolved that much since [the 1990s] in terms of being user friendly because it&amp;rsquo;s mostly been used by nerds and hackers, and people who almost like the fact that it&amp;rsquo;s so complicated.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Shelton observes, PGP is (still) difficult to use, but &lt;a href=&#34;https://gpgtools.org&#34;&gt;GPG Tools&lt;/a&gt; makes it easier for Mac users (they also have &lt;a href=&#34;https://gpgtools.tenderapp.com/kb/how-to/first-steps-where-do-i-start-where-do-i-begin-setup-gpgtools-create-a-new-key-your-first-encrypted-mail&#34;&gt;a guide for new users&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This set of tools includes GPGMail, &amp;ldquo;an open source plugin for Apple Mail&amp;rdquo; which does seem to make the process easier when using OS X&amp;rsquo;s default mail app. However, for encrypting email with PGP, both &lt;a href=&#34;https://ssd.eff.org/en/module/how-use-pgp-mac-os-x&#34;&gt;the EFF&lt;/a&gt; and the &lt;a href=&#34;https://emailselfdefense.fsf.org/en/mac.html&#34;&gt;Free Software Foundation&lt;/a&gt; recommend using Thunderbird and Enigmail. If you use Gmail&amp;rsquo;s web interface, you can look in to &lt;a href=&#34;https://www.mailvelope.com/&#34;&gt;Mailvelope&lt;/a&gt;. I&amp;rsquo;m sure there are other plugins and pieces of software that attempt to make usage easier.&lt;/p&gt;

&lt;p&gt;I admit I don&amp;rsquo;t have a full grasp of how to use PGP. For example, the idea of signing the keys of others, as described in &lt;a href=&#34;https://emailselfdefense.fsf.org/en/mac.html&#34;&gt;the FSF guide&lt;/a&gt;, continues to elude me. Regardless, my public PGP key is &lt;a href=&#34;https://pgp.mit.edu/pks/lookup?op=get&amp;amp;search=0x5BF6E5C2B80500F2&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;ve also purchased a YubiKey and put a new PGP key on it, &lt;a href=&#34;https://sts10.github.io/blog/2016/12/06/yubikey-and-gpg/&#34;&gt;which you can read about&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you might expect, it&amp;rsquo;s difficult to get friends into PGP, so I haven&amp;rsquo;t used it to communicate in a while. However I have found GPG Tools&amp;rsquo; &amp;ldquo;GPG Services&amp;rdquo; (included in GPG Tools) useful for quickly encrypting specific files on my Mac, either for safe storage or safely emailing to myself.&lt;/p&gt;

&lt;p&gt;To avoid Google reading my email, realistically I&amp;rsquo;d have to get off of GMail. One alternative that &lt;a href=&#34;https://techcrunch.com/2016/11/11/signups-for-encrypted-mail-client-protonmail-double-after-election/&#34;&gt;many are flocking to recently&lt;/a&gt; is &lt;a href=&#34;https://protonmail.com/&#34;&gt;ProtonMail&lt;/a&gt;, a provider based in Switzerland that encrypts emails between ProtonMail users, and is &lt;a href=&#34;https://github.com/ProtonMail/WebClient&#34;&gt;open source&lt;/a&gt;. I&amp;rsquo;m honestly not sure how difficult it would be for me to change email addresses these days, as I&amp;rsquo;ve had the same GMail address since 2005. But it might not be too hard, given that I doubt my email address gets typed out that often, and when it does it gets auto-completed.&lt;/p&gt;

&lt;h3 id=&#34;what-i-did-1&#34;&gt;What I Did&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve yet to use any of these encrypted services to communicate with others in a meaningful way, since they all require both users to adopt the service. For that reason I&amp;rsquo;m hopeful that both Signal and ProtonMail are reporting a surge in new users recently.&lt;/p&gt;

&lt;h2 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&#34;https://blog.witness.org/2016/11/getting-started-digital-security/&#34;&gt;Witness blog post&lt;/a&gt; pointed me to a few of the guides I link to above, including to &lt;a href=&#34;https://securityinabox.org/en&#34;&gt;Security in a Box&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;see-something-say-something&#34;&gt;See Something Say Something&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m low-key terrified that there is misinformation above. Again, if you see something wrong or misleading here, or you have suggestions, feel free to &lt;a href=&#34;https://twitter.com/sts10&#34;&gt;tweet at me or DM me&lt;/a&gt; or send me a PGP-encrypted email&amp;ndash; again, &lt;a href=&#34;https://pgp.mit.edu/pks/lookup?op=get&amp;amp;search=0x5BF6E5C2B80500F2&#34;&gt;here&amp;rsquo;s my public key&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Ubuntu on my old MacBook Pro</title>
      <link>http://example.org/post/2016-11-07-installing-ubuntu-on-my-old-macbook-pro/</link>
      <pubDate>Mon, 07 Nov 2016 23:07:09 -0500</pubDate>
      
      <guid>http://example.org/post/2016-11-07-installing-ubuntu-on-my-old-macbook-pro/</guid>
      <description>

&lt;p&gt;I had an old 17 inch MacBook Pro from 2009 (college) lying around and I figured it&amp;rsquo;d be a fun challenge to install Linux on it. I had never installed or even used Linux before (to my knowledge). I also, confusingly, hadn&amp;rsquo;t found a clean, step-by-step guide for doing this, so I promised I&amp;rsquo;d write my process out as thoroughly but simply as I could once I got it done.&lt;/p&gt;

&lt;p&gt;I now realize, I think, that the reason the process of installing even a popular Linux distribution on a common (if old) model computer isn&amp;rsquo;t written out or easily findable is that the process is a bit different for everyone, depending on the distro, the version, and the hardware you&amp;rsquo;re starting with. Note that I didn&amp;rsquo;t want to partition my hard drive to allow myself to dual-boot either in OS X or Ubuntu&amp;ndash; I was going for a full replacement, and thus would and did lose all the files on applications I had on the old Mac.&lt;/p&gt;

&lt;p&gt;But regardless, here is the process I took.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;about-this-mac&#34;&gt;About This Mac&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Model name: MacBook Pro
Model Identifier: MacBookPro3,1
Processor Name: Intel Core 2 Duo
Processor Speed: 2.4GHz
Number of Processors: 1
Total number of cores: 2
L2 Cache: 4 MB
Memory: 2GB
Boot ROM Version: MBP31.0070.B07

It&#39;s a 17 inch screen. I believe I bought it in the summer of 2009.

was running:
OS X 10.9.2 (13C64)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-i-got-ubuntu-16-installed&#34;&gt;How I Got Ubuntu 16 Installed&lt;/h2&gt;

&lt;p&gt;Again, note, this worked for me and my machine but may not for you. For example I believe I had to do steps 4, 5, 8, 9, 10, and 11 only because I have a MBP with an Intel chip.&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;WARNING&lt;/strong&gt;, this procedure completely wiped my OS X and all the files and applications on that installation, as I intended. There are ways to dual-boot both, but I wasn&amp;rsquo;t interested in that as Mavericks was running super slow on this computer. Furthermore I think all the data I had on my USB stick is lost due to it being formatted in a certain way at some point in the procedure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE (February 2017)&lt;/strong&gt;: Before moving ahead, you may want to consider the following. A helpful commenter, Brian Moran, (see below) writes that, when installing Ubuntu on an older Mac with a NVIDIA graphics card, it may be better to &amp;ldquo;boot in &amp;lsquo;Legacy BIOS mode&amp;rsquo;, not in &amp;lsquo;EFI&amp;rsquo; mode&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Apparently what is happening is that both the open source and Nvidia drivers are buggy when doing an &amp;ldquo;EFI Install&amp;rdquo; on Mac machines. If full graphics performance is desired, a &amp;ldquo;Legacy BIOS Install&amp;rdquo; is needed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From &lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=2209602&#34;&gt;the forum post that the commenter cites&lt;/a&gt;, which is concerned with a MacBook Air 3,2:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The core problem with the [generic] installation is this. The graphic driver that Ubuntu installs by default (Nouveau) has bugs with the MacBook Air 3 graphic processor, the nvidia GeForce 320M (G320M). You can do a default install, it will boot normally, but you&amp;rsquo;ll soon see little glitches here and there and the computer will normally crash after a few minutes of use (especially when transparency or shadow effects are used, it seems). The problem exists with Raring and I expect it arises with Precise (though see &amp;ldquo;alternative solutions&amp;rdquo; below).&lt;/p&gt;

&lt;p&gt;To avoid that, you need to install the proprietary nvidia driver. But here is the catch: the driver requires the computer to boot in &amp;ldquo;Legacy BIOS mode&amp;rdquo;, not in &amp;ldquo;EFI&amp;rdquo; mode (see here or here). If you install the nvidia drivers while Ubuntu is in EFI mode, you&amp;rsquo;ll get a blank/black screen at the beginning of the boot. (If you got to that stage, see the &amp;ldquo;recovery for nvidia drivers EFI crash&amp;rdquo; below). On a PC you can force Ubuntu to install in BIOS Legacy mode by selecting that mode in the computer BIOS. But on a Mac you can&amp;rsquo;t (easily) do that, and if you install from a USB key by default you will be in EFI mode.&lt;/p&gt;

&lt;p&gt;So summing up, if you do a default installation of Ubuntu from a USB on a MacBook Air 3,1 or 3,2, you&amp;rsquo;ll either have buggy graphics and random crashes, or you&amp;rsquo;ll install the nvdida drivers and have a blank/black screen at startup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the record, I followed the procedure detailed below with my MackBook Pro 3,1 and while I now believe that my nvidia card is NOT being used, basic computing (web browser, document editing coding, simple games) are working just fine. Not being a gamer I don&amp;rsquo;t know much about graphics cards, but for what it&amp;rsquo;s worth I believe my MacBook Pro has a G84M [GeForce 8600M GT] card, which is &lt;em&gt;not&lt;/em&gt; the same model listed in the forum post the commenter cites.&lt;/p&gt;

&lt;p&gt;But if I were starting over I might instead consider the procedure outlined in &lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=2209602&#34;&gt;the forum post&lt;/a&gt; the commenter links to in hopes of even better performance. End of February 2017 update.&lt;/p&gt;

&lt;p&gt;Alright, with all that said here&amp;rsquo;s what I think I would do if I were starting fresh, knowing what I know now:&lt;/p&gt;

&lt;h3 id=&#34;what-i-did-to-install-ubuntu&#34;&gt;What I Did to Install Ubuntu&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Get a USB drive with at least 2 GB of storage. Know that it&amp;rsquo;s going to get wiped, so move important files off it first. Then use the MacOS Disk Utility to format the USB stick as DOS FAT32.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;d follow &lt;a href=&#34;https://www.ubuntu.com/download/desktop/create-a-usb-stick-on-mac-osx&#34;&gt;this guide&lt;/a&gt; to download Ubuntu 16.04 LTS and get it onto the USB stick, using UNetbootin.&lt;/li&gt;
&lt;li&gt;As described in the final step in that guide, when you restart, hold down the option key on your Mac. In the resulting menu, select the &amp;ldquo;EFI&amp;rdquo; device as the device to boot from.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll be confronted with a text-only menu that&amp;rsquo;s from a piece of software called GNU GRUB. Key down so your cursor is on &amp;ldquo;Install Ubuntu&amp;rdquo;, but instead of pressing enter, press &lt;code&gt;e&lt;/code&gt; to edit the commands before booting.&lt;/li&gt;
&lt;li&gt;This opens an options file in a basic text editor. Find the line that has &lt;code&gt;ro quiet splash&lt;/code&gt; in it and make that bit of the line read &lt;code&gt;ro nomodeset quiet splash&lt;/code&gt;. Then press either F10 or Ctrl-X to boot (read the text at the bottom of the screen to be sure of the key(s) to press).&lt;/li&gt;
&lt;li&gt;If presented with a choice in GRUB (a text menu) with an option to &lt;code&gt;install Ubuntu&lt;/code&gt;, choose that option.&lt;/li&gt;
&lt;li&gt;You should be then presented with a nice GUI (not text only) Ubuntu installer, or maybe an icon that says &lt;code&gt;Install Ubuntu&lt;/code&gt;. Double click the icon if you see it. Go through everything, decide whether or not to connect your Wifi to download updates, decide whether or not to encrypt your home folder, and then choose restart.&lt;/li&gt;
&lt;li&gt;We now need to boot Ubuntu in &lt;a href=&#34;https://wiki.ubuntu.com/RecoveryMode&#34;&gt;recovery mode&lt;/a&gt;. To do this, as the computer is starting up again after restart, right after you hear the Apple/Mac start-up sound, hold the SHIFT key. Repeat step #3 above if you&amp;rsquo;re presented with the EFI option. Once you&amp;rsquo;re at a text-only menu, press &lt;code&gt;e&lt;/code&gt; and add &lt;code&gt;nomodeset&lt;/code&gt; to the line of code discussed above. Then press the key(s) to boot. Ubuntu should boot up&amp;ndash; though the display may be screwy. In either case, we&amp;rsquo;re not done yet.&lt;/li&gt;
&lt;li&gt;Now we need to make that &lt;code&gt;nomodeset&lt;/code&gt; setting permanent. Open terminal (ctrl+option+t) and run &lt;code&gt;sudo nano /etc/default/grub&lt;/code&gt;. (&lt;a href=&#34;https://askubuntu.com/questions/38780/how-do-i-set-nomodeset-after-ive-already-installed-ubuntu#38782&#34;&gt;Reference&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;In that file, add &lt;code&gt;nomodeset&lt;/code&gt; to &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; as seen below:
&lt;code&gt;
GRUB_DEFAULT=0
GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash nomodeset&amp;quot;
GRUB_CMDLINE_LINUX=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Save this text file by hitting Ctrl+O, then exit nano with Ctrl+X, then, back in Terminal, run: &lt;code&gt;sudo update-grub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart the computer (the menu for which is in the top-right corner of Ubuntu 16).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think that would do it. I don&amp;rsquo;t think I needed rEFInd. And apparently the warning on UNetbootin that I could run the device on Macs was not accurate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For completeness sake, here is the actual process I went through over three days.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;attempt-1-ubuntu-16-04&#34;&gt;Attempt #1: Ubuntu 16.04&lt;/h2&gt;

&lt;p&gt;I found &lt;a href=&#34;https://www.ubuntu.com/download/desktop/create-a-usb-stick-on-mac-osx&#34;&gt;this guide&lt;/a&gt; which involved downloading and using the &lt;a href=&#34;https://unetbootin.github.io/&#34;&gt;UNetbootin USB installer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I believe I successfully downloaded the Ubuntu 16.04 ISO and UNetbootin. I then installed UNetbootin (by dragging it into Application) and then I used UNetbootin as described in the tutorial. However at step 7 when I restarted my Mac and held the option key I was presented with a menu to try or install Ubuntu. Every time I selected &amp;ldquo;install&amp;rdquo; it just went to a black screen. I waited minutes but no installation screen appeared. I then held down the power button and the computer rebooted in OS X, back to square one.&lt;/p&gt;

&lt;p&gt;I will say that after using UNetbootin to load the USB stick the program warned the device could only boot the new OS on PCs, not on Macs. I chose to ignore that warning and try anyway, but as I reported above, it didn&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;Upon further research I believe the Ubuntu 16.04 may not work on Intel-based MBPs made circa 2009. One page, &lt;a href=&#34;https://help.ubuntu.com/community/MacBookPro&#34;&gt;https://help.ubuntu.com/community/MacBookPro&lt;/a&gt;, seemed to encourage those with MBPs this old should instead opt for Ubuntu 14.04.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want to run an old version of a distro I wasn&amp;rsquo;t particualrly excited about if I could find a distro that I could run the lastest version of. Plus I couldn&amp;rsquo;t quite figure out how to download an (official) copy of version 14.04.&lt;/p&gt;

&lt;h2 id=&#34;attempt-2-mint-18-sarah-cinnamon-64-bit&#34;&gt;Attempt #2: Mint 18 (&amp;ldquo;Sarah&amp;rdquo;) Cinnamon 64-bit&lt;/h2&gt;

&lt;p&gt;I understand that &lt;a href=&#34;https://lifehacker.com/5993297/ubuntu-vs-mint-which-linux-distro-is-better-for-beginners&#34;&gt;the other distro well-reviewed for beginners&lt;/a&gt; is &lt;a href=&#34;https://www.linuxmint.com&#34;&gt;Mint&lt;/a&gt;. And I saw that Mint 18 was itself &lt;a href=&#34;http://arstechnica.com/information-technology/2016/08/mint-18-review-just-works-linux-doesnt-get-any-better-than-this/&#34;&gt;got good reviews&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I headed over to &lt;a href=&#34;https://www.linuxmint.com/download.php&#34;&gt;their download page&lt;/a&gt; and chose &lt;a href=&#34;https://www.linuxmint.com/edition.php?id=217&#34;&gt;&amp;ldquo;Cinnamon 64-bit&amp;rdquo;&lt;/a&gt; and downloaded it via a torrent.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://community.linuxmint.com/tutorial/view/744&#34;&gt;only tutorial that I found for installing Linux Mint via USB&lt;/a&gt; seemed strange and brief. Thus my current plan is to try to use UNetbootin again, following &lt;a href=&#34;https://www.ubuntu.com/download/desktop/create-a-usb-stick-on-mac-osx&#34;&gt;the Ubuntu guide&lt;/a&gt; but with Mint this time rather than Ubuntu 16.04.&lt;/p&gt;

&lt;p&gt;However, as before, after using UNetbootin it told me the device could only boot the new OS on PCs, not on Macs.&lt;/p&gt;

&lt;p&gt;When I restarted my Mac and held down the option key, I got a similar menu as when I tried Ubuntu, but eventually came to a dark black screen. I waited a few minutes, and then forced the computer to shut down by holding down the power button.&lt;/p&gt;

&lt;h2 id=&#34;attempt-3-back-to-ubuntu-16-04-by-a-different-method&#34;&gt;Attempt #3: Back to Ubuntu 16.04 by a different method&lt;/h2&gt;

&lt;p&gt;I followed &lt;a href=&#34;https://help.ubuntu.com/community/How%20to%20install%20Ubuntu%20on%20MacBook%20using%20USB%20Stick&#34;&gt;the instructions presented here&lt;/a&gt;, which I was optimistic about it because it avoided using UNetbootin, along with the potentially helpful warning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UNetbootin for Mac OS X can be used to automate the process of extracting the Ubuntu ISO file to USB, and making the USB drive bootable. The resulting USB drive, however, can be booted on PCs only.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which mirrors the warning UNetbootin gave me.&lt;/p&gt;

&lt;p&gt;However the method described in the link above failed in the same way the others did&amp;ndash; I restarted, held down the option key, chose the EFI boot, chose to install Ubuntu, and then was met with a black screen. For the first time I thought to check the light on my USB stick to see if it was at least thinking but it was off.&lt;/p&gt;

&lt;h2 id=&#34;attempt-4-using-refind-boot-manager&#34;&gt;Attempt #4: Using rEFInd Boot Manager&lt;/h2&gt;

&lt;p&gt;From &lt;a href=&#34;http://www.linux-on-laptops.com/apple.html&#34;&gt;here&lt;/a&gt; I found &lt;a href=&#34;http://research.naumachiarius.com/articles/macbook-debian.html&#34;&gt;an article about installing Debian&lt;/a&gt; (a more advanced distro of Linux).&lt;/p&gt;

&lt;p&gt;That let me to believe &lt;a href=&#34;http://www.rodsbooks.com/refind/&#34;&gt;rEFInd&lt;/a&gt; was something I needed to &lt;a href=&#34;http://www.rodsbooks.com/refind/installing.html&#34;&gt;install&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;However this program (I admittedly didn&amp;rsquo;t take the time to figure out what it actually does) did not seem to help. Afterward, and before my next attempt, I &lt;a href=&#34;http://www.rodsbooks.com/refind/installing.html#uinst_osx&#34;&gt;bypassed rEFInd&lt;/a&gt; by going to System Preferences &amp;gt; Start Up Disk, selecting my hard drive and hitting the restart button. Thus I do not think I actually needed to install rEFInd to successfully get Ubuntu installed, however I&amp;rsquo;m not 100% of this, since &lt;a href=&#34;http://www.rodsbooks.com/refind/installing.html#uinst_osx&#34;&gt;the rEFInd uninstall instructions for OS X&lt;/a&gt; recommend bypassing rEFInd rather than actually uninstalling it.&lt;/p&gt;

&lt;h2 id=&#34;attempt-5-having-bypassed-refind-i-replace-quiet-splash-with-nomodeset&#34;&gt;Attempt #5: Having bypassed rEFInd, I replace &lt;code&gt;quiet splash&lt;/code&gt; with &lt;code&gt;nomodeset&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Big success!&lt;/p&gt;

&lt;p&gt;Somewhere else I remember seeing someone recommend turning on an option called &lt;code&gt;nomodeset&lt;/code&gt; in GNU GRUB, but for some reason didn&amp;rsquo;t think I had that option in the menu that I kept getting. Turns out, as described &lt;a href=&#34;http://askubuntu.com/a/38834&#34;&gt;here&lt;/a&gt;, when you get to the GRUB menu you hit the &lt;code&gt;e&lt;/code&gt; key. Then you add &lt;code&gt;nomodeset&lt;/code&gt; as a parameter in one of the lines of code in the text file that opens. Removing &lt;code&gt;quiet splash&lt;/code&gt; seems to just present more text as output&amp;ndash; the &lt;code&gt;nomodeset&lt;/code&gt; solved the problem.&lt;/p&gt;

&lt;p&gt;After maybe 40 seconds I was presented with an Ubuntu desktop and a shortcut icon to an Ubuntu installer. I double-clicked the installer and followed the wizard.&lt;/p&gt;

&lt;p&gt;I connected to my wifi network and told it to download updates as it installed to make things quicker. The only hard choice was whether to encrypt my home folder (which I believe you can&amp;rsquo;t do later). I decided not to based on &lt;a href=&#34;https://askubuntu.com/questions/37/when-installing-im-given-the-option-of-encrypting-my-home-folder-what-does-t#62&#34;&gt;this answer&lt;/a&gt; as I was worried about the performance hit on decrypting on a machine with 2GB memory. Then I just waited for Ubuntu 16.04.1 LTS to install.&lt;/p&gt;

&lt;p&gt;After installation it asked me to restart. I clicked yes. I then got an ugly error message that said something like &amp;ldquo;remove the installation device and hit enter&amp;rdquo;. I still had the USB stick in, unsure when I was to remove it. I pulled it out and hit enter. The computer then restarted, making the familiar Mac start-up sound and presenting the familiar Mac gray, but then it switched to a purple Ubuntu-like color and stayed there for a minute.&lt;/p&gt;

&lt;h2 id=&#34;setting-nomodeset-permanently&#34;&gt;Setting &lt;code&gt;nomodeset&lt;/code&gt; permanently&lt;/h2&gt;

&lt;p&gt;When I came back from that restart it was stuck on a purple screen. I figured I needed to set &lt;code&gt;nomodeset&lt;/code&gt; permanently on. I needed to get back to the GRUB screen, which I figured out from somewhere:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Switch on your computer.&lt;/li&gt;
&lt;li&gt;Wait until the BIOS has finished loading, or has almost finished. (During this time you will probably see a logo of your computer manufacturer.)&lt;/li&gt;
&lt;li&gt;Quickly press and hold the Shift key, which will bring up the GNU GRUB menu. (If you see the Ubuntu logo, you&amp;rsquo;ve missed the point where you can enter the GRUB menu.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, to set &lt;code&gt;nomodeset&lt;/code&gt; to be on permanently, I followed &lt;a href=&#34;https://askubuntu.com/questions/38780/how-do-i-set-nomodeset-after-ive-already-installed-ubuntu#38782&#34;&gt;this Ask Ubuntu answer&lt;/a&gt; that reads:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You should add this option to /etc/default/grub, firstly:

sudo nano /etc/default/grub

and then add nomodeset to GRUB_CMDLINE_LINUX_DEFAULT:

GRUB_DEFAULT=0
GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash nomodeset&amp;quot;
GRUB_CMDLINE_LINUX=&amp;quot;&amp;quot;

And then save by hitting Ctrl+O, then exit nano with Ctrl+X, then simply run:

sudo update-grub

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I saved that file and ran &lt;code&gt;sudo update-grub&lt;/code&gt; as instructed. I then restarted my computer once again and I think that&amp;rsquo;s when things went smoothly for the first time.&lt;/p&gt;

&lt;p&gt;(FYI a similar process to the one described above seems to be given &lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=1613132&#34;&gt;here&lt;/a&gt; but with some other stuff as well, if you need more help at this stage.)&lt;/p&gt;

&lt;h2 id=&#34;initial-thoughts&#34;&gt;Initial Thoughts&lt;/h2&gt;

&lt;p&gt;Woohoo! It seems snappier that OS X 10.9, but it&amp;rsquo;s not a speed demon like my 2012 MacBook Air with 8 GB of memory.&lt;/p&gt;

&lt;p&gt;But the desktop and dock are familiar enough to me. It comes with Firefox, &lt;a href=&#34;https://www.libreoffice.org/&#34;&gt;Libre Office&lt;/a&gt;, a basic text editor, and a link to Amazon.com(?) in the dock that&amp;rsquo;s on the left by default. I got terminal Vim and &lt;a href=&#34;https://rvm.io/&#34;&gt;RVM&lt;/a&gt; running with a few Google-able tweaks from the OS X installation process. Remapping caps lock to control was &lt;a href=&#34;http://askubuntu.com/a/614664&#34;&gt;one line in Terminal&lt;/a&gt; (&lt;code&gt;setxkbmap -option caps:ctrl_modifer&lt;/code&gt;), however that did not persist when restarted. I followed &lt;a href=&#34;https://askubuntu.com/questions/53038/how-do-i-remap-the-caps-lock-key#comment460778_336988&#34;&gt;this AskUbuntu answer&lt;/a&gt; and went to Startup Applications &amp;gt; Add &amp;gt; and entered &lt;code&gt;setxkbmap -option caps:ctrl_modifer&lt;/code&gt;. It seems to persist on restart now.&lt;/p&gt;

&lt;p&gt;I was able to install git by running &lt;code&gt;sudo apt install git&lt;/code&gt;. Similarly I was able to install KeePassX by running &lt;code&gt;sudo apt-get install keepassx&lt;/code&gt; (I&amp;rsquo;m not 100% in the difference between &lt;code&gt;apt&lt;/code&gt; and &lt;code&gt;apt-get&lt;/code&gt; here but that&amp;rsquo;s what I saw on the internet help sites I found). I also installed a fresh version of vim but I forget what line I ran in terminal.&lt;/p&gt;

&lt;p&gt;To run a general update and upgrade, I run &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt;, which seems to work.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll see how much I use this old computer going forward, and what for.&lt;/p&gt;

&lt;p&gt;Update: Just found &lt;a href=&#34;https://linuxjourney.com/&#34;&gt;this website that aims to teach Linux for beginners&lt;/a&gt;, which I might checkout. There&amp;rsquo;s also this series of YouTube videos: &lt;a href=&#34;https://www.youtube.com/watch?v=1dQTEw8n9yc&#34;&gt;Ubuntu Beginners Guide&lt;/a&gt; that looks nice, is Ubuntu-specific, and is, as of this writing, only one month old.&lt;/p&gt;

&lt;h2 id=&#34;switching-to-lubuntu&#34;&gt;Switching to Lubuntu&lt;/h2&gt;

&lt;p&gt;To avoid the high memory usage of Ubuntu&amp;rsquo;s Unity desktop environment, I installed Ubuntu&amp;rsquo;s LXDE desktop environment (called Lubuntu). I had a gist that Unity was a bit of a memory hog compared to other desktop environments. I also spotted &lt;a href=&#34;https://www.reddit.com/r/linux/comments/5l39tz/linux_distros_ram_consumption_comparison_updated/?st=ixpgu5wy&amp;amp;sh=67b8f57f&#34;&gt;this Reddit post&lt;/a&gt; that compares some lightweight distros in terms of RAM consumption and Lubuntu did well.&lt;/p&gt;

&lt;p&gt;To install Lubuntu, I ran &lt;code&gt;sudo apt-get install lubuntu-desktop&lt;/code&gt; (I learned this from a helpful user in the &lt;a href=&#34;https://riot.im/app/#/room/ubuntu:matrix.org&#34;&gt;Ubuntu Riot.im channel&lt;/a&gt;). The size of the installation was about 340 mb.&lt;/p&gt;

&lt;p&gt;After installing the Lubuntu desktop environment, you want to run the software updater, restart the computer (logging out is not enough), and at the login screen choose Lubuntu (or LXDE&amp;hellip; that&amp;rsquo;s another option and I&amp;rsquo;m not sure what the difference is).&lt;/p&gt;

&lt;p&gt;You can check how much RAM you have available by running &lt;code&gt;free -m&lt;/code&gt; in the terminal. Thanks to &lt;a href=&#34;http://www.linuxatemyram.com/&#34;&gt;this site&lt;/a&gt;, I knew to look for the value under &amp;ldquo;available&amp;rdquo; to get an accurate estimate of how many megabytes of my memory were &amp;ldquo;free&amp;rdquo;. With my terminal and Firefox running on Lubuntu, I have about 1187 MB RAM of my 2 GB available, as opposed to Ubuntu, which generally only left about 700 or 800 MB available when I was running a couple of programs (not a very scientific test, I know).&lt;/p&gt;

&lt;p&gt;Plus I can always switch back to regular Ubuntu via the login screen.&lt;/p&gt;

&lt;p&gt;Lubuntu is pretty snappy! I did want to disable my touchpad from clicking, which I did by doing this:&lt;/p&gt;

&lt;h3 id=&#34;how-to-disable-tap-to-click-persistently-in-lubuntu&#34;&gt;How to disable tap to click persistently in Lubuntu&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;~/.config/lxsession/lubuntu/autostart&lt;/code&gt; or possibly &lt;code&gt;~/.config/lxsession/LXDE/autostart&lt;/code&gt; (not sure which)&lt;/li&gt;
&lt;li&gt;To disable tap touchpad to click, add &lt;code&gt;synclient MaxTapTime=0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find other settings to set &lt;a href=&#34;https://help.ubuntu.com/community/Lubuntu/Mouse&#34;&gt;here&lt;/a&gt;, like enabling two-finger horizontal scroll (&lt;code&gt;synclient HorizTwoFingerScroll=1&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;installing-an-application-launcher-for-lubuntu&#34;&gt;Installing an application launcher for Lubuntu&lt;/h3&gt;

&lt;p&gt;On macOS I make frequent use of &lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; as an application launcher. Ubuntu&amp;rsquo;s Unity desktop environment sort of had something like that, which you can initiate by pressing the command key on its own at any time. But I couldn&amp;rsquo;t find something similar in LXDE&amp;ndash; the application menu (similar to the Start menu in Windows) was just not fast enough for me coming from macOS + Alfred).&lt;/p&gt;

&lt;p&gt;So I found &lt;a href=&#34;https://askubuntu.com/questions/203851/any-search-tool-for-lxde-menu/203852#203852&#34;&gt;this askubuntu answer&lt;/a&gt; that recommends installing an application called Synapse by running &lt;code&gt;sudo apt-get install synapse&lt;/code&gt;. By default the launcher is invoked by hitting &lt;code&gt;ctrl + space&lt;/code&gt;, but I changed it to &lt;code&gt;alt+Enter&lt;/code&gt; by launching Synapse and clicking on the not-super-obvious round button on the right side of the pop-up display and clicking &amp;ldquo;Preferences&amp;rdquo;. Works great!&lt;/p&gt;

&lt;h3 id=&#34;my-attempt-to-make-the-gnome-terminal-the-default&#34;&gt;My attempt to make the Gnome terminal the default&lt;/h3&gt;

&lt;p&gt;The default Terminal in Lubuntu (think it&amp;rsquo;s called LXTerminal) didn&amp;rsquo;t support true color in Vim, so I looked for other options. I had gotten used to the terminal in regular Ubuntu (which I&amp;rsquo;m pretty sure is the Gnome Terminal), so I figured I could switch that in on Lubuntu. Oddly it&amp;rsquo;s not in the main menu of applications, but I figured out a way to set it as the &amp;ldquo;default&amp;rdquo; terminal:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;menu &amp;gt; Preferences &amp;gt; Default applications LXSession&lt;/li&gt;
&lt;li&gt;Launching applications &amp;gt; Terminal manager &amp;gt; More &amp;gt; write in &amp;ldquo;gnome-terminal&amp;rdquo; for &amp;ldquo;Manual setting&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This seems to have worked&amp;ndash; but only way I know how to launch Gnome Terminal is with the standard launch-terminal shortcut of &lt;code&gt;option + control + t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But note that if you&amp;rsquo;re a Vim user the only way I could get a version of Vim with system clipboard support was to &lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim#ubuntu&#34;&gt;install Neovim&lt;/a&gt; and then install &lt;a href=&#34;https://apps.ubuntu.com/cat/applications/xsel/&#34;&gt;xsel&lt;/a&gt; by running something like &lt;code&gt;sudo apt-get install xsel&lt;/code&gt;. Restart your Gnome Terminal and you should be good to go.&lt;/p&gt;

&lt;h3 id=&#34;more-lubuntu-configuration-ideas&#34;&gt;More Lubuntu configuration ideas&lt;/h3&gt;

&lt;p&gt;Just found &lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=1905408&#34;&gt;this long forum post&lt;/a&gt; with more ideas of recommended features for Lubuntu.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Messy Technology</title>
      <link>http://example.org/post/2016-08-31-how-we-screw-it-up/</link>
      <pubDate>Wed, 31 Aug 2016 22:10:07 -0400</pubDate>
      
      <guid>http://example.org/post/2016-08-31-how-we-screw-it-up/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;https://sts10.github.io/blog/2015/07/15/master-switch-and-hackers/&#34;&gt;&lt;em&gt;Master Switch&lt;/em&gt;&lt;/a&gt; I got in my head the book&amp;rsquo;s central idea: that information technology goes through a certain Cycle. A refresher:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Basically Wu observes that these information technologies (telephone, radio, TV, internet) go through cycles of “open” (personified by low barrier to entry, amateurs fooling around for little pay, and spotty service and quality of product— more of people pursuing “what could be”) and “closed” (large companies growing powerful, more money injected into an industry, a cleaning-up of standards, either by government regulations or large companies pushing out smaller competition)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;Ultimately we&amp;rsquo;re left with the question: Assuming we&amp;rsquo;re still in the &amp;ldquo;open&amp;rdquo; era of the internet, is the internet &amp;ldquo;special&amp;rdquo; enough to resist this &amp;ldquo;closing&amp;rdquo;, or is it just like the previous tent poles technologies of information distribution, similarly subjected to this Cycle?&lt;/p&gt;

&lt;p&gt;As a &amp;ldquo;digital native,&amp;rdquo; I think it&amp;rsquo;s little surprise that my first reaction was that, yes! we are special. This thing, which feels participatory enough that I and others may feel a special sense of ownership, is different than TV and radio.&lt;/p&gt;

&lt;p&gt;There seems to be a certain DIY-freedom baked into the bedrock technology of the internet, from the decentralized reality of packet-switching to the fact that anyone can write and deploy code to the internet, usually without any permission or license necessary. As &lt;a href=&#34;https://newrepublic.com/article/133889/reboot-world&#34;&gt;Paul Ford observes in an essay called &amp;ldquo;Reboot The World&amp;rdquo;&lt;/a&gt;, despite the increasing tendency for the internet to become centralized, &amp;ldquo;The technology that let people make web sites never went away. You can still set up a site as if it were 1995.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Not only can anyone write code that can be deployed to the internet, developers can easily publish their code for others to tweak and improve within systems like Github. And open source technologies are still competing and sometimes beating closed-code alternatives sold and maintained by private companies. How could large profit-hungry corporations, with their sidekick the Government, &amp;ldquo;ruin&amp;rdquo; the internet?&lt;/p&gt;

&lt;p&gt;Wu of course discusses one timely, foreboding challenge to the openness of the internet: the battle over net neutrality. Readers of the book are easily able to draw parallels to other tricks employed by actors attempting to &amp;ldquo;close&amp;rdquo; older information technologies, namely attacks on &amp;ldquo;common carriage&amp;rdquo;, that amounted to attempts to put smaller players at disadvantages. But, for one, Wu describes the concept of &amp;ldquo;net neutrality&amp;rdquo; to be a principle &amp;ldquo;at the core of the Internet&amp;rsquo;s design.&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The ideal of neutrality bespeaks a network that treats all it carries equally, indifferent to the nature of the content or the identity of the user. In the same spirit as the end-to-end principle, the neutrality principle holds that the big decisions concerning how to use the medium are best left to the “ends” of the network, not the carriers of information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Plus, Wu, in his telling of the downfall of AOL, gives us this paragraph:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The principle of net neutrality, instilled by the Internet’s founders, is ultimately what wrecked AOL Time Warner. And that now iconic wreck, if nothing else, would attest powerfully to the claim that the Internet was at last the great exception, the slayer of the Cycle we have been visiting and revisiting&amp;hellip; In short, to be viable, the firm would have needed to overturn the net neutrality principles at the core of the Internet’s design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which seems to show that the internet at least has some innate defenses against &amp;ldquo;common carriage&amp;rdquo; &amp;ldquo;attacks.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;As I remember, the book doesn&amp;rsquo;t explore other vulnerabilities of the internet in the face of these attacks. So maybe we&amp;rsquo;re all good?&lt;/p&gt;

&lt;h2 id=&#34;code-what-is-it&#34;&gt;Code, What is it?&lt;/h2&gt;

&lt;p&gt;My dad has a section of a bookshelf filled with dusty hardcovers written in 1990s about the capital-I Internet and technology. To a computer-literate know-it-all high schooler they already seemed comically outdated&amp;ndash; likely filled with citations of poorly-executed Harvard Business School studies of Microsoft and maybe MySpace.&lt;/p&gt;

&lt;p&gt;However after devouring a couple books about the internet, some of which written more than a decade ago (&lt;a href=&#34;https://sts10.github.io/blog/2015/08/02/the-hacker-ethic/&#34;&gt;Hackers&lt;/a&gt;, &lt;a href=&#34;https://sts10.github.io/blog/2015/08/04/where-wizards-stay-up-late/&#34;&gt;Wizards&lt;/a&gt;, &lt;a href=&#34;https://sts10.github.io/blog/2015/09/14/bell-labs-the-idea-factory/&#34;&gt;A History of Bell Labs&lt;/a&gt;), I gave the shelf another glance during a recent trip to my folks&amp;rsquo; place. One author&amp;rsquo;s name caught my eye right away: Lawrence Lessig. Lessig, most recently a presidential candidate this year, is a law professor at Harvard and an outspoken advocate for campaign finance reform, among other issues. I knew of him mostly through his work with Aaron Swartz on &lt;a href=&#34;https://en.wikipedia.org/wiki/Creative_Commons&#34;&gt;Creative Commons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The book, called &lt;em&gt;Code and Other Laws of Cyberspace&lt;/em&gt;, was written in 1999, though Lessig published an updated second edition of the book in 2006 called &lt;a href=&#34;https://www.amazon.com/Code-Other-Laws-Cyberspace-Version/dp/0465039146/ref=sr_1_1?ie=UTF8&amp;amp;qid=1470604763&amp;amp;sr=8-1&amp;amp;keywords=lessig+code&#34;&gt;&lt;em&gt;Code: Version 2.0&lt;/em&gt;&lt;/a&gt; (which is the edition I ended up reading on my Kindle, though it&amp;rsquo;s also freely &lt;a href=&#34;http://codev2.cc/download+remix/Lessig-Codev2.pdf&#34;&gt;available as a PDF&lt;/a&gt;). Basically, it&amp;rsquo;s an investigation of the question of whether the internet can be regulated, but it wanders into some other interesting territory too.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to organize my writing about the book into what I think are the most interesting concepts Lessig explores in the book.&lt;/p&gt;

&lt;h2 id=&#34;regulating-the-internet&#34;&gt;Regulating the Internet&lt;/h2&gt;

&lt;p&gt;First, to give you a taste, here&amp;rsquo;s how he starts his thesis that the internet is indeed able to be regulated (&amp;ldquo;regulable&amp;rdquo;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If there was a meme that ruled talk about cyberspace, it was that cyberspace was a place that could not be regulated. That it “cannot be governed”; that its “nature” is to resist regulation. Not that cyberspace cannot be broken, or that government cannot shut it down. But if cyberspace exists, so first-generation thinking goes, government ’s power over behavior there is quite limited. In its essence, cyberspace is a space of no control.
Nature. Essence. Innate. The way things are. This kind of rhetoric should raise suspicions in any context. It should especially raise suspicion here. If there is any place where nature has no rule, it is in cyberspace. If there is any place that is constructed, cyberspace is it. Yet the rhetoric of “essence” hides this constructedness. It misleads our intuitions in dangerous ways.
This is the fallacy of “is-ism”—the mistake of confusing how something is with how it must be. There is certainly a way that cyberspace is. But how cyberspace is is not how cyberspace has to be. There is no single way that the Net has to be; no single architecture that defines the nature of the Net. The possible architectures of something that we would call “the Net” are many, and the character of life within those different architectures is diverse.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lessig then discusses what regulation is more generally and what he describes as the four major tools of regulation: law, social norms, the market, and architecture (or code). These are the tools an entity (like the government) could use to change some behavior (of its citizens). For example if the government wanted to decrease the numbers of cigarette smokers, it might pass a law directly regulating cigarette advertising and/or the sale of cigarettes to minors (law), or it might tax cigarettes (market), or it might spend money on an ad campaign to change the social norms around smoking (social norms), or it may introduce areas where smoking is explicitly banned (law and architecture).&lt;/p&gt;

&lt;p&gt;This four-part theory is apparently &amp;ldquo;sometimes called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pathetic_dot_theory&#34;&gt;&amp;lsquo;pathetic dot theory&amp;rsquo;&lt;/a&gt;, after the &amp;lsquo;dot&amp;rsquo; that is constrained by these regulators.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/8/87/Pathetic_dot_theory.png&#34; alt=&#34;the pathetic dot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Architecture was the strangest one for me. Wikipedia quotes Lessig explaining it as: &amp;ldquo;&amp;lsquo;features of the world, whether made, or found&amp;rsquo;; noting that facts like biology, geography, technology and others constrain our actions.&amp;rdquo; An example: When cars couldn&amp;rsquo;t go that fast, we didn&amp;rsquo;t see a need to regulate driving speeds.&lt;/p&gt;

&lt;p&gt;The twist Lessig gets to explain is that, for the internet&amp;rsquo;s purposes, architecture is basically computer code written by engineers and developers.&lt;/p&gt;

&lt;p&gt;Before reading Lessig, if I had to give a single answer as to why the internet is special in regards to Wu&amp;rsquo;s Cycle or resistant in the face of it, it might be something about code. The government&amp;rsquo;s inability to regulate the internet directly with laws or indirectly by affecting the market or social norms have generally failed due to the nature of architecture (code) of the internet. The biggest example of this, as Lessig observes, is how governments are still struggling to cope with the slippery nature of geography and the internet. What happens when a user living in a state that bans gambling accesses a site hosted on a server that is in a state that allows gambling?&lt;/p&gt;

&lt;p&gt;But since 2006, governments have gained an increased ability to regulate by geographic area on the internet. For example, thanks to what I believe we would correctly say are changes to the &amp;ldquo;code&amp;rdquo; (in Lessig&amp;rsquo;s sense) of the internet, Netflix is able to release a movie to stream in Canada but not in the U.S. (Though note that it is still relatively easy to bypass by Googling for programs [more code] that allow users to get around this artificial geographic hurdle.) As we&amp;rsquo;ll see, for Lessig, code cuts both ways. In the early days of the internet it helped provide a new sense of freedom, but as the internet matures ( * ominous music * ) it gives government and business awesome new powers to monitor, search, and control behavior.&lt;/p&gt;

&lt;p&gt;And yes, I did switch Netflix for the government here, but Lessig builds this bridge for us: &amp;ldquo;Technologies that make commerce more efficient are also technologies that make regulation simpler.&amp;rdquo; And as we saw in &lt;em&gt;The Master Switch&lt;/em&gt;, big business and government often find themselves allies in working to &amp;ldquo;close&amp;rdquo; information technologies.&lt;/p&gt;

&lt;h2 id=&#34;latent-ambiguities&#34;&gt;Latent Ambiguities&lt;/h2&gt;

&lt;p&gt;A more concrete idea that in Lessig&amp;rsquo;s book that I thought was very powerful was that of latent ambiguities. Lessig explains the concept by telling a story about a hypothetical computer &amp;ldquo;worm&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A “worm” is a bit of computer code that is spit out on the Net and works its way into the systems of vulnerable computers. It is not a “virus” because it doesn’t attach itself to other programs and interfere with their operation. It is just a bit of extra code that does what the code writer says. The code could be harmless and simply sit on someone’s machine. Or it could be harmful and corrupt files or do other damage that its author commands.&lt;/p&gt;

&lt;p&gt;Imagine a worm designed to do good (at least in the minds of some). Imagine that the code writer is the FBI and that the FBI is looking for a particular document belonging to the National Security Agency (NSA). Suppose that this document is classified and illegal to possess without the proper clearance. Imagine that the worm propagates itself on the Net, finding its way onto hard disks wherever it can. Once on a computer’s hard disk, it scans the entire disk. If it finds the NSA document, it sends a message back to the FBI saying as much. If it doesn’t, it erases itself. Finally, assume that it can do all this without “interfering” with the operation of the machine. No one would know it was there; it would report back nothing except that the NSA document was on the hard disk. Is this an unconstitutional worm?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He then flags this as a pretty obvious violation of the Fourth Amendment, which protects &amp;ldquo;against unreasonable searches and seizures,&amp;rdquo; which was inspired by searches conducted by the British Army before and during the Revolutionary War. But then Lessig wonders:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But is the worm really the same as the King’s general search? One important difference is this: Unlike the victims of the general searches that the Framers of our Constitution were concerned about, the computer user never knows that his or her disk is being searched by the worm. With the general search, the police were breaking into a house and rummaging through private stuff. With the worm, it is a bit of computer code that does the breaking, and (I’ve assumed) it can “see” only one thing. And perhaps more importantly, unlike the general search, the worm learns little and leaves no damage after it’s finished: The code can’t read private letters; it doesn’t break down doors; it doesn’t interfere with ordinary life.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, did the original Fourth Amendment protect citizens against the inconvenience and indignity of a search (which in the 1780s involved physically searching ones home or person) or did it protect a more idealized sense of privacy? At the time of the writing of the Amendment it didn&amp;rsquo;t much matter, as there was no difference. But given the progress of technology (or change in context), we are forced to make a choice. Thus this is a latent ambiguity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the original context, the rule was clear (no generalized search), but in the current context, the rule depends upon which value the Constitution was meant to protect. The question is now ambiguous between (at least) two different answers. Either answer is possible, depending upon the value, so now we must choose one or the other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lessig then gives us this nice summary line:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When the ability to search without burden increases, does the government&amp;rsquo;s power to search increase as well? Or, more darkly, as James Boyle puts it: “Is freedom inversely related to the efficiency of the available means of surveillance?” For if it is, as Boyle puts it, then “we have much to fear.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my mind the idea is that the Constitution and the Bill of Rights were written in a very different time in terms of technology. For some sections of the documents&amp;ndash; the three branches of government, states&amp;rsquo; rights, etc.&amp;ndash; that&amp;rsquo;s all fine and good. But for issues of privacy and copyright at least, things have gotten a bit screwy in that if the law stays static as technology progresses, the values at the heart of the law risk being distorted. Sometimes the laws only need to be updated in such a way that they are &amp;ldquo;translated&amp;rdquo; to new technologies, but other times judges and lawmakers are faced with a real latent ambiguity, which requires a genuine value judgment be made given the new technological circumstances. We are forced to ask &amp;ldquo;What were the founders thinking?&amp;rdquo; or &amp;ldquo;What was the intention&amp;rdquo; of a given section of the law.&lt;/p&gt;

&lt;p&gt;I think the connections between the fear that Boyle refers to and the recent Snowden revelations about the data-collecting programs of the NSA (which of course weren&amp;rsquo;t disclosed when Lessig published the second edition of the book) are obvious here.&lt;/p&gt;

&lt;h2 id=&#34;wiretapping-as-a-latent-ambiguity&#34;&gt;Wiretapping as a Latent Ambiguity&lt;/h2&gt;

&lt;p&gt;To further illustrate the point, he also gives a nice tour of the issues involved in a famous wire-tapping case, &lt;a href=&#34;https://en.wikipedia.org/wiki/Olmstead_v._United_States&#34;&gt;&lt;em&gt;Olmstead v. United States&lt;/em&gt;&lt;/a&gt;, and the case that later overturned it, &lt;a href=&#34;https://en.wikipedia.org/wiki/Katz_v._United_States&#34;&gt;&lt;em&gt;Katz v. United States&lt;/em&gt;&lt;/a&gt;. Lessig&amp;rsquo;s walkthough of this is really good, but I&amp;rsquo;ll try to summarize.&lt;/p&gt;

&lt;p&gt;Basically, in &lt;em&gt;Olmstead&lt;/em&gt;, the government was found to be able to wiretap suspects without a warrant because the intrusion was on government property (phone lines), not the suspect&amp;rsquo;s personal property. Indeed up until &lt;em&gt;Katz&lt;/em&gt; the Fourth Amendment was backed up by trespass laws&amp;ndash; that was one&amp;rsquo;s redress if your rights had been violated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To make sense of the amendment, we must go back to its framing. At that time, the legal protection against the invasion of privacy was trespass law. If someone entered your property and rifled through your stuff, that person violated your common law rights against trespass. You could sue that person for trespass, whether he was a police officer or private citizen. The threat of such suits gave the police an incentive not to invade your privacy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is that tapping a phone need not involve trespassing if the tap was inserted on public or government property.&lt;/p&gt;

&lt;p&gt;Years later this ruling was overturned in &lt;em&gt;Katz&lt;/em&gt;, following a new dictum that the Fourth Amendment “protects people, not places”:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In that decision, &lt;em&gt;Katz v. United States&lt;/em&gt;, the Supreme Court finally repudiated Olmstead and the many decisions that had relied upon it, reasoning that, given the role of electronic telecommunications in modern life, the [First Amendment] purposes of protecting free speech as well as the [Fourth Amendment] purposes of protecting privacy require treating as a “search” any invasion of a person’s confidential telephone communications, with or without physical trespass.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The latent ambiguity was created by the popularity of telephones.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When telephones came along, however, this protection changed. A lot of private information was put out across the phone lines. Now, if tapping was not trespass, much less of private life was protected from government snooping. Rather than 90 percent being protected by the amendment, only 50 percent was protected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;copyright&#34;&gt;Copyright&lt;/h2&gt;

&lt;p&gt;Lessig says that the internet has produced a loss of control with both copyright and privacy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;with copyright, because the technology enables perfect and free copies of content; with privacy, as we’ll see in this chapter, because the technology enables perpetual and cheap monitoring of behavior&amp;hellip;&lt;/p&gt;

&lt;p&gt;The big difference between copyright and privacy, however, is the political economy that seeks a solution to each problem. With copyright, the interests threatened are powerful and well organized; with privacy, the interests threatened are diffuse and disorganized.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lessig, a co-founder of &lt;a href=&#34;https://en.wikipedia.org/wiki/Creative_Commons&#34;&gt;Creative Commons&lt;/a&gt;, cares about the future of copyright. His sections on copyright in &lt;em&gt;Code&lt;/em&gt; posit that eventually, as the internet inevitably becomes more regulatable and thus regulated, businesses will gain more and more control over how and when and by who copyrighted material is consumed. The example here is that when everything is digital and connected, record companies can charge by plays or publishers can charge you to lend the book to a friend (think iTunes DRM and Amazon Kindle). I thought this was the best example of code eventually cutting &lt;em&gt;against&lt;/em&gt; the freedom of the early web.&lt;/p&gt;

&lt;p&gt;He also notes that, as the technology of monitoring copyright infractions becomes more efficient and cheap, it will be tempting for copyright holders to become more strict about things like fair use and the expiration of copyrights. This could present a latent ambiguity in copyright law:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have never had to choose whether authors should be permitted perfectly to control the use of their intellectual property independent of the law, for such control was not possible. The balance struck by the law was the best that authors could get. But now, code gives authors a better deal.&lt;/p&gt;

&lt;p&gt;There has always been a set of uses of copyrighted work that was unregulated by the law of copyright. Even within the boundary of uses that were regulated by the law of copyright, “fair use” kept some uses free. The core question is why? Were these transactions left free because it was too costly to meter them? Or were these transactions left free because keeping them free was an important public value tied to copyright?&lt;/p&gt;

&lt;p&gt;This is a question the law never had to resolve, though there is support for both views. Now the technology forces us to resolve it. The question, then, is how.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;privacy-and-p3p&#34;&gt;Privacy and P3P&lt;/h2&gt;

&lt;p&gt;Clearly related to this idea of control on the internet is privacy. One concept on privacy that he mentions that particularly sparked my interest was a now-defunct idea he presents for helping take back control of user privacy on the web, called &lt;a href=&#34;https://en.wikipedia.org/wiki/P3P&#34;&gt;&amp;ldquo;Platform for Privacy&amp;rdquo; or P3P&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A second PET [privacy enhancing technology] to enable greater control over the use of data would be a protocol called the Platform for Privacy Preferences (or P3P for short). P3P would enable a machine-readable expression of the privacy preferences of an individual. It would enable an automatic way for an individual to recognize when a site does not comply with his privacy preferences. If you surf to a site that expresses its privacy policy using P3P, and its policy is inconsistent with your preferences, then depending upon the implementation, either the site or you are made aware of the problem created by this conflict&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Lessig observes, this solution, which I immediately imagined manifesting for users in a browser extension, would require terms of services for websites and web apps be available to users in a machine-readable format, rather than solely being presented as walls of text that users simply agree to without reading.&lt;/p&gt;

&lt;p&gt;This obviously requires action and adoption on the part of websites (namely making their terms and services more machine-readable and perhaps adapting them to more of a standard), which could be coerced or convinced into doing this by any of the four tools of regulation mentioned above, but I assume this project has reached a standstill partially due to this rather large roadblock. Though you&amp;rsquo;d think privacy-minded sites like Reddit, etc. could start picking at it?&lt;/p&gt;

&lt;h2 id=&#34;a-fear-of-perfection-in-defense-of-messiness&#34;&gt;A Fear of Perfection, In Defense of Messiness&lt;/h2&gt;

&lt;p&gt;Early on in &lt;em&gt;Code&lt;/em&gt;, Lessig asks:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What does it mean to live in a world where problems can be coded away? And when, in that world, should we code problems away, rather than learn to work them out, or punish those who cause them?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The comment comes among a discussion about the then-popular game &amp;ldquo;Second Life,&amp;rdquo; where community disputes about the yards of neighbors and digital pet dogs eating poisonous flowers could very realistically be coded away. But it seems to me&amp;ndash; and maybe Lessig doesn&amp;rsquo;t make this jump&amp;ndash; that increasing we live in a world that more and more problems can be &amp;ldquo;coded away&amp;rdquo; rather than solved by messy-but-good processes like debate, consensus, and finally either the adoption of new social norms or the passing of new laws.&lt;/p&gt;

&lt;p&gt;Should control of copyright be absolute? And before you answer as you might have in 1780, know that this is every year becoming more and more possible. And as for privacy&amp;ndash; what of its increasing latent ambiguities as more of our lives are lived and recorded by digital technologies that are becoming more and more centralized?&lt;/p&gt;

&lt;p&gt;In regard to the centralization of the internet (and we might say technology in general), we can return to &lt;a href=&#34;https://newrepublic.com/article/133889/reboot-world&#34;&gt;Paul Ford&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There&amp;rsquo;s an obvious connection between a decentralized internet, in which individuals create and oversee their own digital identities, and a functioning democracy, in which we make informed choices about who rules us and how we are ruled. Yet too few people make that link. We live in a world in which sensitive information of every conceivable sort—financial, sexual, medical, legal, familial, governmental—is now kept, and presumably guarded, online. It&amp;rsquo;s guarded in gigantic treasure chests labeled “important data here.” So many plums for hackers to pluck.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t take care of yourself online, someone else will. That someone is likely not a peer but a megacorporation that is tracking and selling your preferences in a silent auction, a government surveilling your movements and religious affiliations, or a hacker collective that feels entitled to publish your sexual indelicacies. That someone probably already is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ford&amp;ndash; for me, a modern stalwart of the old, decentralized, messy web (see &lt;a href=&#34;https://medium.com/message/tilde-club-i-had-a-couple-drinks-and-woke-up-with-1-000-nerds-a8904f0a2ebf#.8b5zw4wdz&#34;&gt;Tilde Club&lt;/a&gt;)&amp;ndash; offers a more up-to-date articulation of the &amp;ldquo;keep the web weird&amp;rdquo; (or, at least &amp;ldquo;remember the weird web in your hearts, designers and coders&amp;rdquo;) position.&lt;/p&gt;

&lt;p&gt;Should the web/technology be &lt;em&gt;easy&lt;/em&gt;? Is a more regulable web &lt;em&gt;easier&lt;/em&gt; to use? Do most people just want to send text messaged and look at Chartbeat?&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;.&lt;a href=&#34;https://twitter.com/ftrain&#34;&gt;@ftrain&lt;/a&gt; wrote about open-source geo &lt;a href=&#34;https://t.co/yQtldH7oiz&#34;&gt;https://t.co/yQtldH7oiz&lt;/a&gt; &lt;a href=&#34;https://t.co/5o4Cg1dHRX&#34;&gt;pic.twitter.com/5o4Cg1dHRX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sam Schlinkert (@sts10) &lt;a href=&#34;https://twitter.com/sts10/status/741055308798300161&#34;&gt;June 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Messy means set up time, changing defaults, managing incompatibilities, and overcoming medium learning curves. Messy means harder to use, harder to find, harder to monitor (decentralized).&lt;/p&gt;

&lt;p&gt;In Mary H.K. Choi&amp;rsquo;s piece &lt;a href=&#34;http://www.wired.com/2016/08/how-teens-use-social-media/&#34;&gt;&amp;ldquo;LIKE. FLIRT. GHOST: A JOURNEY INTO THE SOCIAL MEDIA LIVES OF TEENS&amp;rdquo;&lt;/a&gt; in &lt;em&gt;Wired&lt;/em&gt; there&amp;rsquo;s a line describing one teen, a 15-year-old named Ubakim: &amp;ldquo;Ubakum loves her phone. Deeply. iPhones for her are too easy, a little basic. &amp;lsquo;I&amp;rsquo;m not a fan of user-friendliness.&amp;rsquo;&amp;rdquo; User-friendliness as basic, from the mouth of a user of a prophetic age nonetheless.&lt;/p&gt;

&lt;p&gt;The next thing I&amp;rsquo;m trying to understand in regard to where the web has been and where it&amp;rsquo;s going is privacy and security. From &lt;a href=&#34;https://twitter.com/SwiftOnSecurity&#34;&gt;@SwiftonSecurity&lt;/a&gt; I found &lt;a href=&#34;http://exple.tive.org/blarg/2016/08/29/free-as-in-health-care/&#34;&gt;this blog post called &amp;ldquo;Free As In Health Care&amp;rdquo;&lt;/a&gt; by Mike Hoye. I&amp;rsquo;m still trying to understand it, but I think it gets at some important ideas. For example one idea, maybe summarized by this bit:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Right now the tech sector is roughly where the automotive sector was in the late fifties. You almost certainly know or know of somebody on Twitter having a very 1959 Bel-Air Frontal-Offset Collision experience right now, and the time for us to stop blaming the driver for that is long past.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;seems to imply that the closed, organized &amp;ldquo;web&amp;rdquo; that is Twitter doesn&amp;rsquo;t even have all of the benefits that we were supposedly trading in the open web for, namely safety or freedom from harassment, etc.&lt;/p&gt;

&lt;p&gt;Interestingly, when it comes to security issues like encryption, innovators like Moxie Marlinspike (&lt;a href=&#34;https://www.wired.com/2016/07/meet-moxie-marlinspike-anarchist-bringing-encryption-us/&#34;&gt;recent &lt;em&gt;Wired&lt;/em&gt; profile&lt;/a&gt;) are focused on making encrypted messaging &lt;em&gt;easier&lt;/em&gt;, so easy that it&amp;rsquo;s seamless, in order, I&amp;rsquo;m assuming, to get it used by the most number of users as possible. (In fact, it was recently &lt;a href=&#34;http://www.vanityfair.com/news/2016/08/how-the-clinton-campaign-is-foiling-the-kremlin&#34;&gt;reported Hillary Clinton campaign staffers have been instructed to use Marlinspike&amp;rsquo;s &amp;ldquo;Snowden-approved&amp;rdquo; app Signal when discussing Donald Trump&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Though there seems to be some push back from some in the secure messaging community that relates to our discussion. In &lt;a href=&#34;https://github.com/LibreSignal/LibreSignal/issues/37#issuecomment-217211165&#34;&gt;this long back-and-forth on a GitHub issue between Marlinspike and a developer of an app called LibreSignal&lt;/a&gt; I think we get a taste of this.&lt;/p&gt;

&lt;p&gt;One user, criticizing Marlinspike&amp;rsquo;s Signal app of having a security flaw due to a connection with Google Play, and advocating for a solution that is arguably more secure but more difficult to setup/use, &lt;a href=&#34;https://github.com/LibreSignal/LibreSignal/issues/37#issuecomment-217633128&#34;&gt;writes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Of course it&amp;rsquo;s a bit complicated. But that&amp;rsquo;s what people who want communications security are able to put up with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Marlinspike &lt;a href=&#34;https://github.com/LibreSignal/LibreSignal/issues/37#issuecomment-217661076&#34;&gt;responds&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you define &amp;ldquo;people who want communications security&amp;rdquo; as cryptonerds and free software moralists, then sure. But all the dissidents, activists, NGOs, and journalists that I&amp;rsquo;ve met are not willing to put up with that. It&amp;rsquo;s why they use Signal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perhaps sometimes, a bit of pragmatism is required. (For more on the issues surrounding usability in secure communication, I learned more from Martin&amp;rsquo;s Shelton&amp;rsquo;s thesis &amp;ldquo;Role of corporate and government surveillance in journalists&amp;rsquo; infosec practices.&amp;rdquo; &lt;a href=&#34;https://twitter.com/mshelton/status/676459334369329153&#34;&gt;Tweet&lt;/a&gt;, &lt;a href=&#34;https://mshelt.onl/p/shelton_2015.pdf&#34;&gt;PDF&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;a-closing-note-on-elegant-not-messy-code&#34;&gt;A Closing Note On Elegant, Not Messy Code&lt;/h2&gt;

&lt;p&gt;For me, agreeing with Lessig and Ford&amp;rsquo;s argument in favor of messiness seemed strangely at odds with an idea &lt;a href=&#34;https://sts10.github.io/blog/2015/08/02/the-hacker-ethic/&#34;&gt;I saw articulated in &lt;em&gt;Hackers&lt;/em&gt; by Steven Levy&lt;/a&gt;, namely the idea of hackers searching for what I at least called an &amp;ldquo;elegant solution.&amp;rdquo; I&amp;rsquo;ve certainly observed how bad-for-everyone messy code can be. It can stifle innovation where &amp;ldquo;clean,&amp;rdquo; elegant code can not only allow innovation, but it can inspire it.&lt;/p&gt;

&lt;p&gt;But I think it&amp;rsquo;s possible to see a real difference between a cleverly-written JavaScript function that can be re-used elsewhere and the controlling systems made possible by restrictive software licenses and the pervasiveness of internet trackers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>True (HEX) Colors in Vim with iTerm2 3.0.1</title>
      <link>http://example.org/post/2016-06-14-true-hex-colors-in-vim-with-iterm2/</link>
      <pubDate>Tue, 14 Jun 2016 20:59:32 -0400</pubDate>
      
      <guid>http://example.org/post/2016-06-14-true-hex-colors-in-vim-with-iterm2/</guid>
      <description>

&lt;p&gt;Last fall I was delighted to figure out &lt;a href=&#34;http://sts10.github.io/blog/2015/10/24/true-hex-colors-with-neovim-and-iterm2/&#34;&gt;how to get true HEX colors with Neovim and iTerm2&lt;/a&gt;. However I have recently learned that you can have these same colors available in regular old terminal Vim (aka command line Vim) and iTerm2.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;In April Vim merged &lt;a href=&#34;https://groups.google.com/forum/#!topic/vim_dev/mAhjlVqpKts&#34;&gt;patch 7.4.1799, which appears to simplify settings for using true colors in the terminal&lt;/a&gt;. After upgrading to this patch, users simply had to include &lt;code&gt;set termguicolors&lt;/code&gt; in their vimrc to get true colors in the terminal&amp;ndash; the one caveat being that it has to be a terminal like iTerm2 that also supports &amp;ldquo;true colors&amp;rdquo;. &lt;a href=&#34;https://gist.github.com/XVilka/8346728#now-supporting-truecolour&#34;&gt;Here&amp;rsquo;s a list of other terminal emulators that support &amp;ldquo;truecolor&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To be honest it&amp;rsquo;s unclear to me if users could get true colors in the terminal before this Vim patch was applied. But I do know that in Vim 7.4.1799 and above, the setting (when used with recent versions of iTerm2) gave me true colors running regular Vim (as opposed to Neovim) in iTerm2, something that I had previously thought only possible using either MacVim or Neovim+iTerm2.&lt;/p&gt;

&lt;h2 id=&#34;how-to-get-true-colors-with-regular-terminal-vim-and-iterm2&#34;&gt;How To Get True Colors with Regular Terminal Vim and iTerm2&lt;/h2&gt;

&lt;p&gt;Anyway, if you only ever use iTerm2 and never OS X&amp;rsquo;s Terminal app and want true colors in regular Vim:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://iterm2.com/downloads.html&#34;&gt;Upgrade to the confusingly-named iTerm2 3.0.4&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If necessary, upgrade your terminal Vim to 7.4.1799 or higher (&lt;a href=&#34;https://github.com/sts10/terminal_and_vim_settings#flavors-of-vim&#34;&gt;I recommend using Homebrew to do this&lt;/a&gt;, though I&amp;rsquo;m not totally confident that this method is without downsides)&lt;/li&gt;
&lt;li&gt;Put &lt;code&gt;set termguicolors&lt;/code&gt; in your vimrc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you only want to run this setting when using iTerm, wrap it in this nifty if statement that &lt;a href=&#34;https://twitter.com/chrislesage&#34;&gt;Chris Lesage&lt;/a&gt; was nice enough to &lt;a href=&#34;http://sts10.github.io/blog/2015/10/24/true-hex-colors-with-neovim-and-iterm2/#comment-2632598645&#34;&gt;leave in a comment&lt;/a&gt; on my previous blog post:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; gui colors if running iTerm
if $TERM_PROGRAM =~ &amp;quot;iTerm&amp;quot;
  set termguicolors
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above 3 lines are what I now use in my vimrc. The advantage of using the if statement is that if you do use your vimrc in OS X&amp;rsquo;s Terminal app, your colors are at least readable, rather than totally messed up if you do execute &lt;code&gt;set termguicolors&lt;/code&gt; without your terminal supporting guicolors.&lt;/p&gt;

&lt;h2 id=&#34;macvim-vs-terminal-vim&#34;&gt;MacVim vs. terminal Vim&lt;/h2&gt;

&lt;p&gt;Now that I can get true colors on a fresh machine by simply installing iTerm2 and a fresh version of terminal Vim, I&amp;rsquo;m tempted to revisit an old question of whether to prefer a GUI version of Vim like &lt;a href=&#34;https://github.com/macvim-dev/macvim/releases/&#34;&gt;MacVim&lt;/a&gt; or terminal Vim. To me there seem to be real advantages and disadvantages to both approaches, as seen by the &lt;a href=&#34;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=vim%20gui%20or%20terminal&#34;&gt;healthy amount discussion of this question on the internet&lt;/a&gt;. My approach these days is to stay comfortable in both, though I will say that as I use either version more, I am (a) using the mouse less and (b) growing more comfortable with my Vim mappings that deal with the system clipboard in relatively predictable ways.&lt;/p&gt;

&lt;h2 id=&#34;what-about-neovim&#34;&gt;What about Neovim&lt;/h2&gt;

&lt;p&gt;A month after the Vim patch, &lt;a href=&#34;https://github.com/neovim/neovim/pull/4690&#34;&gt;Neovim merged patch 7.4.1799&lt;/a&gt;, following the new &lt;code&gt;set termguicolors&lt;/code&gt; name for the setting. In other words, the same setting will work if you&amp;rsquo;re running Neovim and iTerm2. No need to use an &lt;code&gt;if has(&amp;quot;nvim&amp;quot;)&lt;/code&gt; statement for different settings to get true colors.&lt;/p&gt;

&lt;h2 id=&#34;the-last-frontier&#34;&gt;The Last Frontier&lt;/h2&gt;

&lt;p&gt;As you may have gathered, I have yet to figure out how to get true colors in terminal Vim &lt;em&gt;when using OS X&amp;rsquo;s default Terminal app&lt;/em&gt; (as opposed to iTerm2). Hopefully that makes sense. If you know how to do this, leave a comment! Perhaps it&amp;rsquo;s a matter of me updating my Terminal application, which is 2.5.3 (343.7).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Boy Who Could Change the World</title>
      <link>http://example.org/post/2016-05-25-the-boy-who-could-change-the-world/</link>
      <pubDate>Wed, 25 May 2016 22:37:36 -0400</pubDate>
      
      <guid>http://example.org/post/2016-05-25-the-boy-who-could-change-the-world/</guid>
      <description>&lt;p&gt;I hadn&amp;rsquo;t heard of Aaron Swartz until his suicide in January of 2013. Soon after, I hungrily read the news and remembrances I could about the young man (enough so that I ended up writing &lt;a href=&#34;http://www.thedailybeast.com/articles/2013/01/13/mourning-aaron-swartz-internet-activist-and-free-information-advocate.html&#34;&gt;a short note on those mourning him for The Daily Beast&lt;/a&gt;). At the time I thought (and still do, I suppose) that &lt;a href=&#34;http://www.newyorker.com/magazine/2013/03/11/requiem-for-a-dream&#34;&gt;this &lt;em&gt;New Yorker&lt;/em&gt; piece by Larissa MacFarquhar&lt;/a&gt; was the best. In general I was interested in Swartz&amp;rsquo;s beliefs and his work, both technical and political, but from MacFarquhar&amp;rsquo;s piece I particularly remember her focus on how Swartz, at least at times, felt like an imposition on his friends and the world at large:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This, I suppose, is the actual problem: I feel my existence is an imposition on the planet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s from one of his &lt;a href=&#34;http://www.aaronsw.com/weblog/imposition&#34;&gt;blog post from 2007, URL slug: &amp;ldquo;imposition&amp;rdquo;&lt;/a&gt;. MacFarquhar adds: &amp;ldquo;He meant that literally. In one of the apartments he shared, he slept in a closet.&amp;rdquo;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It was with this multi-faceted interest in Swartz that I purchased and read &lt;a href=&#34;http://www.amazon.com/Boy-Who-Could-Change-World/dp/162097066X/ref=sr_1_fkmr0_1?ie=UTF8&amp;amp;qid=1464231646&amp;amp;sr=8-1-fkmr0&amp;amp;keywords=the+boy+who+could+save+the+world+aaron+swartz&#34;&gt;&lt;em&gt;The Boy Who Could Change the World: The Writings of Aaron Swartz&lt;/em&gt;&lt;/a&gt;, a collection of Swartz&amp;rsquo;s writings and speeches released as book this past winter. It felt slightly silly spending money to buy words that were already available on the internet, written by a man who adamantly believed information should be free, but I know I read physical books better, plus the volume is a selection, chosen by editors and organized not chronologically, but by subject.&lt;/p&gt;

&lt;p&gt;A number of the posts published in the book struck me, but the first one that really got me thinking was this short one called &lt;a href=&#34;http://www.aaronsw.com/weblog/001025&#34;&gt;Postel&amp;rsquo;s Law Has No Exceptions&lt;/a&gt;. In it, Swartz paraphrases this law, apparently also known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Robustness_principle&#34;&gt;the robustness principle&lt;/a&gt;, as saying &amp;ldquo;&amp;lsquo;be liberal in what you accept and conservative in what you put out&amp;rsquo; or something to that effect.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;When I was reading this post in the book for the first time, I hadn&amp;rsquo;t heard of &lt;a href=&#34;https://en.wikipedia.org/wiki/Jon_Postel&#34;&gt;Jon Postel&lt;/a&gt;. I didn&amp;rsquo;t yet know that he was an internet pioneer, known for &amp;ldquo;being the Editor of the Request for Comment (RFC) document series&amp;rdquo; (Wikipedia), documents that I actually had read about in &lt;a href=&#34;http://sts10.github.io/blog/2015/08/04/where-wizards-stay-up-late/&#34;&gt;&lt;em&gt;Where Wizards Stay Up Late&lt;/em&gt;&lt;/a&gt; not long ago. In fact when I read Swartz&amp;rsquo;s blog post I assumed he was some philosopher. And I further assumed that, considering what I knew about Swartz&amp;rsquo;s flirtation with the idea that he was an imposition on the world, given the second half of his summary of the law&amp;ndash; &amp;ldquo;[be] conservative in what you put out&amp;rdquo;&amp;ndash;, I guessed that the blog post would be about living humbly or in an environmentally conscious way. Have an open mind but a small footprint, or something to that effect&amp;ndash; an idea that I don&amp;rsquo;t find offensive or wrongheaded, but would perhaps be problematic as a life mantra psychologically.&lt;/p&gt;

&lt;p&gt;Anyway it quickly becomes clear that this law is an edict for programs or program designers, not human lives, and Swartz is in this case using it to explain the failure of &lt;a href=&#34;https://en.wikipedia.org/wiki/XML&#34;&gt;XML&lt;/a&gt;. As someone who writes simple programs and &lt;a href=&#34;http://sts10.github.io/blog/2015/05/20/url-parameters-as-user-settings/&#34;&gt;wonders about user inputs&lt;/a&gt; this an interesting idea to me too! In this reading programs can be accepting and even empathetic of users. Examples from my work that I can think of include: stripping whitespace for users&amp;rsquo; text inputs, using a natural language parser to accept time inputs, and generally checking for errors and fix them automatically if you can or, failing that, explain the problem and ask the user how to proceed. Then produce something uniform and adaptable every time, with as little opinion as possible (CSVs being the best example I can think of). A wonderful idea that I&amp;rsquo;m glad to have been introduced to.&lt;/p&gt;

&lt;p&gt;Other highlights from the book include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A transcript of this keynote Swartz gave on &lt;a href=&#34;https://www.youtube.com/watch?v=Fgh2dFngFsg&#34;&gt;&amp;ldquo;How we stopped SOPA&amp;rdquo;&lt;/a&gt; (which references &lt;a href=&#34;http://newsweek.tumblr.com/post/16123878603/behold-what-the-stop-sopa-blackout-managed-to&#34;&gt;this chart&lt;/a&gt; that I remember posting to the Newsweek Tumblr at the time):&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/Fgh2dFngFsg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aaronsw.com/weblog/smalltalkq&#34;&gt;A wonderful little post on making small talk&lt;/a&gt; (not &lt;a href=&#34;https://en.wikipedia.org/wiki/Smalltalk&#34;&gt;the programming language&lt;/a&gt;) that reminded me of &lt;a href=&#34;https://medium.com/message/how-to-be-polite-9bf1e69e888c#.fxz22c7f4&#34;&gt;Paul Ford&amp;rsquo;s &amp;ldquo;How to Be Polite&amp;rdquo;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aaronsw.com/weblog/rlrr&#34;&gt;Release Late, Release Rarely&lt;/a&gt;&amp;ndash; an idea that is contrary to the still-in-vogue &amp;ldquo;move fast and break things&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aaronsw.com/weblog/rlrr&#34;&gt;Bake Don&amp;rsquo;t Fry&lt;/a&gt; (from 2002!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aaronsw.com/weblog/usefultransparency&#34;&gt;When Is Transparency Useful?&lt;/a&gt;&amp;ndash; An interesting media critique arguing in which Swartz argues that, while there is a temptation for journalists in a digital age to simply present once-hidden or unavailable data in an easy-to-search way on the internet, this is not enough.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.morganclaypool.com/doi/pdf/10.2200/S00481ED1V01Y201302WBE005&#34;&gt;A Programmable Web&lt;/a&gt;&amp;ndash; The book I read contains an excerpt from this apparently unfinished textbook that Swartz had been working on at some point.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an epilogue the book presents &lt;a href=&#34;http://www.aaronsw.com/weblog/legacy&#34;&gt;this post from 2006 titled &amp;ldquo;Legacy&amp;rdquo;&lt;/a&gt;, which is fitting considering the book is peppered with chapter introductions written by those who worked with Swartz in various fields&amp;ndash; computer, media, politics, etc.&amp;ndash; who almost universally express how much they wish they could still run ideas past Aaron. Swartz&amp;rsquo;s definition of legacy comes in the second graph:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The real question is not what effect your work had, but what things would be like had you never done it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I&amp;rsquo;m also curious what Swartz would think about current issues facing the nation, including the 2016 election, the &lt;a href=&#34;http://www.cnn.com/2016/05/25/politics/texas-lawsuit-barack-obama-transgender/&#34;&gt;transgender bathroom laws&lt;/a&gt;, and the brewing encryption debate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Website Scraped</title>
      <link>http://example.org/post/2016-05-07-website-scraped/</link>
      <pubDate>Sat, 07 May 2016 21:45:31 -0400</pubDate>
      
      <guid>http://example.org/post/2016-05-07-website-scraped/</guid>
      <description>

&lt;p&gt;Earlier this week Alex Balk, a co-founder of &lt;a href=&#34;http://www.theawl.com/&#34;&gt;The Awl&lt;/a&gt;, tweeted:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-cards=&#34;hidden&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Of all the alt-texts that are about to disappear this may be my favorite: &lt;a href=&#34;https://t.co/8HqTCyuXsC&#34;&gt;https://t.co/8HqTCyuXsC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alex Balk (@AlexBalk) &lt;a href=&#34;https://twitter.com/AlexBalk/status/727898415082909696&#34;&gt;May 4, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;For those who don&amp;rsquo;t know, The Awl is &lt;a href=&#34;http://www.theawl.com/about&#34;&gt;&amp;ldquo;the last weblog&amp;rdquo;&lt;/a&gt; on the internet. It was started in 2009 by Balk and Choire Sicha. I started reading it in college&amp;ndash; I remember specifically &lt;a href=&#34;http://www.theawl.com/2009/11/flicked-off-2012-is-awesome-and-haters-can-suck-it&#34;&gt;this review of the movie &lt;em&gt;2012&lt;/em&gt;, titled &amp;ldquo;Flicked Off: &amp;lsquo;2012&amp;rsquo; is Awesome and Haters Can Suck It&amp;rdquo;&lt;/a&gt; gave me a refreshing example of how much fun you could have writing.&lt;/p&gt;

&lt;p&gt;One of the little fun secret things about The Awl is that the writers would often hide text in the alt text of images or links. It didn&amp;rsquo;t take long for &lt;a href=&#34;http://katiebakes.tumblr.com/post/420123402/maybe-this-is-the-internet-equivalent-of-listening&#34;&gt;this &amp;ldquo;secret&amp;rdquo; to be appreciated&lt;/a&gt;, and when I remember to, I place my mouse on images on the site and patiently wait the required number of seconds before the alt text pops up.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;what-is-alt-text&#34;&gt;What is alt text?&lt;/h2&gt;

&lt;p&gt;On images, this text is stored in the &lt;code&gt;alt&lt;/code&gt; attribute of the HTML &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. Here&amp;rsquo;s &lt;a href=&#34;http://www.w3schools.com/tags/att_img_alt.asp&#34;&gt;how w3schools defines the attribute&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The required alt attribute specifies an alternate text for an image, if the image cannot be displayed.&lt;/p&gt;

&lt;p&gt;The alt attribute provides alternative information for an image if a user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Penn State website on accessibly &lt;a href=&#34;http://accessibility.psu.edu/images/imageshtml/&#34;&gt;adds that&lt;/a&gt; &amp;ldquo;The term &amp;ldquo;ALT tag&amp;rdquo; is a common shorthand term used to refer to the ALT attribute within in the IMG tag.&amp;rdquo; Alt text is important enough that &lt;a href=&#34;https://daringfireball.net/projects/markdown/syntax#img&#34;&gt;Markdown allows for it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The w3schools site adds that &amp;ldquo;To create a tooltip for an image, use the &lt;a href=&#34;http://www.w3schools.com/tags/att_global_title.asp&#34;&gt;title attribute&lt;/a&gt;!&amp;rdquo; which &amp;ldquo;specifies extra information about an element.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I was vaguely aware of the distinction between the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags&amp;rsquo; &lt;code&gt;alt&lt;/code&gt; attribute and the more global &lt;code&gt;title&lt;/code&gt; attribute, but given that both &lt;a href=&#34;https://twitter.com/AlexBalk/status/727898415082909696&#34;&gt;Balk&amp;rsquo;s mournful tweet&lt;/a&gt; and &lt;a href=&#34;http://katiebakes.tumblr.com/post/420123402/maybe-this-is-the-internet-equivalent-of-listening&#34;&gt;Bakes&amp;rsquo; 2010 Tumblr post&lt;/a&gt; refer to text stored in the &lt;code&gt;alt&lt;/code&gt; attribute, I proceeded with the assumption that, at least as far as images go, the fun stuff on The Awl was stored there.&lt;/p&gt;

&lt;h2 id=&#34;what-i-tried&#34;&gt;What I tried&lt;/h2&gt;

&lt;p&gt;When I saw Balk&amp;rsquo;s tweet I assumed that, due to some change on the backend of the site, the alt text for images would be somehow removed or deleted. As of this writing the &lt;code&gt;alt&lt;/code&gt; attributes are still there, and I don&amp;rsquo;t know if they&amp;rsquo;ll be deleted or just if a new CMS won&amp;rsquo;t let the authors add them going forward (which seems strange given the progressive nature of the attribute&amp;hellip;). Either way, my assignment was clear: scrape all of the &lt;code&gt;alt&lt;/code&gt; text and store it in some useful way.&lt;/p&gt;

&lt;p&gt;So that night I started looking into ways pull down the data before it was too late(!) At first I tried parsing the RSS/XML feed that the &lt;a href=&#34;https://twitter.com/AwlTags&#34;&gt;AwlTags Twitter bot&lt;/a&gt; &lt;a href=&#34;https://github.com/negatendo/AwlTags/blob/master/bots.rb#L13&#34;&gt;uses&lt;/a&gt; (&lt;a href=&#34;https://github.com/negatendo/AwlTags&#34;&gt;full Github repo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m apparently not great at accessing or parsing XML with Ruby, and I couldn&amp;rsquo;t figure out how to go back more than about 70 posts, but I had some fun:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;your organic masculinity&amp;quot; &lt;a href=&#34;https://t.co/DfuHe4BHqR&#34;&gt;pic.twitter.com/DfuHe4BHqR&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sam Schlinkert (@sts10) &lt;a href=&#34;https://twitter.com/sts10/status/728012398792151040&#34;&gt;May 5, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Then I figured I&amp;rsquo;d pull down every tweet from &lt;a href=&#34;https://twitter.com/awl&#34;&gt;The Awl&amp;rsquo;s Twitter account&lt;/a&gt; and extract the post URLs that way, but turns out you can only go back roughly 3,600 Tweets in a given user&amp;rsquo;s account. Cue the big, red &amp;ldquo;Denied&amp;rdquo; message on the hacker montage that was my Wednesday night.&lt;/p&gt;

&lt;h2 id=&#34;what-i-ended-up-doing&#34;&gt;What I ended up doing&lt;/h2&gt;

&lt;p&gt;So finally I confronted the most-straight forward, but also dirtier solution of scraping the site directly using &lt;a href=&#34;https://github.com/sparklemotion/nokogiri&#34;&gt;Nokogiri&lt;/a&gt;. This ended up working great&amp;ndash; &lt;a href=&#34;https://github.com/sts10/awl_alt_scraper&#34;&gt;here&amp;rsquo;s my Github repo&lt;/a&gt;. The Awl&amp;rsquo;s pagination is nice and simple (perhaps a Wordpress standard?): the URL for 3 pages back is simply &lt;code&gt;http://theawl.com/page/3&lt;/code&gt;. With some guessing and checking I found that the blog, as of when I ran the scraper, went back to &lt;a href=&#34;http://www.theawl.com/page/2707&#34;&gt;page 2707&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically the code visits each page, pulls the desired code for each of posts it finds on that page, and pushes the &lt;code&gt;post_url&lt;/code&gt;, &lt;code&gt;image_src&lt;/code&gt;, and &lt;code&gt;image_alt&lt;/code&gt; to an array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;base_url = &amp;quot;http://www.theawl.com/page/&amp;quot;

all_posts = []

# 2707 is last page as of today
total_number_of_pages_to_scrape = 2705
time_to_sleep_between_page_scrapes = 4

total_number_of_pages_to_scrape.times do |i|
  i = i + 1
  this_page_url = base_url + i.to_s
  
  this_page = Page.new(this_page_url)
  all_posts = all_posts + this_page.posts

  puts &amp;quot;Have scraped #{i} pages so far.&amp;quot;
  sleep time_to_sleep_between_page_scrapes
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Post object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post
  attr_reader :image_src, :image_alt, :post_url
  def initialize(post)
    post_image = post.css(&amp;quot;div.post__body div p:first img:first&amp;quot;)
    @image_src = post_image.attr(&amp;quot;src&amp;quot;)&amp;amp;.value
    @image_alt = post_image.attr(&amp;quot;alt&amp;quot;)&amp;amp;.value
    @post_url = post.css(&#39;h2 a&#39;).attr(&#39;href&#39;)&amp;amp;.value
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the scraper ignores posts that do not have images in the first &lt;code&gt;p&lt;/code&gt; tag OR if there&amp;rsquo;s no &lt;code&gt;a&lt;/code&gt; tag in the &lt;code&gt;h2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt; def make_posts
   @doc.search(&amp;quot;div.reverse-chron__post&amp;quot;).each do |post|
     if !post.css(&amp;quot;div.post__body div p:first img:first&amp;quot;).empty? &amp;amp;&amp;amp; !post.css(&#39;h2 a&#39;).empty?
       this_post = Post.new(post)
       @posts &amp;lt;&amp;lt; this_post
     end
   end
 end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above snippets are slight simplifications of code from the &lt;a href=&#34;https://github.com/sts10/awl_alt_scraper/blob/master/runner.rb&#34;&gt;runner.rb file&lt;/a&gt; if you want to read more.&lt;/p&gt;

&lt;h2 id=&#34;storing-the-scraped-text-and-urls&#34;&gt;Storing the scraped text and URLs&lt;/h2&gt;

&lt;p&gt;I wanted to store the scraped data in a nice, easy, and universal format, so I chose a comma separated value file (aka CSV), which is basically a minimalistic spreadsheet (you can open them with Excel). To be more thorough, I made the scraper make two CSV files: &lt;a href=&#34;https://raw.githubusercontent.com/sts10/awl_alt_scraper/master/csv/archive1.csv&#34;&gt;one with every post with an image&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/sts10/awl_alt_scraper/master/csv/just_with_alt.csv&#34;&gt;one only with images with alt text&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s &lt;a href=&#34;https://twitter.com/sts10/status/728077020865777664&#34;&gt;where I was&lt;/a&gt; Wednesday night. I set the &lt;code&gt;time_to_sleep_between_page_scrapes&lt;/code&gt; to 2 seconds, started it, dimmed the monitor, and went to sleep a little after midnight.&lt;/p&gt;

&lt;p&gt;When I woke up there was an error and my internet was out. In my groggy state I spent a second worried I had been penalized some how for accessing too many pages too quickly, but now I think what happened was I forgot to change the setting to tell my MacBook never to go to sleep.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/Cb3M0FM.png&#34; alt=&#34;Energy Saver yeah OK sure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And when it did go to sleep maybe the open internet request freaked the router out some how?&lt;/p&gt;

&lt;p&gt;Anyway I unplugged and plugged in my router and after a shower it was working again&amp;ndash; phew. I set &amp;ldquo;Computer sleep&amp;rdquo; to never and started up the scraper again, then left for work. When I got home Thursday evening I had two nice CSVs waiting for me. I gleefully &lt;a href=&#34;https://twitter.com/sts10/status/728367840374444032&#34;&gt;tweeted a link to the data&lt;/a&gt;, but nobody seemed to care. That was fine, because next came the fun part.&lt;/p&gt;

&lt;h2 id=&#34;front-end-ugh&#34;&gt;Front end (ugh)&lt;/h2&gt;

&lt;p&gt;On the subway ride home from work Thursday night, assuming the scraping had gone well, I started to imagine ways that I would use this data stored in the CSV files. &lt;a href=&#34;http://samschlinkert.com/awl-alt-tags&#34;&gt;Here&amp;rsquo;s what I came up with&lt;/a&gt; (&lt;a href=&#34;https://github.com/sts10/awl_alt_scraper/tree/master/site&#34;&gt;Github&lt;/a&gt;) after an hour or two.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: Unfortunately, since I create this site, The Awl has taken down or moved its hosted images, and thus breaking this particular front end implementation. Bummer!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The site pulls in the CSV data from Github. Each row of the CSV contains an image URL, the image&amp;rsquo;s alt text, and the URL of the Awl post that the image came from. The JavaScript in the site then chooses a random CSV row. Then it displays the alt text as a large, caption in the bottom-left corner of the image on a yellow background, kind of like a comic book.&lt;/p&gt;

&lt;p&gt;I was tired enough to tweet something mildly sincere.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I made something silly because I really love The &lt;a href=&#34;https://twitter.com/Awl&#34;&gt;@Awl&lt;/a&gt; &lt;a href=&#34;https://t.co/sH08wfLFEJ&#34;&gt;https://t.co/sH08wfLFEJ&lt;/a&gt; &lt;a href=&#34;https://t.co/gU3vXrdqaN&#34;&gt;pic.twitter.com/gU3vXrdqaN&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sam Schlinkert (@sts10) &lt;a href=&#34;https://twitter.com/sts10/status/728397846647603200&#34;&gt;May 6, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I mentioned @Awl hoping to catch Balk monitoring the account and just before I fell asleep got this reply:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/sts10&#34;&gt;@sts10&lt;/a&gt; You poor thing.&lt;/p&gt;&amp;mdash; The Awl (@Awl) &lt;a href=&#34;https://twitter.com/Awl/status/728412638145851392&#34;&gt;May 6, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Fuck him,&amp;rdquo; I thought. &lt;a href=&#34;https://twitter.com/silviakillings&#34;&gt;Silvia Killingsworth&lt;/a&gt;, their new editor from The New Yorker, will like it.&lt;/p&gt;

&lt;p&gt;Sure enough, the next morning Siliva tweeted this high praise&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Just&amp;hellip;wow. &lt;a href=&#34;https://twitter.com/sts10&#34;&gt;@sts10&lt;/a&gt; made an alt-tag site &lt;a href=&#34;https://t.co/akDqt2VGM1&#34;&gt;https://t.co/akDqt2VGM1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Silvia Killingsworth (@silviakillings) &lt;a href=&#34;https://twitter.com/silviakillings/status/728570354554294273&#34;&gt;May 6, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;along with a &lt;a href=&#34;https://twitter.com/silviakillings/status/728570624017346560&#34;&gt;series&lt;/a&gt; &lt;a href=&#34;https://twitter.com/silviakillings/status/728571236192751616&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;https://twitter.com/silviakillings/status/728571557283532800&#34;&gt;screenshots&lt;/a&gt; from the site. Woohoo!&lt;/p&gt;

&lt;h2 id=&#34;fun-with-url-parameters&#34;&gt;Fun with URL Parameters&lt;/h2&gt;

&lt;p&gt;Today I added some more JavaScript to the site so that there&amp;rsquo;s effectively a URL parameter with the URL of the Awl post of the image. So as you&amp;rsquo;re clicking through the images, the URL on my site actually changes. That way if you find &lt;a href=&#34;http://samschlinkert.com/awl-alt-tags/?http://www.theawl.com/2010/05/the-awl-in-your-internet-mailbox&#34;&gt;one you like&lt;/a&gt;, you can share the URL (something like &lt;code&gt;http://samschlinkert.com/awl-alt-tags/?http://www.theawl.com/2010/05/the-awl-in-your-internet-mailbox&lt;/code&gt;) on social media or email or whatever, and others going to that URL will get the image and alt text that you intended to send them (rather than a random one).&lt;/p&gt;

&lt;p&gt;Code-wise there&amp;rsquo;s two parts to this: (1) give the site the ability to read a URL from the URL&amp;rsquo;s parameters and display it, and (2) change the site&amp;rsquo;s URL whenever a new image is served.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&#34;https://github.com/sts10/awl_alt_scraper/blob/master/site/index.html&#34;&gt;index.html&lt;/a&gt;, here&amp;rsquo;s the start of part 1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var baseURL = window.location.toString();
if (baseURL.split(&amp;quot;?&amp;quot;)[1] !== undefined &amp;amp;&amp;amp; baseURL.split(&amp;quot;?&amp;quot;)[1] !== &amp;quot;&amp;quot;){
  var givenURL = baseURL.split(&amp;quot;?&amp;quot;)[1];
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the end of part 2:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 4. write the post_url into the address bar
var baseURL = window.location.toString().split(&amp;quot;?&amp;quot;)[0];
history.replaceState({}, document.title, baseURL + &amp;quot;?&amp;quot; + post_url); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a technique I first used on &lt;a href=&#34;http://samschlinkert.com/gif_rank/&#34;&gt;my GIF rank&lt;/a&gt; project, and I think it&amp;rsquo;s pretty sweet. I&amp;rsquo;ve also &lt;a href=&#34;http://sts10.github.io/blog/2015/05/20/url-parameters-as-user-settings/&#34;&gt;written about the idea of storing non-sensitive, user-specific data in URL parameters before&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;epilogue-headlines-with-node-js&#34;&gt;Epilogue: Headlines with Node.js&lt;/h2&gt;

&lt;p&gt;Separately I&amp;rsquo;d been playing around with a JavaScript framework (I think that&amp;rsquo;s what it is) called &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; this week. So on Friday, for a challenge (yolo), I figured I&amp;rsquo;d build a new scraper with Node to grab all the headlines from The Awl that contained exactly two words.&lt;/p&gt;

&lt;p&gt;Why exactly two words? Because, similar to the alt text thing, The Awl sometimes uses a humorous device of writing headlines that follow a noun + adjective or noun + verb construction (ugh it feels like explaining a joke but OK). Also similar to the alt text thing, others had noticed and &lt;a href=&#34;https://docs.google.com/document/d/1VygBa92XKMouxHXmb5nHiMiiBMI2qmdZ98krP3p_gsE/edit&#34;&gt;chronicled it a bit&lt;/a&gt;. A sampling: &lt;a href=&#34;http://www.theawl.com/2011/12/earth-pretty&#34;&gt;&amp;ldquo;Earth Pretty&amp;rdquo;&lt;/a&gt;, &lt;a href=&#34;http://www.theawl.com/2011/09/man-sweaty&#34;&gt;&amp;ldquo;Man Sweaty&amp;rdquo;&lt;/a&gt;, &lt;a href=&#34;http://www.theawl.com/2011/10/accomplishments-transitory&#34;&gt;&amp;ldquo;Accomplishments Transitory&amp;rdquo;&lt;/a&gt;, &lt;a href=&#34;http://www.theawl.com/2013/08/goat-vexed&#34;&gt;&amp;ldquo;Goat Vexed&amp;rdquo;&lt;/a&gt;, &lt;a href=&#34;https://github.com/sts10/awl_two_word_headline_scraper/blob/master/two_word_awl_headlines.csv&#34;&gt;etc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since I already knew the best way to scrape the data and what HTML to target, this task was more about the coding and learning how to use Node (I&amp;rsquo;m very new to it). Just getting Node installed was a bit of a trick for me, since I had haphazardly installed &lt;a href=&#34;https://iojs.org/en/&#34;&gt;io.js&lt;/a&gt; on my machine a few months ago and struggled to un-install it.&lt;/p&gt;

&lt;p&gt;For future reference, or anyone else facing this problem, I first consulted &lt;a href=&#34;http://stackoverflow.com/a/11178106/3160994&#34;&gt;this Stack Overflow answer&lt;/a&gt; and ran all of the code therein to get rid of my previous io.js installation. Then I &lt;a href=&#34;https://github.com/creationix/nvm#install-script&#34;&gt;installed NVM (Node Version Manager)&lt;/a&gt; (which seems to work very much like &lt;a href=&#34;https://rvm.io/&#34;&gt;RVM&lt;/a&gt;) and ran &lt;code&gt;nvm install node&lt;/code&gt;. Now &lt;code&gt;node -v&lt;/code&gt; gives me &lt;code&gt;v6.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To scrape the HTML I used the Node&amp;rsquo;s http endpoint (is it called an endpoint?) and &lt;a href=&#34;https://nodejs.org/api/http.html#http_http_get_options_callback&#34;&gt;its get method&lt;/a&gt;. To parse the HTML I used a package called &lt;a href=&#34;https://github.com/cheeriojs/cheerio&#34;&gt;Cheerio&lt;/a&gt;. To write to a CSV file, I used a package called &lt;a href=&#34;https://github.com/koles/ya-csv&#34;&gt;ya-csv&lt;/a&gt;, thanks to &lt;a href=&#34;http://blog-richter.rhcloud.com/writing-a-simple-csv-with-node-js/&#34;&gt;this helpful blog post&lt;/a&gt;, which notes, &amp;ldquo;While there seemed to be good Node packages available [for writing to CSVs] they lacked very good documentation.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m more comfortable in Ruby than in JavaScript at this point, so some simple things took me a while. The stickiest part was how to make the scraper wait a second or two between calls to avoid a timeout. I had run into problems with asynchronous code before&amp;ndash; the asynchronous capabilities of Node are both a reason I&amp;rsquo;m interested by it and apparently a conceptual headache for me. Anyway, after a good amount of trial and error I got it working with &lt;code&gt;setInterval&lt;/code&gt;. Here&amp;rsquo;s that bit from &lt;a href=&#34;https://github.com/sts10/awl_two_word_headline_scraper/blob/master/app.js&#34;&gt;app.js&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var i = 1;
var totalPagesToScrape = 2705;

var interval = setInterval(function(pageToScrape){
  getPage(i);
  console.log(&amp;quot;ran the interval for the &amp;quot; + i + &amp;quot; time.&amp;quot;);
  i = i + 1;
  if (i == totalPagesToScrape){
    clearInterval(interval);
  }
}, 1000, i);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I still don&amp;rsquo;t know why I never needed to refer to &lt;code&gt;pageToScrape&lt;/code&gt; in the anonymous function&amp;hellip; maybe because I made &lt;code&gt;i&lt;/code&gt; global and just used that? In fact there&amp;rsquo;s a good amount of that code block I&amp;rsquo;d live to go over with someone who knows their stuff, but it worked!&lt;/p&gt;

&lt;p&gt;I also don&amp;rsquo;t love how much code I have in the &lt;code&gt;response.on(&#39;end&#39;, function(){&lt;/code&gt; function. But that&amp;rsquo;s the only place where I know I&amp;rsquo;ve got a new page scraped and ready so I guess that&amp;rsquo;s how it goes with asynchronous.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://samschlinkert.com/awl-two-headlines/&#34;&gt;The front end for the two-word headlines project&lt;/a&gt; (&lt;a href=&#34;https://github.com/sts10/awl_two_word_headline_scraper/tree/master/site&#34;&gt;Github&lt;/a&gt;) is similar to the alt text one&amp;ndash; if anything it&amp;rsquo;s simpler. I decided to allow the user to randomly swap out either the first word or the second word of the headline (or both).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#39;#both-button&#39;).on(&amp;quot;click&amp;quot;, function(){
    newHeadline(data);
  });
$(&#39;#first-button&#39;).on(&amp;quot;click&amp;quot;, function(){
    newWord(data, 1);
  });
$(&#39;#second-button&#39;).on(&amp;quot;click&amp;quot;, function(){
    newWord(data, 2);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;just-the-links&#34;&gt;Just the Links&lt;/h2&gt;

&lt;p&gt;Alt text scraper:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://samschlinkert.com/awl-alt-tags/&#34;&gt;Front end demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sts10/awl_alt_scraper&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sts10/awl_alt_scraper/master/csv/just_with_alt.csv&#34;&gt;Raw CSV data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two-word headline scraper:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://samschlinkert.com/awl-two-headlines/&#34;&gt;Front end demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sts10/awl_two_word_headline_scraper&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sts10/awl_two_word_headline_scraper/master/two_word_awl_headlines.csv&#34;&gt;Raw CSV data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>More Bowie Books: Notes From the Left</title>
      <link>http://example.org/post/2016-03-22-more-bowie-books-waves-of-communism/</link>
      <pubDate>Tue, 22 Mar 2016 21:57:07 -0400</pubDate>
      
      <guid>http://example.org/post/2016-03-22-more-bowie-books-waves-of-communism/</guid>
      <description>&lt;p&gt;Having read three more of &lt;a href=&#34;http://sts10.github.io/blog/2016/02/14/bowie-books/&#34;&gt;David Bowie&amp;rsquo;s favorite books&lt;/a&gt;, I thought it&amp;rsquo;d be nice to write a little. The three books, the plots of which, unintentional on my part at least, had something to do with the far left, were &lt;a href=&#34;http://www.amazon.com/dp/0375714790/ref=sr_rp_1?m=ATVPDKIKX0DER&amp;amp;ie=UTF8&amp;amp;qid=1458698414&amp;amp;sr=sr-1&amp;amp;keywords=The+Leopard%3A+A+Novel&#34;&gt;&lt;em&gt;The Leopard&lt;/em&gt; by Di Lampedusa&lt;/a&gt;, &lt;a href=&#34;http://www.amazon.com/Darkness-at-Noon-Arthur-Koestler/dp/1416540261/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1458698450&amp;amp;sr=1-1&amp;amp;keywords=darkness+at+noon+by+arthur+koestler&#34;&gt;&lt;em&gt;Darkness at Noon&lt;/em&gt; by Koestler&lt;/a&gt;, and &lt;a href=&#34;http://www.amazon.com/42nd-Parallel-U-S-Trilogy/dp/0618056815/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1458698558&amp;amp;sr=1-1&amp;amp;keywords=the+42nd+parallel+by+john+dos+passos&#34;&gt;&lt;em&gt;The 42nd Parallel&lt;/em&gt; by dos Passos&lt;/a&gt;. I figured it&amp;rsquo;d be good to put some notes down while they&amp;rsquo;re fresh.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;em&gt;The Leopard&lt;/em&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Leopard&#34;&gt;Wikipedia&lt;/a&gt;) is about a minor Sicilian prince facing the end of his small kingdom to a coming social movement, starting in 1860 (apparently called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Italian_unification&#34;&gt;Italian unification&lt;/a&gt;). From the Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Most of the novel is set during the time of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Risorgimento&#34;&gt;&lt;em&gt;Risorgimento&lt;/em&gt;&lt;/a&gt;, specifically during the period when &lt;a href=&#34;https://en.wikipedia.org/wiki/Risorgimento&#34;&gt;Giuseppe Garibaldi&lt;/a&gt;, the hero of Italian unification, swept through Sicily with his forces, known as &lt;a href=&#34;https://en.wikipedia.org/wiki/I_Mille&#34;&gt;The Thousand&lt;/a&gt;. The plot focuses upon the aristocratic Salina family, which is headed by the stoic Prince Fabrizio, a consummate womanizer who foresees the upcoming downfall of his family and the nobility in Italy as a whole but finds himself unable to change the course of history. As the novel opens in May 1860, Garibaldi&amp;rsquo;s Redshirts have landed on the Sicilian coast and are pressing inland to overthrow the &lt;a href=&#34;https://en.wikipedia.org/wiki/Kingdom_of_the_Two_Sicilies&#34;&gt;Kingdom of the Two Sicilies&lt;/a&gt;&amp;hellip; The novel is the story of Don Fabrizio Corbera, Prince of Salina, a 19th-century Sicilian nobleman caught in the midst of civil war and revolution. As a result of political upheaval, the prince&amp;rsquo;s position in the island&amp;rsquo;s class system is eroded by newly moneyed peasants and &amp;ldquo;shabby minor gentry.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I read this as a book about a wealthy man who secretly-or-not-so-secretly knows that the days of his and his family&amp;rsquo;s aristocratic standing are numbered thanks at least in part to class warfare. He has some choices in how his future will go, but other aspects of the demise are inevitable. This duality is embodied by a quote from the prince&amp;rsquo;s ambitious young nephew: &amp;ldquo;everything needs to change, so everything can stay the same.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a broad, old-money family novel, full of foreign, seemingly-small problems&amp;ndash; a plot tent-poled by coordinated social gatherings and displays of manners that appear inconsequential to my modern sense, but some of which have terrifyingly far-reaching repercussions. But inevitable, old things die and new things come.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Darkness at Noon&lt;/em&gt; is a fable-feeling novel by a man whose Wikipedia entry, I have learned, groups together &lt;a href=&#34;https://en.wikipedia.org/wiki/Arthur_Koestler#Personal_life_and_allegations&#34;&gt;&amp;ldquo;personal life and allegations&amp;rdquo;&lt;/a&gt;. An older member of a semi-fictitious Communist party is arrested for treason on dubious grounds and then held and tortured by sleep deprivation into making confessions his betrayal of the party. Again from Wikipedia, because we only have so much time:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Set in 1938 during the Stalinist Great Purge and Moscow show trials, the novel does not name either Russia or the USSR, but the characters have Russian names. Joseph Stalin is represented by &amp;ldquo;Number One&amp;rdquo;, a menacing dictator. The novel expresses the author&amp;rsquo;s disillusionment with the Soviet Union&amp;rsquo;s version of Communism at the outset of World War II.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn&amp;rsquo;t like the book much&amp;ndash; I don&amp;rsquo;t mean to be insensitive to the Old Bolsheviks who died at the hands of Stalins during the Moscow show trials, but the main character&amp;rsquo;s demise was a cold, dark, and, I thought, uninteresting one. Rubashov himself, the main character, isn&amp;rsquo;t much of hero himself, as we learn from his numerous betrayals of others in the Party. Maybe the best I can say about the book is that it could be instructive for what an overgrown revolution or movement looks like. Also, I found the Morse code-like system the inmates had for communicating through the walls.&lt;/p&gt;

&lt;p&gt;A break! Around the time I was reading &lt;em&gt;The Leopard&lt;/em&gt; I found &lt;a href=&#34;http://www.huckmagazine.com/art-and-culture/french-commune-la-zad-become-symbol-resistance/&#34;&gt;an article&lt;/a&gt; about a modern French commune, who had recently produced &lt;a href=&#34;https://constellations.boum.org/spip.php?article143&#34;&gt;this manifesto&lt;/a&gt; about their mission of defending a piece of land in France known as the ZAD from developers intent on building an airport:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We frantically run around our homes and cabins wielding makeshift shields and climbing gear to perch in the treetops, with stones, fireworks and a few Molotov cocktails to push back the assaults, lemons to protect ourselves from the tear gas and laptops to counter the mainstream media propaganda&amp;hellip; We run and run, in the deep mud, breathless, trying to hamper the police&amp;rsquo;s maneuvers and then we vanish behind the hedgerows and into the thickets that we have got to know so well. We wait for hours under the pouring rain crouching behind barricades that burst into flame as the troops approach&amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we can get to the book of the three I liked the most. The write-up on the back of my paperback copy of &lt;em&gt;The 42nd Parallel&lt;/em&gt; (first book of a trilogy) reads: &amp;ldquo;&amp;hellip; Dos Passos is said by many to have written the great American novel. While Fitzgerald and Hemingway were cultivating what Edmund Wilson once called their &amp;lsquo;own little corners,&amp;rsquo; John Dos Passos was taking on the world.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The prose is stylish! especially when you consider it was published in 1930. The style of it alone made me think less of the Beats that came decades later.&lt;/p&gt;

&lt;p&gt;Most of its characters of working class, and they are lured by socialism. Many of their pitfalls in life are the result of them or someone in their family getting sick or injured&amp;ndash; As I was reading it I couldn&amp;rsquo;t help but read it as an American advertisement for universal healthcare. At some points the life derailments and plot turns (too slow and almost inevitable for &amp;ldquo;twists&amp;rdquo;) were so frustratingly preventable with a more forgiving system that I thought maybe book would not make sense to generations that had only known universal healthcare, in the same way some horror movies are ruined if you ask &amp;ldquo;what if they had a cell phone?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It made me want to smoke a cigar. It made me want to network my way into big money. It made me want to be a traveling reporter. To be an American. It made me want to write profusely and quickly and boldly, both in private and in public&amp;ndash; long, grammatically-questionable words and sentences full of life, but not in the in-your-face-obvious-Kerouac way, or Hemingway&amp;rsquo;s self-loathing. Dos Passos struggles with society and its promises much more. Maybe it is the great American novel.&lt;/p&gt;

&lt;p&gt;What made it even more intriguing&amp;ndash; combining the socialist sympathies and the Beat-like style, it was not hard for me to imagine that this book is purposefully kept out of American high schools in order to leave room to ingrain Kerouac&amp;rsquo;s brand of individualism and rebellion in that particular sort of youth, that that is the preferred brand, the preferred rebellion, that modern American capitalism was built to handle, to mold.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&#34;https://www.nytimes.com/books/97/03/16/bookend/bookend.html&#34;&gt;review of the &lt;em&gt;U.S.A.&lt;/em&gt; trilogy in the New York Times&lt;/a&gt; (from 1997) offers some more educated perspective:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unlike Fitzgerald or Hemingway, whose writing, whatever its failures, issued from distinct sensibilities, Dos Passos was basically a reporter on a mission, wielding a style whose chief virtue was efficiency. The job at hand, as he saw it in the 30&amp;rsquo;s, was to encompass in literature the whole wrongly organized communal life of America, the betrayal of &amp;ldquo;our storybook democracy.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Dos Passos and the times changed; the communal air darkened and lightened, throwing up new criteria, as it always does. &amp;ldquo;U.S.A.&amp;rdquo; once struck some very intelligent people as powerfully instructive, a bold kind of fiction. In a different atmosphere it feels rather dated, labored, in its best places no more than a &amp;ldquo;good try.&amp;rdquo; It has a permanent place in our histories, I think, but only a precarious one in our literature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, it is cold. And yes, some of the &amp;ldquo;Camera Eye&amp;rdquo; asides seem like failed experiments. But maybe most pointedly of all, the suffering in &lt;em&gt;42nd Parallel&lt;/em&gt; does seem really meaningless as Gilman cites McLuhan: &amp;ldquo;Seeing nothing inevitable or meaningful in human suffering, he confronts it neither in its comic, intelligible mode, nor in a tragic way. It angers and annoys him as something extraneous.&amp;rdquo; A reporter. How America (&amp;ldquo;the real protagonist&amp;rdquo;) sees these characters, these individuals. Its eye is unsympathetic.&lt;/p&gt;

&lt;p&gt;But despite all this the writing still stirred me. Nevertheless &lt;a href=&#34;https://www.nytimes.com/books/97/03/16/bookend/bookend.html&#34;&gt;the review&lt;/a&gt; is insightful!&lt;/p&gt;

&lt;p&gt;It is perhaps notable that during the time I was reading &lt;em&gt;Parallel&lt;/em&gt; I had an old friend over and we got drunk and wrote a email about Dash Snow, gleefully juggling the keyboard between each other, yelling like youths, while (fucking of course) re-watching those Levi&amp;rsquo;s / Ryan McGinley &amp;ldquo;Go Forth&amp;rdquo; ads a bunch of times in a row on YouTube, loud. STRONG. AMPLE. FAIR. The way Whitman says STRONG.&lt;/p&gt;

&lt;iframe width=&#34;600&#34; height=&#34;318&#34; src=&#34;https://www.youtube.com/embed/FdW1CjbCNxw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Maybe Kerouac sold me on Levi&amp;rsquo;s. Dos Passos&amp;rsquo; Mac probably couldn&amp;rsquo;t afford them.&lt;/p&gt;

&lt;p&gt;If &lt;em&gt;The Leopard&lt;/em&gt; is a slow, navigable march of a manageable upheaval, and &lt;em&gt;Darkness&lt;/em&gt; is a dire warning of the excesses of revolution, &lt;em&gt;Parallel&lt;/em&gt; seems to me to be a somewhat-forgotten history of American labor&amp;ndash; something I realize I don&amp;rsquo;t know too much about.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;42nd Parallel&lt;/em&gt; a variety of famous figures make cameos, including Eugene Debs, but Thomas Edison&amp;rsquo;s is my favorite (and a good example of a sort of circular refrains that Dos Passos used pretty regularly):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whenever he [Edison] read about anything he went down cellar and tried it out&amp;hellip; He rigged up a laboratory on the train and whenever he read about anything he tried it out&amp;hellip; whenever he read about a scientific experiment he tried it out, whenever he could get near an engine he&amp;rsquo;d tinker with it&amp;hellip; Thomas A. Edison at eightytwo worked sixteen hours a day; he never worried about mathematics or the social system or generalized philosophical concepts&amp;hellip; he worked sixteen hours a day trying to find a substitute for rubber; whenever he read about anything he tried it out; whenever he got a hunch he went to the laboratory and tried it out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Work is hard&amp;ndash; it should be messy and time-consuming. Gaining knowledge is not elegant, and it is not wholly contained in books or even in the mind of a genius that is not you or older than you. You try things in the real world, amass experience&amp;ndash; the source of an inspiration be damned. There is something of America in that I think.&lt;/p&gt;

&lt;p&gt;We may even choose to believe &lt;a href=&#34;http://www.nytimes.com/1992/03/16/books/poem-is-whitman-s-is-the-voice.html&#34;&gt;that Edison&amp;rsquo;s hard work let us hear Whitman read his poems&lt;/a&gt; this many years later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim-zipper: My First Vim Plugin</title>
      <link>http://example.org/post/2016-03-20-vim-zipper-my-first-vim-plugin/</link>
      <pubDate>Sun, 20 Mar 2016 15:53:19 -0400</pubDate>
      
      <guid>http://example.org/post/2016-03-20-vim-zipper-my-first-vim-plugin/</guid>
      <description>

&lt;p&gt;At work I was working with &lt;a href=&#34;http://www.highcharts.com/&#34;&gt;Highcharts&lt;/a&gt;, a JavaScript charting library. The specific file I was working in had a number of these charts defined in it, each of which had a good amount of settings and functions within them. As a result, in spite of other vim awesomeness, I found that I was having some trouble navigating around the long file.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;To give you a sense of what I was dealing with, here&amp;rsquo;s the JS for &lt;a href=&#34;http://www.highcharts.com/demo/line-basic&#34;&gt;a demo from the Highcharts website&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(function () {
    $(&#39;#container&#39;).highcharts({
        title: {
            text: &#39;Monthly Average Temperature&#39;,
            x: -20 //center
        },
        subtitle: {
            text: &#39;Source: WorldClimate.com&#39;,
            x: -20
        },
        xAxis: {
            categories: [&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;,
                &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;]
        },
        yAxis: {
            title: {
                text: &#39;Temperature (°C)&#39;
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: &#39;#808080&#39;
            }]
        },
        tooltip: {
            valueSuffix: &#39;°C&#39;
        },
        legend: {
            layout: &#39;vertical&#39;,
            align: &#39;right&#39;,
            verticalAlign: &#39;middle&#39;,
            borderWidth: 0
        },
        series: [{
            name: &#39;Tokyo&#39;,
            data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]
        }, {
            name: &#39;New York&#39;,
            data: [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5]
        }, {
            name: &#39;Berlin&#39;,
            data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0]
        }, {
            name: &#39;London&#39;,
            data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]
        }]
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I figured the best Vim way to better deal with these large code blocks, most of which I didn&amp;rsquo;t need to see most of the time, was to learn more about folds.&lt;/p&gt;

&lt;p&gt;Initially, when first learning Vim, I just set &lt;code&gt;foldmethod&lt;/code&gt; to &lt;code&gt;syntax&lt;/code&gt;, figuring that would be the smartest option. However I&amp;rsquo;ve found that with this setting Vim rarely finds folds to close. Also, I believe that this setting slowed Vim down when I edited large Ruby files in particular. Perhaps I need some other setting in my vimrc, but &lt;code&gt;foldmethod=syntax&lt;/code&gt; just hasn&amp;rsquo;t worked for me.&lt;/p&gt;

&lt;p&gt;So I switched to &lt;code&gt;foldmethod=indent&lt;/code&gt;, figuring that I maintain pretty cleanly-indented code. With &lt;code&gt;foldmethod&lt;/code&gt; set to &lt;code&gt;indent&lt;/code&gt;, &lt;code&gt;zc&lt;/code&gt; (close fold) worked well for me. However when trying to open a fold, I found it a bit cumbersome to have to navigate to the exact line of the fold I wanted to open. I was thinking I wanted a command that &amp;ldquo;found next fold and open it&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;After some Googling I found &lt;a href=&#34;http://stackoverflow.com/a/9407015/3160994&#34;&gt;this Stack Overflow answer&lt;/a&gt; that gives the Vimscript to do what I wanted. By trial and error, fumbling in the unforgiving darkness that is Vimscript, I modified it to the following and pasted it into my vimrc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;function! NextClosedFold(dir)
  if !(foldclosed(line(&#39;.&#39;)) &amp;gt; 0)
    let cmd = &#39;norm!z&#39; . a:dir
    let view = winsaveview()
    let [l0, l, openf] = [0, view.lnum, 1]
    while l != l0 &amp;amp;&amp;amp; openf
        exe cmd
        let [l0, l] = [l, line(&#39;.&#39;)]
        let openf = foldclosed(l) &amp;lt; 0
    endwhile
    if openf
        call winrestview(view)
    endif
  endif
endfunction

nnoremap &amp;lt;bar&amp;gt; zc
nnoremap &amp;lt;Bslash&amp;gt; :&amp;lt;C-U&amp;gt;call NextClosedFold(&#39;j&#39;)&amp;lt;cr&amp;gt;zo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m pretty sure it was something like that&amp;hellip; the point is I just had it in my vimrc kind of like that and it worked. (&lt;code&gt;&amp;lt;C-U&amp;gt;&lt;/code&gt; in insert mode deletes all characters before the cursor in current line. I believe it&amp;rsquo;s best practice to insert it before function calls as above. I was reminded of this from tpope&amp;rsquo;s &lt;a href=&#34;https://github.com/tpope/vim-commentary&#34;&gt;commentary plugin&lt;/a&gt;. See &lt;code&gt;:help i_CTRL-U&lt;/code&gt; for more.)&lt;/p&gt;

&lt;p&gt;This worked well enough. But I had been waiting for an opportunity to make my first Vim plugin, and at some point I figured this would be a good candidate.&lt;/p&gt;

&lt;h2 id=&#34;making-it-a-plugin&#34;&gt;Making It a Plugin&lt;/h2&gt;

&lt;p&gt;First I put the function and remappings into a separate &lt;code&gt;.vim&lt;/code&gt; file and then sourced that file from my vimrc. I think I first created &lt;code&gt;~/.vim/zipper.vim&lt;/code&gt;, pasted the function and the remappings into it and replaced the function and remappings in my vimrc with &lt;code&gt;source ~/.vim/zipper.vim&lt;/code&gt;. It worked! One step closer to a plugin.&lt;/p&gt;

&lt;p&gt;I then consulted this 4-year-old &lt;a href=&#34;http://stevelosh.com/blog/2011/09/writing-vim-plugins/&#34;&gt;blog post&lt;/a&gt; by Steve Losh on the topic of creating a Vim plugin, so I knew I had to structure my &lt;code&gt;.vim&lt;/code&gt; file into a Vim plugin&amp;rsquo;s structure. From &lt;a href=&#34;http://stevelosh.com/blog/2011/09/writing-vim-plugins/#be-pathogen-compatible&#34;&gt;Losh&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yourplugin/
    doc/
        yourplugin.txt
    plugin/
        yourplugin.vim
    ...
    README
    LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then headed over to &lt;a href=&#34;https://github.com/junegunn/vim-plug/blob/master/README.md&#34;&gt;vim-plug&amp;rsquo;s README&lt;/a&gt; to find out how to load a local vim plugin. Easy enough:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Unmanaged plugin (manually installed and updated)
Plug &#39;~/my-prototype-plugin&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I moved my vim file to my usual code directory and put it in a &lt;code&gt;plugin&lt;/code&gt; directory, then added this following to list of plugins in my vimrc for vim-plug to find:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;~/Documents/code/vim-zipper&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then ran &lt;code&gt;:PlugInstall&lt;/code&gt; and was again in business (though I did note that I did not see &amp;ldquo;vim-zipper&amp;rdquo; in vim-plug&amp;rsquo;s output of installed plugins, I&amp;rsquo;m hoping just because it doesn&amp;rsquo;t display locally-sourced plugins since they aren&amp;rsquo;t actually downloaded?).&lt;/p&gt;

&lt;p&gt;After some fiddling with how to set what mappings and options (see below), I pushed my local version of the plugin &lt;a href=&#34;https://github.com/sts10/vim-zipper&#34;&gt;up to GitHub&lt;/a&gt; and, in my vimrc, replaced &lt;code&gt;Plug &#39;~/Documents/code/vim-zipper&#39;&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;sts10/vim-zipper&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then ran &lt;code&gt;:Plug Clean!&lt;/code&gt; to make sure I removed the local version of the plugin (though not sure if that did anything), followed by &lt;code&gt;:PlugUpdate&lt;/code&gt; (or &lt;code&gt;:PlugInstall&lt;/code&gt;) and the plugin still worked!&lt;/p&gt;

&lt;h2 id=&#34;controlled-remappings&#34;&gt;Controlled Remappings&lt;/h2&gt;

&lt;p&gt;Rather then just keep the two remapping lines I originally wrote for my own vimrc in the public version of the plugin, I used two &lt;code&gt;if&lt;/code&gt; statements to only map &lt;code&gt;&amp;lt;bar&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Bslash&amp;gt;&lt;/code&gt; if users hadn&amp;rsquo;t mapped those two keys yet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;Plug&amp;gt;ZipClosed :&amp;lt;C-U&amp;gt;call CloseFold()&amp;lt;cr&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;Plug&amp;gt;ZipOpenNext :&amp;lt;C-U&amp;gt;call NextClosedFold(&#39;j&#39;)&amp;lt;cr&amp;gt;zo
nnoremap &amp;lt;silent&amp;gt; &amp;lt;Plug&amp;gt;ZipOpenPrev :&amp;lt;C-U&amp;gt;call NextClosedFold(&#39;k&#39;)&amp;lt;cr&amp;gt;zo

vnoremap &amp;lt;silent&amp;gt; &amp;lt;Plug&amp;gt;ZipOpenVisual :&#39;&amp;lt;,&#39;&amp;gt;normal zo&amp;lt;cr&amp;gt;
vnoremap &amp;lt;silent&amp;gt; &amp;lt;Plug&amp;gt;ZipClosedVisual :&#39;&amp;lt;,&#39;&amp;gt;normal zc&amp;lt;cr&amp;gt;

if !hasmapto(&#39;&amp;lt;Plug&amp;gt;ZipClosed&#39;) || maparg(&#39;&amp;lt;bar&amp;gt;&#39;, &#39;n&#39;) ==# &#39;&#39;
  nmap &amp;lt;bar&amp;gt; &amp;lt;Plug&amp;gt;ZipClosed
  vmap &amp;lt;bar&amp;gt; &amp;lt;Plug&amp;gt;ZipClosedVisual
endif

if !hasmapto(&#39;&amp;lt;Plug&amp;gt;ZipOpenNext&#39;) || maparg(&#39;&amp;lt;Bslash&amp;gt;&#39;, &#39;n&#39;) ==# &#39;&#39;
  nmap &amp;lt;Bslash&amp;gt; &amp;lt;Plug&amp;gt;ZipOpenNext
  nmap &amp;lt;C-Bslash&amp;gt; &amp;lt;Plug&amp;gt;ZipOpenPrev
  vmap &amp;lt;Bslash&amp;gt; &amp;lt;Plug&amp;gt;ZipOpenVisual
endif

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I picked this scheme up from tpope&amp;rsquo;s &lt;a href=&#34;https://github.com/tpope/vim-commentary/blob/master/plugin/commentary.vim&#34;&gt;commentary&lt;/a&gt; and it seems to work as intended. If, say, you haven&amp;rsquo;t mapped your &lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt;, if defaults to &lt;code&gt;&amp;lt;Bslash&amp;gt;&lt;/code&gt;. Then users would have to map something else to &lt;code&gt;&amp;lt;Plug&amp;gt;ZipOpenNext&lt;/code&gt;&amp;ndash; they wouldn&amp;rsquo;t have to deal with the function calls themselves, which is nice.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m almost positive there&amp;rsquo;s a way to do these mappings such that I don&amp;rsquo;t have to specify the visual mode mappings separately, but considering the &amp;ldquo;open&amp;rdquo; mechanism is basically just &lt;code&gt;zo&lt;/code&gt; in visual mode, it&amp;rsquo;s probably good to define it separately.&lt;/p&gt;

&lt;h2 id=&#34;help-text-file&#34;&gt;Help Text File&lt;/h2&gt;

&lt;p&gt;To be formal about it, I copied &lt;a href=&#34;https://github.com/tpope/vim-commentary/blob/master/doc/commentary.txt&#34;&gt;Commentary&amp;rsquo;s help file&lt;/a&gt; and replaced the text with &lt;a href=&#34;https://github.com/sts10/vim-zipper/blob/master/doc/zipper.txt&#34;&gt;what I figured was a good help file for zipper&lt;/a&gt;. I then tested it out by running &lt;code&gt;:help zipper&lt;/code&gt; and &lt;code&gt;:help bar&lt;/code&gt; and it takes me right to the right place. Intriguingly, the &lt;a href=&#34;https://github.com/sts10/vim-zipper/blob/master/doc/tags&#34;&gt;tags&lt;/a&gt; file just automatically created itself and then populated itself&amp;hellip; Not sure how that happened to be honest!! Vim must have recognized the directory layout and just done its thing. No complaints here.&lt;/p&gt;

&lt;h2 id=&#34;extras-readme-and-gif&#34;&gt;Extras (README and GIF)&lt;/h2&gt;

&lt;p&gt;I then fleshed out the &lt;a href=&#34;https://github.com/sts10/vim-zipper/blob/master/README.mdown&#34;&gt;README&lt;/a&gt;, including making this big silly GIF (using Quicktime screen record and &lt;a href=&#34;http://gifbrewery.com/&#34;&gt;GIFBrewery&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sts10/vim-zipper/master/vim-zipper-gif.gif&#34; alt=&#34;vim-zipper GIF&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s about it! Give &lt;a href=&#34;https://github.com/sts10/vim-zipper&#34;&gt;vim-zipper&lt;/a&gt; a shot and &lt;a href=&#34;https://twitter.com/sts10&#34;&gt;let me know&lt;/a&gt; what you think!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Problem with Vim&#39;s gx Command, And One Solution</title>
      <link>http://example.org/post/2016-02-16-one-solution-to-a-problem-with-vims-gx-command/</link>
      <pubDate>Tue, 16 Feb 2016 23:31:58 -0500</pubDate>
      
      <guid>http://example.org/post/2016-02-16-one-solution-to-a-problem-with-vims-gx-command/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been playing around with Vim&amp;rsquo;s &lt;code&gt;gx&lt;/code&gt; command, which in normal mode, when on a URL, opens that URL in your default browser (see &lt;code&gt;:h gx&lt;/code&gt;). However today I ran into an interesting problem&amp;ndash; if a URL has a &lt;code&gt;?&lt;/code&gt; in it &lt;code&gt;gx&lt;/code&gt; thinks the URL ends at the &lt;code&gt;?&lt;/code&gt;. Note that I&amp;rsquo;m using OS X and Chrome is my default browser. I&amp;rsquo;m seeing this problem in both MacVim 7.4 (88) and Neovim v0.1.3-61-gf03ab69.&lt;/p&gt;

&lt;p&gt;This might not seem like a big deal for most URLs, since usually the characters after a &lt;code&gt;?&lt;/code&gt; are superfluous tracking codes (though for my job they&amp;rsquo;re pretty important). However there are the very large exceptions of YouTube video URLs, like &lt;code&gt;https://www.youtube.com/watch?v=wlR5gYd6um0&lt;/code&gt;, and Google search results pages, like &lt;code&gt;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=vim%20gx%20command&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Placing your normal mode cursor anywhere before the &lt;code&gt;?&lt;/code&gt; in either of those URLs and hitting &lt;code&gt;gx&lt;/code&gt; will open the URL up to but not past the &lt;code&gt;?&lt;/code&gt;, thus taking you to a different location than intended. There are probably other examples where the &lt;code&gt;?&lt;/code&gt; is non-trivial.&lt;/p&gt;

&lt;!-- more --&gt; 

&lt;p&gt;This same problem is described in &lt;a href=&#34;http://vi.stackexchange.com/questions/2801/how-can-i-make-gx-recognise-full-urls-in-vim&#34;&gt;this Stack Exchange question&lt;/a&gt;. Interestingly, the top answer to the Stack Exchange question says that the variable &lt;code&gt;g:netrx_gx&lt;/code&gt; &amp;ldquo;determines what will be considered part of a URI&amp;rdquo; and that by default this is set to &amp;ldquo;&lt;cfile&gt;&amp;rdquo; (see &lt;code&gt;:help &amp;lt;cfile&amp;gt;&lt;/code&gt;). The suggested fix is to change this variable from &lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;cWORD&amp;gt;&lt;/code&gt;, however after some testing with that I found that it frequently selects MORE than a given URL, since it usually goes from space to space.&lt;/p&gt;

&lt;p&gt;Note there&amp;rsquo;s also &lt;a href=&#34;https://github.com/vim/vim/issues/190&#34;&gt;Issue #190&lt;/a&gt; in &lt;a href=&#34;https://github.com/vim/vim&#34;&gt;vim/vim&lt;/a&gt; which seems relevant, and presents some more clues. One user gives &lt;a href=&#34;https://github.com/vim/vim/issues/190#issuecomment-132351369&#34;&gt;this answer&lt;/a&gt;, which points to &lt;a href=&#34;https://github.com/drmikehenry/vimfiles/blob/9b987c0349c9b1739242369d3e2cd62deacfd28c/vimrc#L2467&#34;&gt;a function in his vimrc&lt;/a&gt; that may work as a fix&amp;ndash; I didn&amp;rsquo;t try it. Here&amp;rsquo;s what I did.&lt;/p&gt;

&lt;h2 id=&#34;my-solution&#34;&gt;My Solution&lt;/h2&gt;

&lt;p&gt;So it&amp;rsquo;s not pretty, but here goes:&lt;/p&gt;

&lt;p&gt;The first clue I got was from the very end of that Stack Exchange answer: &amp;ldquo;Hint: Using &lt;code&gt;gx&lt;/code&gt; in visual mode, it will open the visually selected string (regardless of the above configuration).&amp;rdquo; The same feature is touched upon in the &lt;a href=&#34;https://github.com/vim/vim/issues/190#issuecomment-132351362&#34;&gt;Vim Github issue&lt;/a&gt; that I mention above.&lt;/p&gt;

&lt;p&gt;Kind of coincidentally, I recently installed the &lt;a href=&#34;https://github.com/jceb/vim-textobj-uri&#34;&gt;jceb/vim-textobj-uri Plugin&lt;/a&gt; (which requires you to install &lt;a href=&#34;https://github.com/kana/vim-textobj-user&#34;&gt;kana/vim-textobj-user&lt;/a&gt; first!). vim-textobj-uri, as you might guess, makes URIs text objects, and maps &lt;code&gt;iu&lt;/code&gt; and &lt;code&gt;au&lt;/code&gt; to interact with them.&lt;/p&gt;

&lt;p&gt;Now that I had a well-made URI text object at my finger tips (which is helpful on it&amp;rsquo;s own!), I then typed this remapping into my vimrc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap gx viugx&amp;lt;Esc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can probably guess, this mapping visually selects the URI, then runs &lt;code&gt;gx&lt;/code&gt; (from visual mode), then Escapes you back into normal mode.&lt;/p&gt;

&lt;p&gt;Later I refined this in two ways. First, I chose to use my &lt;code&gt;x&lt;/code&gt; mark in order to preserve my cursor position in the URI. And secondly, thanks to &lt;a href=&#34;https://sts10.github.io/blog/2016/02/16/one-solution-to-a-problem-with-vims-gx-command/#comment-2793361989&#34;&gt;a comment from Carudo&lt;/a&gt;, I found that I could use the preferable &lt;code&gt;nnoremap&lt;/code&gt; by doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nnoremap gx :normal mxviugx&amp;lt;Esc&amp;gt;`x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which you may prefer.&lt;/p&gt;

&lt;p&gt;From my point of view this is a problem that should be solved by default by Vim itself, or at least there should exist something better to set &lt;code&gt;g:netrx_gx&lt;/code&gt; to. Right?&lt;/p&gt;

&lt;h2 id=&#34;other-strangeness-with-gx&#34;&gt;Other Strangeness with gx&lt;/h2&gt;

&lt;p&gt;Sometimes when I run &lt;code&gt;gx&lt;/code&gt; on some URLs (one example was: &lt;code&gt;http://vimcasts.org/episodes/meet-the-yank-register/&lt;/code&gt;), it seems like Vim runs a &lt;code&gt;curl&lt;/code&gt; command and attempts to download the source code of the file (sometimes it&amp;rsquo;s successfully and Vim opens the source code as a new buffer). This may be the case for URLs that end in trailing slashes, as &lt;a href=&#34;http://vi.stackexchange.com/questions/5439/why-does-gx-call-curl-when-the-cursor-is-on-a-url-with-trailing-slash&#34;&gt;this Stack Exchange user points out&lt;/a&gt;, though, frustratingly, I haven&amp;rsquo;t been able to reproduce the behavior consistently.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bowie Books</title>
      <link>http://example.org/post/2016-02-14-bowie-books/</link>
      <pubDate>Sun, 14 Feb 2016 10:50:43 -0500</pubDate>
      
      <guid>http://example.org/post/2016-02-14-bowie-books/</guid>
      <description>&lt;p&gt;On January 11th, the day after David Bowie died, The New York Public Library&amp;rsquo;s blog posted &lt;a href=&#34;http://www.nypl.org/blog/2016/01/11/david-bowies-top-100-books?hspace=332034&#34;&gt;a list of the musician&amp;rsquo;s 100 favorite books&lt;/a&gt;, based off of &lt;a href=&#34;https://www.facebook.com/davidbowie/?target_post=10151603205477665&amp;amp;ref=story_permalink&#34;&gt;a Facebook post on his verified page from 2013&lt;/a&gt;. A friend sent me the NYPL link and I, delighted by the idea of a project, looked up each of them on Amazon.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;There are some interesting trends&amp;ndash; as you&amp;rsquo;d expect there&amp;rsquo;s a few histories of music (which I&amp;rsquo;m currently uninterested in), but also a handful about Black history and Russian history. I&amp;rsquo;d read a few of them (big thumbs-up for &lt;em&gt;Kafka Was the Rage&lt;/em&gt;), and I had recently read other books by Bruce Chatwin and Michael Chabon, but most I&amp;rsquo;d never heard of.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/CYcwsA2U0AAbh6s.jpg&#34; alt=&#34;READ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I ended up ordering 16 (I think) of them, mostly the never-heard-ofs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/vnTfSeJ.jpg&#34; alt=&#34;Amazon delivery&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Mr Norris Changes Trains&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Maldoror and the Complete Works of the Comte de Lautréamont&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Leopard: A Novel&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Nights at the Circus&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Interviews with Francis Bacon (Subsequent)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Quest for Christa T.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;City of Night&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Passing (Penguin Classics)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Money: A Suicide Note (Penguin Ink)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Sailor Who Fell from Grace with the Sea&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Zanoni&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Trial of Henry Kissinger&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Last Exit to Brooklyn&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Infants of the Spring&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The 42nd Parallel: Volume One of the U.S.A. Trilogy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Darkness at Noon&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve now read three of them so far: &lt;em&gt;Zanoni&lt;/em&gt; by Edward Bulwer-Lytton, &lt;em&gt;The Sailor Who Fell From Grace With The Sea&lt;/em&gt; by Yukio Mishima, and most recently &lt;em&gt;Nights At The Circus&lt;/em&gt; by Angela Carter. I didn&amp;rsquo;t like &lt;em&gt;The Sailor&lt;/em&gt; and I didn&amp;rsquo;t even finished &lt;em&gt;Zanoni&lt;/em&gt; (&lt;a href=&#34;http://www.amazon.com/Zanoni-Edward-Bulwer-Lytton-ebook/dp/B0084A7YGQ/ref=sr_1_2?ie=UTF8&amp;amp;qid=1455465835&amp;amp;sr=8-2&amp;amp;keywords=zanoni&#34;&gt;it&amp;rsquo;s free on Kindle&lt;/a&gt; by the way), but &lt;em&gt;Nights at the Circus&lt;/em&gt; was a real treat.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot of color, performance, sadness, and female-ness in &lt;em&gt;Nights at the Circus&lt;/em&gt;&amp;ndash; &amp;ldquo;A luscious and gooey dessert of a book&amp;hellip; doled out in sinful proportions,&amp;rdquo; heralds &lt;em&gt;The Washington Post Book World&lt;/em&gt;; &amp;ldquo;Loud, bawdy, and unabashedly sentimental,&amp;rdquo; wrote someone at the &lt;em&gt;Times&lt;/em&gt;. I think those both seem pretty apt, especially the &amp;ldquo;bawdy.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know much about Bowie, but I also think it&amp;rsquo;s pretty easy to see why this book was one of his favorites.  For each of these books, it&amp;rsquo;s fun to imagine where he read them, how he heard of them, what he took from them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://randallsmootdotcom.files.wordpress.com/2016/01/dvid-bowie-reading-and-smoking.jpg&#34; alt=&#34;Bowie reading dot tumblr dot com&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now I get to choose which one to try next.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best of My vimrc</title>
      <link>http://example.org/post/2016-02-12-best-of-my-vimrc/</link>
      <pubDate>Fri, 12 Feb 2016 23:06:59 -0500</pubDate>
      
      <guid>http://example.org/post/2016-02-12-best-of-my-vimrc/</guid>
      <description>

&lt;p&gt;I just realized that I&amp;rsquo;ve been using Vim for just about a year now (here&amp;rsquo;s &lt;a href=&#34;http://sts10.github.io/blog/2015/02/15/vim-update/&#34;&gt;one of my early posts on starting to make the switch&lt;/a&gt;), so I figured it&amp;rsquo;d be a good time to go over some of favorite parts of &lt;a href=&#34;https://github.com/sts10/terminal_and_vim_settings/blob/master/vimrc&#34;&gt;my vimrc&lt;/a&gt;. I&amp;rsquo;m certainly no Vim expert, but if nothing else than recording my &amp;ldquo;progress,&amp;rdquo; here&amp;rsquo;s a bit about how I use Vim at this point.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve already written about &lt;a href=&#34;http://sts10.github.io/blog/2015/08/02/markdwon-hyperlink-remap-for-vim/&#34;&gt;a Markdown hyperlink remap&lt;/a&gt; that still works really well and &lt;a href=&#34;http://sts10.github.io/blog/2015/09/13/ditching-nerdtree-and-using-vims-default-file-explorer/&#34;&gt;how I ditched NERDTree in favor of netrw&lt;/a&gt;, &lt;a href=&#34;http://sts10.github.io/blog/categories/vim/&#34;&gt;etc&lt;/a&gt;. But there&amp;rsquo;s plenty of more, smaller tricks I&amp;rsquo;ve picked up since then.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;vim-vs-macvim-vs-neovim&#34;&gt;Vim vs. MacVim vs. Neovim&lt;/h2&gt;

&lt;p&gt;Basically I split my usage between &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; and &lt;a href=&#34;https://github.com/macvim-dev/macvim/releases/&#34;&gt;MacVim&lt;/a&gt;. Sometimes I want to stay in the terminal (in which case I fire up Neovim), and other times I want a separate GUI. I&amp;rsquo;ll also admit that part of the reason I do this is because the iTerm2 + Neovim combo isn&amp;rsquo;t super stable at this point, as I&amp;rsquo;m running a beta version of iTerm2 &lt;a href=&#34;http://sts10.github.io/blog/2015/10/24/true-hex-colors-with-neovim-and-iterm2/&#34;&gt;in order to get better/more colors for Neovim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One way to make using both easier is to use your existing configuration by making these two symlinks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;To use your existing Vim configuration:
    ln -s ~/.vim ~/.config/nvim
    ln -s ~/.vimrc ~/.config/nvim/init.vim
See &#39;:help nvim&#39; for more information on Neovim.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neovim + iTerm2 is a pretty great combo, but for somethings I like using a GUI (MacVim). (I haven&amp;rsquo;t found a good Neovim GUI yet, though there are some other there, including &lt;a href=&#34;https://github.com/rogual/neovim-dot-app&#34;&gt;Neovim dot app&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;my-plugin-manager&#34;&gt;My Plugin Manager&lt;/h2&gt;

&lt;p&gt;To manage my ever-changing list of vim plugins I use &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;, which works really well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/junegunn/i/master/vim-plug/installer.gif&#34; alt=&#34;vim-plug in action&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In fact the first few lines of my vimrc automatically installs vim-plug if it&amp;rsquo;s not detected then installs all the listed plugins, a trick I picked up from vim-plug&amp;rsquo;s &lt;a href=&#34;https://github.com/junegunn/vim-plug/wiki/faq&#34;&gt;FAQ&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; vim-plug (https://github.com/junegunn/vim-plug) settings 
&amp;quot; Automatically install vim-plug and run PlugInstall if vim-plug not found
if empty(glob(&#39;~/.vim/autoload/plug.vim&#39;))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can then list my desired plugins as Github addresses:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call plug#begin(&#39;~/.vim/plugged&#39;)
Plug &#39;ctrlpvim/ctrlp.vim&#39;
Plug &#39;terryma/vim-smooth-scroll&#39;
Plug &#39;matze/vim-move&#39;
Plug &#39;tpope/vim-commentary&#39;
Plug &#39;sickill/vim-pasta&#39;
Plug &#39;justinmk/vim-sneak&#39;
Plug &#39;tpope/vim-vinegar&#39;
Plug &#39;ervandew/supertab&#39;
Plug &#39;vim-ruby/vim-ruby&#39;
Plug &#39;tpope/vim-rails&#39;
Plug &#39;tpope/vim-unimpaired&#39;
Plug &#39;tpope/vim-markdown&#39;
Plug &#39;sts10/vim-mustard&#39;
Plug &#39;junegunn/seoul256.vim&#39;
Plug &#39;altercation/vim-colors-solarized&#39;
Plug &#39;tpope/vim-surround&#39;
Plug &#39;tpope/vim-repeat&#39;
Plug &#39;bronson/vim-visual-star-search&#39;
Plug &#39;terryma/vim-multiple-cursors&#39;
Plug &#39;junegunn/goyo.vim&#39;
Plug &#39;tmhedberg/matchit&#39;
Plug &#39;AndrewRadev/splitjoin.vim&#39;
Plug &#39;dhruvasagar/vim-table-mode&#39;
Plug &#39;alvan/vim-closetag&#39;
Plug &#39;kana/vim-textobj-user&#39;
Plug &#39;lucapette/vim-textobj-underscore&#39; | Plug &#39;kana/vim-textobj-user&#39;
Plug &#39;jceb/vim-textobj-uri&#39;             | Plug &#39;kana/vim-textobj-user&#39;
Plug &#39;kana/vim-textobj-indent&#39;          | Plug &#39;kana/vim-textobj-user&#39;
Plug &#39;kana/vim-textobj-line&#39;            | Plug &#39;kana/vim-textobj-user&#39;
Plug &#39;wellle/targets.vim&#39;
Plug &#39;sts10/vim-zipper&#39;
Plug &#39;tpope/vim-fugitive&#39;

&amp;quot; All of your Plugins must be added before the following line
call plug#end()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I&amp;rsquo;m good to go. I can run &lt;code&gt;:PlugUpdate&lt;/code&gt; to get the latest versions of all the plugins, or &lt;code&gt;:PlugUpgrade&lt;/code&gt; to upgrade vim-plug itself. For me vim-plug offers three advantages over &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;: (1) The automatic install script (shown above) is nice for portability, (2) When using Neovim, vim-plug updates the plugins asynchronously, and (3) you don&amp;rsquo;t have to turn off file type detection (&lt;code&gt;filetype off&lt;/code&gt;) in your vimrc when you list your plugins with vim-plug, &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim#quick-start&#34;&gt;as you do with Vundle&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;quick-note-on-remappings&#34;&gt;Quick Note on Remappings&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://learnvimscriptthehardway.stevelosh.com/chapters/05.html&#34;&gt;This blog post&lt;/a&gt; recommends always using &lt;code&gt;nnoremap&lt;/code&gt; over &lt;code&gt;nmap&lt;/code&gt; (and the &lt;code&gt;inoremap&lt;/code&gt; and &lt;code&gt;vnoremap&lt;/code&gt; equivalents) to avoid recursion. So I&amp;rsquo;ve strived to do that in all situations where both options work. If &lt;code&gt;nnoremap&lt;/code&gt; doesn&amp;rsquo;t work but &lt;code&gt;nmap&lt;/code&gt; does (which is the case some of the time), I just use &lt;code&gt;nmap&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;favorite-plugins-and-my-configurations&#34;&gt;Favorite Plugins and My Configurations&lt;/h2&gt;

&lt;p&gt;While, as you can see, I&amp;rsquo;ve got a more than 20 plugins listed above, there&amp;rsquo;s only a few that are super important to my workflow. Among these I would include &lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;vim-surround&lt;/a&gt;, &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpope/vim-commentary&#34;&gt;vim-commentary&lt;/a&gt;, &lt;a href=&#34;https://github.com/matze/vim-move&#34;&gt;vim-move&lt;/a&gt;, and maybe &lt;a href=&#34;https://github.com/terryma/vim-smooth-scroll&#34;&gt;vim-smooth-scroll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I map sneak to Tab and Shift + Tab as follows (works in MacVim and Neovim + iTerm2):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; https://github.com/justinmk/vim-sneak
&amp;quot; Map Sneak_s using nmap-- not nnoremap. That seems to cause problems
nmap &amp;lt;Tab&amp;gt; &amp;lt;Plug&amp;gt;Sneak_s
nmap &amp;lt;S-Tab&amp;gt; &amp;lt;Plug&amp;gt;Sneak_S
vmap &amp;lt;Tab&amp;gt; &amp;lt;Plug&amp;gt;Sneak_s
vmap &amp;lt;S-Tab&amp;gt; &amp;lt;Plug&amp;gt;Sneak_S
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I set vim-move to &lt;code&gt;&amp;lt;c-j&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;c-k&amp;gt;&lt;/code&gt; with &lt;code&gt;let g:move_key_modifier = &#39;C&#39;&lt;/code&gt;. I switched from &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;vim-unimpaired&lt;/a&gt; to vim-move because vim-move auto-indents your code as you move it, which isn&amp;rsquo;t without a speed cost sometimes, but is really nice for me visually. Plus vim-unimpaired has a bunch of other default mappings besides &lt;code&gt;[e&lt;/code&gt; and &lt;code&gt;]e&lt;/code&gt; that I didn&amp;rsquo;t use (but that you may like!).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/c06acab07e6bf0bb27086c9694fe2f456101d21c/687474703a2f2f692e696d6775722e636f6d2f524d76384b734a2e676966&#34; alt=&#34;vim-move in action&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For more of my ~opinions~ plugins, I previously wrote about what I see as the &lt;a href=&#34;http://sts10.github.io/blog/2015/09/12/two-types-of-vim-plugins/&#34;&gt;two types of vim plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;colorscheme&#34;&gt;Colorscheme&lt;/h2&gt;

&lt;p&gt;I adapted a colorscheme I used in Sublime Text 2 called Mustard (located &lt;a href=&#34;https://github.com/panrafal/mustard-theme&#34;&gt;here&lt;/a&gt;) to make a colorscheme that I also called &lt;a href=&#34;https://github.com/sts10/vim-mustard&#34;&gt;Mustard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to its file structure, you can have vim-plug install and manage it by including &lt;code&gt;Plug &#39;sts10/vim-mustard&#39;&lt;/code&gt; in your vimrc (Mustard should work with other plugin managers too). Then be sure to have &lt;code&gt;colorscheme mustard&lt;/code&gt; and &lt;code&gt;set background=dark&lt;/code&gt; in your vimrc.&lt;/p&gt;

&lt;h2 id=&#34;line-numbers&#34;&gt;Line Numbers&lt;/h2&gt;

&lt;p&gt;I love my line numbers settings. I have relative number lines on every line except the one I&amp;rsquo;m currently on, which I have display the absolute number line rather than just &lt;code&gt;0&lt;/code&gt;. Here&amp;rsquo;s how I get that set up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Display relative line numbers
set relativenumber
&amp;quot; display the absolute line number at the line you&#39;re on
set number

&amp;quot; Keep the line number gutter narrow so three digits is cozy. 
set numberwidth=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, I can easily go up or down to specific line with &lt;code&gt;count + j&lt;/code&gt; or &lt;code&gt;k&lt;/code&gt;, but if Ruby tells me I have an error on line 76 I can just run &lt;code&gt;:76&lt;/code&gt; and the absolute line number will confirm that I landed on line 76.&lt;/p&gt;

&lt;h2 id=&#34;page-navigation&#34;&gt;Page Navigation&lt;/h2&gt;

&lt;p&gt;I have two nice sets of mappings that make file navigation a little easier for me.&lt;/p&gt;

&lt;p&gt;This first one is a bit tricky to explain. First, know that I linewrap on certain filetypes with the following autocmds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; By default don&#39;t wrap lines
set nowrap 

&amp;quot; But do wrap on these types of files...
autocmd FileType markdown setlocal wrap
autocmd FileType html setlocal wrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then I ran into the problem of &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; skipping over wrapped lines. I initially fixed this by simply remapping &lt;code&gt;j&lt;/code&gt; as &lt;code&gt;gj&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; as &lt;code&gt;gk&lt;/code&gt;. However, this gets screwy when you use a count with &lt;code&gt;j&lt;/code&gt; or &lt;code&gt;k&lt;/code&gt;. If you&amp;rsquo;re navigating by relative numbers with a count, you want &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;, when using a count, treating wrapped lines as one line rather than multiple lines.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://www.reddit.com/r/vim/comments/2k4cbr/problem_with_gj_and_gk/cliuz1o&#34;&gt;this Reddit comment&lt;/a&gt;, I found the perfect solution to this problem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; j and k don&#39;t skip over wrapped lines in following FileTypes, unless given a count (helpful since I display relative line numbers in these file types)
autocmd FileType html nnoremap &amp;lt;expr&amp;gt; j v:count ? &#39;j&#39; : &#39;gj&#39;
autocmd FileType html nnoremap &amp;lt;expr&amp;gt; k v:count ? &#39;k&#39; : &#39;gk&#39;
autocmd FileType markdown nnoremap &amp;lt;expr&amp;gt; j v:count ? &#39;j&#39; : &#39;gj&#39;
autocmd FileType markdown nnoremap &amp;lt;expr&amp;gt; k v:count ? &#39;k&#39; : &#39;gk&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I later simplified these mappings and added visual mode support (plus using it in &lt;code&gt;text&lt;/code&gt; files) like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;autocmd FileType html,markdown,text nnoremap &amp;lt;expr&amp;gt; j v:count ? &#39;j&#39; : &#39;gj&#39;
autocmd FileType html,markdown,text nnoremap &amp;lt;expr&amp;gt; k v:count ? &#39;k&#39; : &#39;gk&#39;

autocmd FileType html,markdown,text vnoremap &amp;lt;expr&amp;gt; j v:count ? &#39;j&#39; : &#39;gj&#39;
autocmd FileType html,markdown,text vnoremap &amp;lt;expr&amp;gt; k v:count ? &#39;k&#39; : &#39;gk&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My next trick is just to switch &lt;code&gt;&amp;lt;c-e&amp;gt;&lt;/code&gt; (by default scrolls up one line without moving cursor) and &lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; (by default scrolls up half a page). This conveniently puts scroll half page up (now &lt;code&gt;&amp;lt;c-e&amp;gt;&lt;/code&gt;) right above the default keymap for scroll half page down, which is &lt;code&gt;&amp;lt;c-d&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Easier page navigation
nnoremap &amp;lt;C-e&amp;gt; &amp;lt;C-u&amp;gt;
nnoremap &amp;lt;C-u&amp;gt; &amp;lt;C-e&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However I found that scrolling by this much instantly was a bit jarring. It took me a while to figure out why until, I realized that in Sublime Text I usually scrolled with my mouse&amp;rsquo;s scroll wheel (ugh), which was a bit more gradual. After some Googling I found &lt;a href=&#34;https://github.com/terryma/vim-smooth-scroll&#34;&gt;vim-smooth-scroll&lt;/a&gt;, which slows down any scroll/movement command that you specify.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I configure the plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; git@github.com:terryma/vim-smooth-scroll.git
noremap &amp;lt;silent&amp;gt; &amp;lt;c-e&amp;gt; :call smooth_scroll#up(&amp;amp;scroll, 30, 2)&amp;lt;CR&amp;gt;
noremap &amp;lt;silent&amp;gt; &amp;lt;c-d&amp;gt; :call smooth_scroll#down(&amp;amp;scroll, 30, 2)&amp;lt;CR&amp;gt;
noremap &amp;lt;silent&amp;gt; &amp;lt;c-b&amp;gt; :call smooth_scroll#up(&amp;amp;scroll*2, 30, 4)&amp;lt;CR&amp;gt;
noremap &amp;lt;silent&amp;gt; &amp;lt;c-f&amp;gt; :call smooth_scroll#down(&amp;amp;scroll*2, 30, 4)&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also make use of Vim&amp;rsquo;s default normal commands &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; to navigate by &amp;ldquo;paragraph&amp;rdquo; (blank lines).&lt;/p&gt;

&lt;h2 id=&#34;statusline&#34;&gt;Statusline&lt;/h2&gt;

&lt;p&gt;Just recently I decided to write my own custom statusline. Previously I had tried a plugin solution to a statusline, like &lt;a href=&#34;https://github.com/vim-airline/vim-airline&#34;&gt;airline&lt;/a&gt; or &lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;lightline&lt;/a&gt;. I forget which one I actually tried, but I couldn&amp;rsquo;t get it to work for me.&lt;/p&gt;

&lt;p&gt;Later I found a few blog posts (&lt;a href=&#34;http://got-ravings.blogspot.co.at/2008/08/vim-pr0n-making-statuslines-that-own.html&#34;&gt;this one in particular&lt;/a&gt;) that helped me write my own, which is pretty similar to the one that blog post says Tim Pope was using.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set statusline=%f
set statusline+=\ %h%w%m%r
set statusline+=%=
set statusline+=%-16(%{exists(&#39;g:loaded_fugitive&#39;)?fugitive#statusline():&#39;&#39;}\%)
set statusline+=\ %P/%L
set statusline+=\ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It gives basics like filename, percentage through the file, total number of lines, necessary flags, etc. The only fancy part is the &lt;code&gt;fugitive#statusline&lt;/code&gt;, which gives me the current Git branch, if you&amp;rsquo;re in a git directory AND you have &lt;a href=&#34;https://github.com/tpope/vim-fugitive&#34;&gt;Fugitive&lt;/a&gt; installed. At this point this is the only reason I have Fugitive installed, though I&amp;rsquo;m sure others find its other features helpful (from the README: &amp;ldquo;I&amp;rsquo;m not going to lie to you; fugitive.vim may very well be the best Git wrapper of all time.&amp;rdquo;).&lt;/p&gt;

&lt;h2 id=&#34;setting-default-filetype&#34;&gt;Setting Default FileType&lt;/h2&gt;

&lt;p&gt;I write Markdown pretty frequently, so I set Vim to set new files to Markdown syntax with the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; if no filetype specified, set ft=markdown (alternative would be text)
autocmd BufEnter * if &amp;amp;filetype == &amp;quot;&amp;quot; | setlocal ft=markdown | endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;markdown-tricks&#34;&gt;Markdown Tricks&lt;/h2&gt;

&lt;p&gt;For Markdown, I use &lt;a href=&#34;https://github.com/tpope/vim-markdown&#34;&gt;tpope&amp;rsquo;s vim-markdown&lt;/a&gt; mostly for improved syntax highlighting. I also spell out some languages for it to highlight in between code fences with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:markdown_fenced_languages = [&#39;html&#39;, &#39;css&#39;, &#39;javascript&#39;, &#39;ruby&#39;, &#39;python&#39;, &#39;bash=sh&#39;, &#39;yaml&#39;, &#39;json&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As mentioned above, I also wrote a handy little mapping for quickly creating links in Markdown, assuming the URL is in your system clipboard:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; In markdown files, Control + a surrounds highlighted text with square
&amp;quot; brackets, then dumps system clipboard contents into parenthesis
autocmd FileType markdown vnoremap &amp;lt;c-a&amp;gt; &amp;lt;Esc&amp;gt;`&amp;lt;i[&amp;lt;Esc&amp;gt;`&amp;gt;la](&amp;lt;Esc&amp;gt;&amp;quot;*]pa)&amp;lt;Esc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read more about my process coming to that mapping in &lt;a href=&#34;https://sts10.github.io/blog/2015/08/02/markdwon-hyperlink-remap-for-vim/&#34;&gt;this slightly-too-long blog post&lt;/a&gt; if you like.&lt;/p&gt;

&lt;h2 id=&#34;backup-swap-and-undo&#34;&gt;Backup, Swap, and Undo&lt;/h2&gt;

&lt;p&gt;For backup, swap, and undo files&amp;ndash; which I found frequently got mixed into Git repos no matter what I did with my gitignores&amp;ndash; I found this solution, which basically shoves all those files into three directories, rather than individual local project directories. We also have to &lt;a href=&#34;http://stackoverflow.com/a/22676189/3160994&#34;&gt;setup Vim&amp;rsquo;s persistent undo&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Save temporary/backup files not in the local directory, but in your ~/.vim
&amp;quot; directory, to keep them out of git repos. 
&amp;quot; But first mkdir backup, swap, and undo first to make this work
call system(&#39;mkdir ~/.vim&#39;)
call system(&#39;mkdir ~/.vim/backup&#39;)
call system(&#39;mkdir ~/.vim/swap&#39;)
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//

&amp;quot; Keep undo history across sessions by storing it in a file
if has(&#39;persistent_undo&#39;)
    call system(&#39;mkdir ~/.vim/undo&#39;)
    set undodir=~/.vim/undo//
    set undofile
    set undolevels=1000
    set undoreload=10000
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code even creates the directories for you (at least in macOS, using &lt;code&gt;mkdir&lt;/code&gt;) if they haven&amp;rsquo;t already been created, so portability is maintained. The commands do not overwrite the directory if it already exists.&lt;/p&gt;

&lt;h2 id=&#34;search-settings&#34;&gt;Search Settings&lt;/h2&gt;

&lt;p&gt;I like my search settings: ignore case unless you uppercase a letter, search as you type, and don&amp;rsquo;t highlight all matches.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; set search case to a good configuration http://vim.wikia.com/wiki/Searching 
set ignorecase
set smartcase

&amp;quot; search characters as they&#39;re entered
set incsearch
&amp;quot; don&#39;t highlight all search matches
set nohlsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;text-objects&#34;&gt;Text Objects&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;kana/vim-textobj-user&#39;
Plug &#39;lucapette/vim-textobj-underscore&#39; | Plug &#39;kana/vim-textobj-user&#39;
Plug &#39;jceb/vim-textobj-uri&#39;             | Plug &#39;kana/vim-textobj-user&#39;
Plug &#39;kana/vim-textobj-indent&#39;          | Plug &#39;kana/vim-textobj-user&#39;
Plug &#39;kana/vim-textobj-line&#39;            | Plug &#39;kana/vim-textobj-user&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve recently added four extra text objects, using &lt;a href=&#34;https://github.com/kana/vim-textobj-user&#34;&gt;kana&amp;rsquo;s vim-textobj-user&lt;/a&gt; plugin. With &lt;code&gt;underscore&lt;/code&gt;, &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;indent&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt;, I get more text objects in Vim. So for example &lt;code&gt;viu&lt;/code&gt; visually-selects the URI you&amp;rsquo;re on, and &lt;code&gt;yil&lt;/code&gt; yanks the inner &amp;ldquo;line&amp;rdquo;. There&amp;rsquo;s a ton more information in &lt;a href=&#34;https://github.com/kana/vim-textobj-user/wiki&#34;&gt;the wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;|&lt;/code&gt; there is &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt; syntax for denoting &lt;a href=&#34;https://github.com/junegunn/vim-plug#example&#34;&gt;a plugin dependency&lt;/a&gt;. (My understanding is that putting the &amp;ldquo;textobj-user&amp;rdquo; first in my vimrc is not sufficient due to vim-plug + Neovim&amp;rsquo;s asynchronous plugin installing and updating.) I indented it like so to make it look nice.&lt;/p&gt;

&lt;p&gt;Also, with &lt;code&gt;textobj-uri&lt;/code&gt;, I can remap &lt;code&gt;gx&lt;/code&gt; to work better and with more type of URLs (see &lt;a href=&#34;https://github.com/kana/vim-textobj-user/wiki&#34;&gt;this blog post for more&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; map gx and go to visually select a URI and then open it in default browser
&amp;quot; see: http://sts10.github.io/blog/2016/02/16/one-solution-to-a-problem-with-vims-gx-command/
nmap gx mxviugx&amp;lt;Esc&amp;gt;`x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also added &lt;a href=&#34;https://github.com/wellle/targets.vim&#34;&gt;targets.vim&lt;/a&gt; to get even more text objects. Basically my reasoning is the more text objects the better for when I&amp;rsquo;m creating a complex macro on the fly or need to do something complex within one command so that it is repeatable with the dot command (see &lt;a href=&#34;https://github.com/tpope/vim-repeat&#34;&gt;vim-repeat&lt;/a&gt;, a plugin for making the dot command work with some plugins).&lt;/p&gt;

&lt;h2 id=&#34;folding-with-vim-zipper-my-first-vim-plugin&#34;&gt;Folding with vim-zipper, My First Vim Plugin&lt;/h2&gt;

&lt;p&gt;I learned about Vim&amp;rsquo;s folding functionality pretty early on (see &lt;code&gt;:help folding&lt;/code&gt;) but I never really used it. In fact I still can&amp;rsquo;t quite get &lt;code&gt;set foldmethod=syntax&lt;/code&gt; to find the folds that I think it should.&lt;/p&gt;

&lt;p&gt;So for a while I just &lt;code&gt;set foldmethod=marker&lt;/code&gt; and really only used it in my vimrc.&lt;/p&gt;

&lt;p&gt;Later I realized the power of &lt;code&gt;set foldmethod=indent&lt;/code&gt;. I particularly liked that it was pretty intuitive to see how it would fold code (by indent!) but it also wouldn&amp;rsquo;t slow Vim down like the &lt;code&gt;syntax&lt;/code&gt; method could.&lt;/p&gt;

&lt;p&gt;However I wanted to make opening folds easier so I eventually made my first Vim plugin called &lt;a href=&#34;https://github.com/sts10/vim-zipper&#34;&gt;vim-zipper&lt;/a&gt;. You can read about it &lt;a href=&#34;https://github.com/sts10/vim-zipper&#34;&gt;on GitHub&lt;/a&gt; or in &lt;a href=&#34;https://sts10.github.io/blog/2016/03/20/vim-zipper-my-first-vim-plugin/&#34;&gt;another blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sts10/vim-zipper/master/vim-zipper-gif.gif&#34; alt=&#34;vim-zipper in action&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;system-clipboard&#34;&gt;System Clipboard&lt;/h2&gt;

&lt;p&gt;I use my leader (mapped to space) to interact with the system clipboard. I&amp;rsquo;m not 100% sure if this is true even on all Unix systems, but when I use Neovim in iTerm2 or MacVim, &lt;code&gt;*&lt;/code&gt; is the register of the system clipboard. I frequently interact with the system clipboard from Vim, so I set up these key mappings to make that easier:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; use leader to interact with the system clipboard
nnoremap &amp;lt;Leader&amp;gt;p &amp;quot;*]p
nnoremap &amp;lt;Leader&amp;gt;P &amp;quot;*]P

nnoremap &amp;lt;Leader&amp;gt;y :y*&amp;lt;cr&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;c ^&amp;quot;*c$
nnoremap &amp;lt;Leader&amp;gt;d ^&amp;quot;*d$

vnoremap &amp;lt;Leader&amp;gt;y &amp;quot;*y
vnoremap &amp;lt;Leader&amp;gt;c &amp;quot;*c
vnoremap &amp;lt;Leader&amp;gt;d &amp;quot;*d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;]&lt;/code&gt; in there automatically auto-indents the pasted text for me, which has worked well in both MacVim and Neovim but not &lt;em&gt;every time&lt;/em&gt;. I don&amp;rsquo;t think I have any other settings pertaining to the system clipboard at this point.&lt;/p&gt;

&lt;h2 id=&#34;deleting-text-without-overwriting-any-registers&#34;&gt;Deleting Text Without Overwriting Any Registers&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t love how easy it is to overwrite the contents of your default registry (i.e. when you delete something with &lt;code&gt;d&lt;/code&gt; with the desire to paste it somewhere else, but in the meantime you use &lt;code&gt;d&lt;/code&gt; again trying to actually delete something, but now that&amp;rsquo;s overwritten the default registry). To solve this I did my best to make &lt;code&gt;X&lt;/code&gt; (shift + &lt;code&gt;x&lt;/code&gt;) a new operator that deletes things to the &amp;ldquo;black hole registry,&amp;rdquo; &lt;code&gt;_&lt;/code&gt;, which doesn&amp;rsquo;t effect the default registry.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Make X an operator that removes text without placing text in the default registry
nmap X &amp;quot;_d
nmap XX &amp;quot;_dd
vmap X &amp;quot;_d
vmap x &amp;quot;_d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly I make &lt;code&gt;x&lt;/code&gt; in normal mode go to the black hole registry as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; have x (removes single character) not go into the default registry
nnoremap x &amp;quot;_x
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;make-visual-mode-a-little-more-powerful&#34;&gt;Make Visual Mode a Little More Powerful&lt;/h2&gt;

&lt;p&gt;Again in &lt;a href=&#34;https://www.reddit.com/r/vim/comments/3y2mgt/do_you_have_any_minor_customizationsmappings_that/cya0x04&#34;&gt;a Reddit comment&lt;/a&gt; I picked up this one-liner that makes the powerful dot command work on visually-selected lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Make the dot command work as expected in visual mode (via
&amp;quot; https://www.reddit.com/r/vim/comments/3y2mgt/do_you_have_any_minor_customizationsmappings_that/cya0x04)
vnoremap . :norm.&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note I&amp;rsquo;ve also got the &lt;a href=&#34;https://github.com/tpope/vim-repeat&#34;&gt;vim-repeat&lt;/a&gt; plugin to help make the dot command work a little better with other plugins.&lt;/p&gt;

&lt;p&gt;Then, in &lt;a href=&#34;https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db#.65mg9br0l&#34;&gt;a Medium post&lt;/a&gt; linked to from a &lt;a href=&#34;http://reddit.com/r/vim&#34;&gt;r/vim subreddit&lt;/a&gt; post that I have since lost track of, I just recently picked up this function that makes macros work over visually-selected lines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Allows you to visually select a section and then hit @ to run a macro on all lines
&amp;quot; https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db#.3dcn9prw6
xnoremap @ :&amp;lt;C-u&amp;gt;call ExecuteMacroOverVisualRange()&amp;lt;CR&amp;gt;

function! ExecuteMacroOverVisualRange()
  echo &amp;quot;@&amp;quot;.getcmdline()
  execute &amp;quot;:&#39;&amp;lt;,&#39;&amp;gt;normal @&amp;quot;.nr2char(getchar())
endfunction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both of these have come in handy often. Highly recommended, as they don&amp;rsquo;t seem to require new learning or get in the way of any other functionality.&lt;/p&gt;

&lt;h2 id=&#34;unminifying-javascript&#34;&gt;UnMinifying Javascript&lt;/h2&gt;

&lt;p&gt;My latest addition to my vimrc is this function and two keymaps for minifying and unminifying Javascript, which I do pretty frequently at work. I picked the function up from &lt;a href=&#34;https://gist.github.com/timtyrrell/0640d02bd08cd54f739a&#34;&gt;this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I did edit it a bit: (1) I added the &lt;code&gt;e&lt;/code&gt; after the &lt;code&gt;g&lt;/code&gt;s so that it never throws an error if it doesn&amp;rsquo;t find a match, (2) removed lines 5 and 8 from the gist&amp;ndash; removing line 5 was a personal preference and I&amp;rsquo;m not sure what line 8 does, and (3) I attempted to use a mark &lt;code&gt;j&lt;/code&gt; to save my place, but that doesn&amp;rsquo;t seem to work as I wanted it to.&lt;/p&gt;

&lt;p&gt;I also added a mapping to join the whole file&amp;ndash; effectively a &amp;ldquo;minify&amp;rdquo; command&amp;ndash; so I could easily go back and forth. Works well so far!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Simple re-format for minified Javascript
function! UnMinify()
    normal mj
    %s/{\ze[^\r\n]/{\r/ge
    %s/};\?\ze[^\r\n]/\0\r/ge
    %s/;\ze[^\r\n]/;\r/ge
    normal ggVG=`j
endfunction

autocmd FileType javascript nnoremap &amp;lt;Leader&amp;gt;j :call UnMinify()&amp;lt;CR&amp;gt;
autocmd FileType javascript nnoremap &amp;lt;Leader&amp;gt;k mjggvGJ&amp;lt;Esc&amp;gt;`j
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;other-random-tips&#34;&gt;Other Random Tips&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s another remapping of Vim&amp;rsquo;s default behavior that I consider pretty essential when indenting or un-indenting in visual mode.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Have the indent commands re-highlight the last visual selection to make
&amp;quot; multiple indentations easier
vnoremap &amp;gt; &amp;gt;gv
vnoremap &amp;lt; &amp;lt;gv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though I have since removed these lines from my vimrc. The reason being that if I want to indent something multiple times it&amp;rsquo;s slightly faster (and more &amp;ldquo;Vim-like in my mind) to use the dot command.&lt;/p&gt;

&lt;p&gt;Forgoing the above remappings and using the dot command is faster since if you only want to indent something once (a relatively common case) using visual mode, you want to be dropped into normal mode so you can move on to other tasks that much quicker. You don&amp;rsquo;t need to exit visual mode. But it you want to indent the text you just indented, or undo your last indentation move, you can use the dot command or undo (&lt;code&gt;u&lt;/code&gt;) respectively. Both are one keystroke, so no loss there.&lt;/p&gt;

&lt;h2 id=&#34;default-parts-of-vim-that-i-use-frequently&#34;&gt;Default Parts of Vim That I Use Frequently&lt;/h2&gt;

&lt;h3 id=&#34;exiting-insert-mode&#34;&gt;Exiting Insert Mode&lt;/h3&gt;

&lt;p&gt;In my early days I had remapped &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; to &lt;code&gt;ii&lt;/code&gt; (&lt;code&gt;imap ii &amp;lt;Esc&amp;gt;&lt;/code&gt;), since escape was so far away, but now I just use &lt;code&gt;&amp;lt;C-[&amp;gt;&lt;/code&gt;, which by default does almost the exactly same thing as &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;file-management&#34;&gt;File Management&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve tried to find solutions for a couple of problems but have learned to just use Vim&amp;rsquo;s defaults. One example would be file-management: I used to use NERDTree, but &lt;a href=&#34;http://sts10.github.io/blog/2015/09/13/ditching-nerdtree-and-using-vims-default-file-explorer/&#34;&gt;now just use Vim&amp;rsquo;s built-in file explorer&lt;/a&gt;, netrw, combined with Tim Pope&amp;rsquo;s &lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt;. I do have &lt;a href=&#34;https://github.com/ctrlpvim/ctrlp.vim&#34;&gt;ctrlp.vim&lt;/a&gt; (a fuzzy finder) installed, and I even tried &lt;a href=&#34;http://sts10.github.io/blog/2016/01/09/vim-line-complete-with-fzf/&#34;&gt;fzf&lt;/a&gt;,but I find that I use netrw more frequently. Though granted I have yet to do a lot of work in a project that has many files, like a Rails project would have, which may necessitate a fuzzy finder.&lt;/p&gt;

&lt;h3 id=&#34;closing-syntax&#34;&gt;Closing Syntax&lt;/h3&gt;

&lt;p&gt;After using Vim for a while I started to miss how Sublime Text would automatically close brackets and parentheses for you. In Sublime, be default, if you type &lt;code&gt;def test(&lt;/code&gt; it gives you the closing parenthesis and keeps your cursor between them: &lt;code&gt;def test(|)&lt;/code&gt;. Then, most importantly, if you type your argument and type the closing parenthesis, you just &amp;ldquo;type over&amp;rdquo; the closing parenthesis that Sublime added for you. It&amp;rsquo;s a nice, out-of-the-way implementation that I have been hoping to find in a vim plugin but haven&amp;rsquo;t yet (&lt;a href=&#34;https://twitter.com/sts10&#34;&gt;tweet at me if you have ideas&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve tried a few plugins for auto-closing so far: &lt;a href=&#34;https://github.com/Townk/vim-autoclose&#34;&gt;vim-autoclose&lt;/a&gt; and &lt;a href=&#34;https://github.com/rstacruz/vim-closer&#34;&gt;vim-closer&lt;/a&gt;, as well as &lt;a href=&#34;https://github.com/tpope/vim-endwise&#34;&gt;vim-endwise&lt;/a&gt;, but these days I don&amp;rsquo;t use anything and have resigned to just closing my parentheses and brackets and Ruby methods myself by hand. (Update: A Twitter user whose account is private DM&amp;rsquo;d me pointing to &lt;a href=&#34;https://github.com/Raimondi/delimitMate&#34;&gt;delimitMate&lt;/a&gt; as an alternative. Separately, &lt;a href=&#34;https://twitter.com/VimLinks/status/780693728545693696&#34;&gt;@VimLinks&lt;/a&gt; has tweeted about &lt;a href=&#34;https://github.com/cohama/lexima.vim&#34;&gt;lexima.vim&lt;/a&gt;, which is another option. I&amp;rsquo;ve yet to give either a try&amp;ndash; mostly because I&amp;rsquo;ve grown so used to closing brackets and parentheses manually, but you might find one of them to be the best option for you.)&lt;/p&gt;

&lt;h3 id=&#34;spellcheck&#34;&gt;Spellcheck&lt;/h3&gt;

&lt;p&gt;I use &lt;code&gt;]s&lt;/code&gt; and &lt;code&gt;[s&lt;/code&gt; to navigate to the next misspelled word. Once on a misspelled word, just hit &lt;code&gt;z=&lt;/code&gt; to get some suggestions. To &amp;ldquo;teach&amp;rdquo; Vim the word under the cursor, use &lt;code&gt;zg&lt;/code&gt;. Looks like &lt;code&gt;zug&lt;/code&gt; undoes the adding to your learned-words list. See &lt;code&gt;:help spell&lt;/code&gt; for more.&lt;/p&gt;

&lt;h3 id=&#34;find-and-replace&#34;&gt;Find and replace&lt;/h3&gt;

&lt;p&gt;While I have &lt;code&gt;multiple-cursors&lt;/code&gt; installed, I rarely use it (I just had to look up the default mapping). Instead I use &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; to search, make the change with &lt;code&gt;c&lt;/code&gt; and a motion, exit insert mode with &lt;code&gt;&amp;lt;C-[&amp;gt;&lt;/code&gt;, then use &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;N&lt;/code&gt; to go to the next instance and hit &lt;code&gt;.&lt;/code&gt; to make the change. If the repeated change I want to make is too complex for the dot command to retain, I make use of Vim&amp;rsquo;s macros (see &lt;code&gt;:h complex-repeat&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I do have &lt;a href=&#34;https://github.com/bronson/vim-visual-star-search&#34;&gt;vim-visual-star-search&lt;/a&gt; installed to make &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; work a bit more intuitively for me, and I certainly could make use of it when finding and replacing, but I haven&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Update: If you&amp;rsquo;re really missing Sublime Text&amp;rsquo;s multiple cursor feature, &lt;a href=&#34;http://www.kevinli.co/posts/2017-01-19-multiple-cursors-in-500-bytes-of-vimscript/&#34;&gt;this solid blog post&lt;/a&gt; gives some unique recommendations of ways to reproduce Sublime&amp;rsquo;s functionality in Vim with a few lines of Vimscript and remapping.&lt;/p&gt;

&lt;h3 id=&#34;other-vim-defaults-that-i-use-frequently&#34;&gt;Other Vim Defaults That I Use Frequently&lt;/h3&gt;

&lt;p&gt;Know that when your cursor is on a URL you can hit &lt;code&gt;gx&lt;/code&gt; in normal mode Vim will open that URL in your default browser. I&amp;rsquo;ve found this to be more helpful than I thought it would be (though there appears to be at least &lt;a href=&#34;http://sts10.github.io/blog/2016/02/16/one-solution-to-a-problem-with-vims-gx-command/&#34;&gt;one strange problem with it&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;o&lt;/code&gt; in visual mode changes which &amp;ldquo;end&amp;rdquo; of a visual selection you&amp;rsquo;re changing, which I love for its granularity.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-l&amp;gt;&lt;/code&gt; auto completes an entire line, looking within your current buffer for a line to match. (If you&amp;rsquo;re looking for a command to auto-complete lines from your entire project, check out &lt;a href=&#34;http://sts10.github.io/blog/2016/01/09/vim-line-complete-with-fzf/&#34;&gt;my post on fzf&lt;/a&gt;.) You may also want to checkout the &lt;code&gt;:copy Ex&lt;/code&gt; command, explained in &lt;a href=&#34;http://vimcasts.org/episodes/long-range-line-duplication/&#34;&gt;this great vimcast&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;things-i-don-t-really-have-an-answer-for&#34;&gt;Things I Don&amp;rsquo;t Really Have an Answer For&lt;/h2&gt;

&lt;p&gt;In addition to auto-closing parentheses and brackets that I mentioned above, I don&amp;rsquo;t have a good general auto-completion solution setup beyond what &lt;a href=&#34;https://github.com/ervandew/supertab&#34;&gt;SuperTab&lt;/a&gt; gives me. A lot of people seem to use &lt;a href=&#34;https://github.com/Valloric/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt; or &lt;a href=&#34;https://github.com/Shougo/deoplete.nvim&#34;&gt;Deoplete&lt;/a&gt; for Neovim, but honestly the installation process daunts me a bit, and surely would decrease the portability of my whole setup for a feature that I don&amp;rsquo;t think I&amp;rsquo;d use a ton. I should probably instead spend time investigating snippets.&lt;/p&gt;

&lt;p&gt;Another thing I&amp;rsquo;m not sure about is how to best search your entire working directory/project for a bit of code. I think the &lt;a href=&#34;http://vimcasts.org/episodes/search-multiple-files-with-vimgrep/&#34;&gt;vimgrep&lt;/a&gt; command is the default, but I could also use ack or fzf? Again it&amp;rsquo;s one of those things I haven&amp;rsquo;t really needed yet, though I did use quite a bit when wrestling large Ruby on Rails projects in Sublime Text. With Vim, there&amp;rsquo;s always something more to learn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software Updating As Ritual</title>
      <link>http://example.org/post/2016-01-30-software-updating-as-ritual/</link>
      <pubDate>Sat, 30 Jan 2016 12:39:02 -0500</pubDate>
      
      <guid>http://example.org/post/2016-01-30-software-updating-as-ritual/</guid>
      <description>

&lt;p&gt;A few weeks ago I read &lt;a href=&#34;http://mirrorshades.net/post/132753032310&#34;&gt;a blog post&lt;/a&gt; by &lt;a href=&#34;https://github.com/bdha&#34;&gt;Bryan Horstmann-Allen&lt;/a&gt; (h/t &lt;a href=&#34;https://twitter.com/ftrain/status/671127035675353088&#34;&gt;Paul Ford&lt;/a&gt;) about him getting frustrated with OS X. Here&amp;rsquo;s how he framed his issue:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Around OS X 10.9, though, things started going wrong. 10.10 improved a few of these things, but overall it just kept degrading. It&amp;rsquo;s slower, there are a lot of really distracting &amp;ldquo;features&amp;rdquo; I can&amp;rsquo;t seem to actually reliably disable: It&amp;rsquo;s tied into my phone, and my wife&amp;rsquo;s phone, so when she adds events I get duplicate notifications (deliver once being a fallacy, I suppose), disrupting me from my work. I disable this, but&amp;hellip;&lt;/p&gt;

&lt;p&gt;It harasses me every day to upgrade. It &lt;em&gt;desperately&lt;/em&gt; wants to just upgrade whenever it wants. More and more it acts like the Windows machines I&amp;rsquo;ve had to support over the last 20 years, which is deeply frustrating.&lt;/p&gt;

&lt;p&gt;It regularly does things in the background without asking, consuming all my bandwidth&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt; 

&lt;p&gt;Horstmann-Allen ended up switching to an alternative operating system called &lt;a href=&#34;https://www.freebsd.org/&#34;&gt;FreeBSD&lt;/a&gt;, which he specifically praises for its simple installation and upgrading procedure: &amp;ldquo;The freebsd-update(8) tool just works. Sometimes it works so well I wonder if it actually did anything.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;At the time it felt a bit drastic to me&amp;ndash; to lose all that OS X offers only to avoid a sometimes-convenient integrated system and some pesky update messages. But I was also noticing frequent asks to be updated from both my iPhone&amp;rsquo;s operating system and all the apps I have on it. At this point I have to remove music from my phone in order to make room for seemingly-unimportant updates to apps like Slack and Flixster, which I don&amp;rsquo;t use often but probably involve a headache if I ever wanted to re-install after removing from my phone to get more free space.&lt;/p&gt;

&lt;p&gt;(Interestingly, just last week &lt;a href=&#34;https://twitter.com/chrissyteigen&#34;&gt;Christine Teigen&lt;/a&gt; aired a similar complaint.)&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hate this macbook relationship. &amp;quot;When do you want to update?&amp;quot; &amp;quot;Later&amp;quot; &amp;quot;later today or later tomorrow?&amp;quot; Oh my god just fucking LATER&lt;/p&gt;&amp;mdash; christine teigen (@chrissyteigen) &lt;a href=&#34;https://twitter.com/chrissyteigen/status/690584538121015296&#34;&gt;January 22, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;But it also reminded me of &lt;a href=&#34;http://sts10.github.io/blog/2015/09/28/passing-notes/&#34;&gt;my recent switch from Evernote to a involving multiple loosely-connected parts (one of which I coded myself) instead of one integrated piece of software&lt;/a&gt;. When things get too big it&amp;rsquo;s easy for that thing to get in your way. Convenience soon becomes a hassle, especially when users&amp;rsquo; needs differentiate (note that Horstmann-Allen&amp;rsquo;s needs were extreme in their simplicity compared to the average OS X user, who likely didn&amp;rsquo;t notice that nagging software updates until later).&lt;/p&gt;

&lt;h2 id=&#34;convergence-and-divergence&#34;&gt;Convergence and Divergence&lt;/h2&gt;

&lt;p&gt;I had these ideas floating in my mind when I read Nilay Patel &lt;a href=&#34;http://www.theverge.com/2016/1/25/10828208/welcome-to-the-divergence-vinyl-turntables-film-cameras&#34;&gt;welcoming us to the divergence&lt;/a&gt; on The Verge this week. He lays out the paired concepts of &amp;ldquo;convergence&amp;rdquo;: when many technologies merge into one device (think the iPhone), and &amp;ldquo;divergence&amp;rdquo;: &amp;ldquo;when experiences and devices that operate independently of a smartphone become more interesting than the phones themselves.&amp;rdquo; His thesis is that the pendulum is swinging back to divergence from the &amp;ldquo;smartphone convergence.&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But there are little signs that the smartphone convergence might be over, and the pendulum might be swinging back a little. At CES this year Kodak introduced &lt;a href=&#34;http://www.theverge.com/2016/1/5/10719012/kodaks-new-gadget-is-a-super-8-film-camera-and-it-kind-of-warms-my&#34;&gt;a new film Super 8 camera&lt;/a&gt; that became the talk of the show; the other big introduction was &lt;a href=&#34;http://www.theverge.com/2016/1/6/10725560/technics-1200gae-turntable-hands-on-luxury-tank-ces-2016&#34;&gt;a revived Technics SL-1200 turntable&lt;/a&gt;. Sony also &lt;a href=&#34;http://www.theverge.com/2016/1/5/10721108/sony-turntable-ces-2016-video-hi-res-audio&#34;&gt;introduced a turntable&lt;/a&gt; — as in, something designed to play phonograph records in 2016. Sony Electronics COO Mike Fasulo told me with a straight face that &amp;ldquo;vinyl is different, it&amp;rsquo;s happening, it&amp;rsquo;s new&amp;hellip; it&amp;rsquo;s a huge trend.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have a turntable and a mirrorless camera each of which I love far more than my iPhone 6. I love them for their analog-ness, the ritual of putting on a record and playing music that has never been digitized into 1s and 0s. But the other reason I love these types of products is that they are parts of larger systems.&lt;/p&gt;

&lt;p&gt;We can talk about &lt;a href=&#34;https://youtu.be/vmVaCbxkd34?t=57s&#34;&gt;the ritualistic-ness of playing a record&lt;/a&gt; or developing film. But let&amp;rsquo;s just start with systems build of small, independent, loosely-connected components that do one job well, of which I would argue a turntable + stereo is one.&lt;/p&gt;

&lt;h2 id=&#34;small-independent-loosely-connected-components-that-do-one-job-well&#34;&gt;Small, Independent, Loosely-Connected Components That Do One Job Well&lt;/h2&gt;

&lt;p&gt;My turntable, an &lt;a href=&#34;http://www.amazon.com/Audio-Technica-AT-LP120-USB-Direct-Drive-Professional-Turntable/dp/B002S1CJ2Q/ref=sr_1_1?ie=UTF8&amp;amp;qid=1454167884&amp;amp;sr=8-1&amp;amp;keywords=audio+technica+at+lp120+usb&#34;&gt;Audio Technica LP120&lt;/a&gt;, connects to a stereo integrated amplifier (an &lt;a href=&#34;http://nadelectronics.com/products/hifi-amplifiers/C-320BEE-Stereo-Integrated-Amplifier&#34;&gt;NAD C 320BEE&lt;/a&gt;)&amp;ndash; which could be split into a separate pre-amplifier and amplifer by the way. My NAD is connected to a pair of &lt;a href=&#34;http://www.amazon.com/gp/product/B003XRD9UA?psc=1&amp;amp;redirect=true&amp;amp;ref_=oh_aui_detailpage_o04_s00&#34;&gt;Klipsch speakers&lt;/a&gt;. I can also connect an iPhone to the amplifier via a cheap, non-proprietary audio cable. Each component does its single job well, and plays wells with a variety of other components I could switch in whenever I choose, including ones that are being designed as I write this. When someone brings over a record pressed in England in 1974, I put it on the platter, select one of three speeds, and it comes through the speakers. No software updates or iTunes passwords.&lt;/p&gt;

&lt;p&gt;The antithesis here is something like Sonos&amp;ndash; total integration and convergence, from the music source to the proprietary cables and speakers. That is what my dad opted for, wiring the Sonos system through ever room in their new empty-nest home. Sure, there are benefits here, but I still am often unable to get music to play in that house.&lt;/p&gt;

&lt;p&gt;Another, more digital example: My main text and code editor, &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt;, is an open-source project that&amp;rsquo;s very regularly updated to Github. It&amp;rsquo;s also able to be easily &lt;a href=&#34;https://github.com/neovim/homebrew-neovim/blob/master/README.md&#34;&gt;installed and updated through Homebrew&lt;/a&gt;. That means I can upgrade to the latest developer version&amp;ndash; bleeding edge! &amp;ndash; by running a single command (&lt;code&gt;brew reinstall --HEAD neovim&lt;/code&gt;) which completely reinstalls the program. It never nags me, but there&amp;rsquo;s (almost) always a shiny new version available if I feel like being on the cutting edge.&lt;/p&gt;

&lt;p&gt;While it is a vital component in my &amp;ldquo;coding system&amp;rdquo; (which includes other software like Google Chrome, Git, Ruby, RVM, etc.), it is a component so interchangable that I have at least three other text editors I could use to edit code while Neovim updates (which takes about 5 minutes and requires no restart), two of which share the &lt;a href=&#34;https://github.com/sts10/terminal_and_vim_settings/blob/master/vimrc&#34;&gt;same exact configuration files&lt;/a&gt; as Neovim (&lt;a href=&#34;https://medium.com/@sts10/why-i-want-text-file-preferences-for-every-application-i-use-72c368f9b6fd#.dyvblrzaw&#34;&gt;text preferences FTW&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re balancing convenience, integration, upgrade-ability, and ritual-ness (which includes any preference for &amp;ldquo;analog-ness&amp;rdquo; or &amp;ldquo;digital-ness&amp;rdquo;). But also (backwards-)compatibility and portability.&lt;/p&gt;

&lt;h2 id=&#34;why-focus-on-updating&#34;&gt;Why Focus on Updating?&lt;/h2&gt;

&lt;p&gt;Updates, both of software and of hardware, are necessary to these systems, whether as an offer to (or in some cases, nagging ask for) users to improve their current version or to adapt to some outside change (compatibility with a new technology, a response to a new security threat, etc.). Thus I think updates, and the ease of updating, offer an interesting view of how these system measure up against each other. (Granted, some technologies really never need to be updated [a hammer, a table, a knife, even my refrigerator], but not everything we use is so stable.)&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get to an example. Software updates, if your software is sufficiently small, shouldn&amp;rsquo;t derail your workflow. If, hypothetically, Audio Technica notified me that I could freely and instantly upgrade my LP120 to the latest version (LP121.3.4, say), I would hypothetically be more inclined to run it compared to a Sonos update. The reasons are multiple.&lt;/p&gt;

&lt;h2 id=&#34;the-possible-pains-of-updating-and-how-divergent-systems-handle-them-better-than-converged-systems&#34;&gt;The (Possible) Pains of Updating, And How Divergent Systems Handle Them Better Than Converged Systems&lt;/h2&gt;

&lt;p&gt;What are the hassles or problems associated with updating anything? For one, in accepting (and running) a given update I run the short-term risk/hassle that a large part of my system goes down temporarily. But secondly there&amp;rsquo;s the longer-term issue of whether this update is going to move the product closer to or further away from my use and needs, i.e. a feature I rely on will be changed or even completely removed in such a way that prevents or hinders me from using the product as I wish.&lt;/p&gt;

&lt;p&gt;In my mind Teigen complained of problem #1, while Horstmann-Allen was more concerned about problem #2.&lt;/p&gt;

&lt;p&gt;(Of course I&amp;rsquo;ll never get the option to update the software on my particular turntable because it has no software&amp;ndash; that&amp;rsquo;s part of the advantage it has over the other options we&amp;rsquo;re discussing. But (a) they may come likely come out with a new physical piece of hardware called the LP130, and (b) that LP130 may have software in it.)&lt;/p&gt;

&lt;p&gt;In both cases, divergent systems comprised of small, dedicated components hold an advantage. Since you only have small, independent parts, updating these individual components is relatively low-risk and painless. The maintainers of these smaller components know they have to work with other components, usually made by different companies, so they are less likely to undertake large changes in how they operate via an update.&lt;/p&gt;

&lt;p&gt;Regarding the second problem, I have what I think is a slightly more interesting idea. We have to assume that a very high percentage of LP120 owners use the device to play records. (Compare that to the insanely varied use-cases of something like an iPhone or OS X 10.10.) The user makes the peculiarities of her use-case clear in the way she sets up her unique system&amp;ndash; for example I might want to play my records louder than another user, so I have a different needle, amplifier, and speakers, but we can both attach those components (including the needle) to LP120s.&lt;/p&gt;

&lt;p&gt;Plus if a component does diverge from your use-case, you can easily switch it out for a competing product that more closely aligns with your needs.&lt;/p&gt;

&lt;p&gt;Compare this to the power that the lead product manager of Sonos or iTunes or Spotify have over the user experience. Theoretically, iTunes could change from a music player to a video streaming product with one software update.&lt;/p&gt;

&lt;h2 id=&#34;some-lingering-questions&#34;&gt;Some Lingering Questions&lt;/h2&gt;

&lt;p&gt;Are complaints about updating software symptoms of some kind of bloat&amp;ndash; canaries in the coal mine for the pendulum swinging back from convergence to divergence?&lt;/p&gt;

&lt;p&gt;What is the mirrored symptom? In other words, what starts the pendulum away from divergence?&lt;/p&gt;

&lt;h3 id=&#34;the-master-switch-cycle&#34;&gt;The Master Switch Cycle&lt;/h3&gt;

&lt;p&gt;Is there a cycle, a pendulum, that switches between divergence and convergence? How do convergent times and divergent times stack up to the cycle in the development of information technologies swinging between the &amp;ldquo;open&amp;rdquo; eras dominated by &amp;ldquo;tinkerers&amp;rdquo; and the &amp;ldquo;closed&amp;rdquo; periods dominated by big industry and capitalism described by Tim Wu in &lt;em&gt;The Master Switch&lt;/em&gt;? A quick explanation of what I&amp;rsquo;m talking about from &lt;a href=&#34;http://sts10.github.io/blog/2015/07/15/master-switch-and-hackers/&#34;&gt;my quick post on the book&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wu&amp;rsquo;s main idea in the book is that information systems go through “a long &amp;lsquo;cycle&amp;rsquo; whereby open information systems become consolidated and closed over time, reopening only after disruptive innovation” comes along again&amp;hellip; Wu observes that these information technologies (telephone, radio, TV, internet) go through cycles of “open” (personified by low barrier to entry, amateurs fooling around for little pay, and spotty service and quality of product&amp;ndash; more of people pursuing “what could be”) and “closed” (large companies growing powerful, more money injected into an industry, a cleaning-up of standards [either by government regulations or large companies pushing out smaller competition]).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My obvious guess would be that periods where a technology is &amp;ldquo;open&amp;rdquo; correlates with times of divergence, since (a) no one player is big enough to dominate the industry, let alone with one product, and (b) odds are no one knows exactly how this open technology will be used or should be used, and thus products will be unable to be converge multiple products into one pipeline without loosing a significant amount of users. Plus these tinkerers, almost by definition, enjoy switching out components and, in some cases, creating their own. After all, you could open and &amp;ldquo;hack&amp;rdquo; the first Macintosh computer.&lt;/p&gt;

&lt;h3 id=&#34;where-does-that-leave-the-ritual&#34;&gt;Where does that leave &amp;ldquo;the ritual&amp;rdquo;?&lt;/h3&gt;

&lt;p&gt;We also have what seems to me a distinct notion of why turntables and film cameras are &amp;ldquo;coming back&amp;rdquo;, which is that they are arguably less convenient to use than their newer, more digital alternatives. It seems to me that what you&amp;rsquo;re buying with this loss of convenience is the sense of a ritual. Dictionary.com &lt;a href=&#34;http://dictionary.reference.com/browse/ritual?s=t&#34;&gt;defines&lt;/a&gt; &amp;ldquo;ritual&amp;rdquo; as &amp;ldquo;an established or prescribed procedure for a religious or other rite.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/reckless&#34;&gt;@reckless&lt;/a&gt; My running theory is that they require more dedicated attention—an enjoyably mindful sort of engagement.&lt;/p&gt;&amp;mdash; David Yee (@tangentialism) &lt;a href=&#34;https://twitter.com/tangentialism/status/686940062446125056&#34;&gt;January 12, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;But where does the pleasure of ritual, of devices that &amp;ldquo;require more dedicated attention&amp;ndash; an enjoyably mindful sort of engagement,&amp;rdquo; come from? For example, if I bought or created a physical robot-like thing that moved vinyl records out of their sleeves and onto my turntable, taking its orders, say, an iOS app on my phone, would that ruin the &amp;ldquo;ritual&amp;rdquo; of playing records? Does it need to involve something that is analog? Are there digital rituals, or must they be mostly/entirely an analog process?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure about that, but I will say that running one command and re-installing Neovim has become a bit of an &amp;ldquo;established or prescribed procedure&amp;rdquo; for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/zCPZIvM.gif&#34; alt=&#34;Neovim re-installation process/ritual&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/reckless&#34;&gt;@reckless&lt;/a&gt; Ritual never goes out of fashion.&lt;/p&gt;&amp;mdash; David Yee (@tangentialism) &lt;a href=&#34;https://twitter.com/tangentialism/status/686940173033148417&#34;&gt;January 12, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>